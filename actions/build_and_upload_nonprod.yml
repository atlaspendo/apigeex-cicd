name: Build and Upload Non-Prod

on:
  workflow_call:
    inputs:
      proxy_name:
        description: The name of the API proxy to deploy
        required: true
        type: string
      proxy_directory:
        description: Working directory to zip up as your proxy bundle
        required: false
        type: string
        default: 'apiproxy'
    secrets:
      secrets_yml:
        required: true

jobs:
  Build_And_Upload_NonProd:
    runs-on: ubuntu-latest
    env:
      APIGEE_ORG: ${{ secrets.secrets_yml.APIGEE_ORG }}
      APIGEE_ORG_PROD: ${{ secrets.secrets_yml.APIGEE_ORG_PROD }}
      WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.secrets_yml.WORKLOAD_IDENTITY_PROVIDER }}
      WORKLOAD_IDENTITY_PROVIDER_PROD: ${{ secrets.secrets_yml.WORKLOAD_IDENTITY_PROVIDER_PROD }}
      SERVICE_ACCOUNT: ${{ secrets.secrets_yml.SERVICE_ACCOUNT }}
      SERVICE_ACCOUNT_PROD: ${{ secrets.secrets_yml.SERVICE_ACCOUNT_PROD }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install apigeecli
        id: install-apigeecli
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: |
            echo "::group::üîß Installing Apigee CLI"
            mkdir -p $HOME/.apigeecli/bin
            curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
            echo "$HOME/.apigeecli/bin" >> $GITHUB_PATH
            echo "‚úÖ apigeecli installed successfully"
            echo "::endgroup::"

      - name: Generate Version ID
        id: generate-version
        run: |
          TAG=$(git rev-parse --short "$GITHUB_SHA")-$(date +%Y%m%d%H%M%S)
          echo "version_id=$TAG" >> $GITHUB_OUTPUT

      - name: Create API bundle
        id: create-bundle
        run: |
          echo "::group::üì¶ Creating API Bundle"
          mkdir -p artifacts
          
          create_bundle() {
            local source_dir="$1"
            echo "Creating bundle from: $source_dir"
            mkdir -p temp_bundle
            cp -r "$source_dir" temp_bundle/apiproxy
            cd temp_bundle
            zip -r ../proxy-${{ steps.generate-version.outputs.version_id }}.zip apiproxy
            cd ..
            cp proxy-${{ steps.generate-version.outputs.version_id }}.zip artifacts/
            echo "‚úÖ Bundle created and saved to artifacts"
            echo "üìù Bundle contents:"
            unzip -l proxy-${{ steps.generate-version.outputs.version_id }}.zip
            rm -rf temp_bundle
            echo "revision_file=artifacts/revision.txt" >> $GITHUB_OUTPUT
          }
          
          if [ -d "${{ inputs.proxy_directory }}" ]; then
            create_bundle "${{ inputs.proxy_directory }}"
          elif [ -d "src/${{ inputs.proxy_directory }}" ]; then
            create_bundle "src/${{ inputs.proxy_directory }}"
          else
            echo "‚ùå Error: Could not find apiproxy directory"
            exit 1
          fi
          echo "::endgroup::"

      - name: Get GCP Token
        id: get-token
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}
          token_format: access_token
          create_credentials_file: true

      - name: Upload and Get Revision
        id: upload
        run: |
          echo "::group::üì§ Uploading to Non-Prod"
          echo "Organization: ${{ secrets.APIGEE_ORG }}"
          echo "Proxy name: ${{ inputs.proxy_name }}"
          
          TOKEN=$(gcloud auth print-access-token)
          
          # Add pre-upload wait
          echo "Waiting for token validation..."
          sleep 5
          
          IMPORT_OUTPUT=$($HOME/.apigeecli/bin/apigeecli apis create bundle \
            -n "${{ inputs.proxy_name }}" \
            -p artifacts/proxy-${{ steps.generate-version.outputs.version_id }}.zip \
            --org "${{ secrets.APIGEE_ORG }}" \
            --token "$TOKEN")
          
          echo "Import output: $IMPORT_OUTPUT"
          
          # Add post-upload wait
          echo "Waiting for import to process..."
          sleep 5
          
          NEW_REVISION=$(echo "$IMPORT_OUTPUT" | grep -oP '"revision":\s*"\K[^"]+')
          if [ -z "$NEW_REVISION" ]; then
            echo "‚ùå Failed to get revision number"
            exit 1
          fi
          
          # Save revision number for future use
          echo "$NEW_REVISION" > artifacts/revision.txt
          echo "‚úÖ Successfully uploaded revision: $NEW_REVISION"
          echo "revision=$NEW_REVISION" >> $GITHUB_OUTPUT
          echo "::endgroup::"

      - name: Verify Upload
        if: success()
        run: |
          echo "::group::‚úîÔ∏è Verifying Upload"
          echo "Revision file contents:"
          cat artifacts/revision.txt
          echo "Proxy bundle exists: $(test -f artifacts/proxy-${{ steps.generate-version.outputs.version_id }}.zip && echo 'Yes' || echo 'No')"
          echo "‚úÖ Upload verification complete"
          echo "::endgroup::"

      - name: Save Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: proxy-artifacts-${{ steps.generate-version.outputs.version_id }}
          path: |
            artifacts/proxy-${{ steps.generate-version.outputs.version_id }}.zip
            artifacts/revision.txt
          retention-days: 1
