# File: .github/workflows/clean_old_versions.yml
name: Clean Old API Proxy Versions

on:
  workflow_call:
    inputs:
      proxy_name:
        description: The name of the API proxy to clean
        required: true
        type: string
      keep_count:
        description: Number of recent versions to keep
        required: false
        type: number
        default: 5
    secrets:
      APIGEE_ORG:
        required: true
      APIGEE_ORG_PROD:
        required: true
      WORKLOAD_IDENTITY_PROVIDER:
        required: true
      WORKLOAD_IDENTITY_PROVIDER_PROD:
        required: true
      SERVICE_ACCOUNT:
        required: true
      SERVICE_ACCOUNT_PROD:
        required: true
    outputs:
      nonprod_kept:
        description: "Number of versions kept in non-prod"
        value: ${{ jobs.cleanup.outputs.nonprod_kept }}
      nonprod_deleted:
        description: "Number of versions deleted in non-prod"
        value: ${{ jobs.cleanup.outputs.nonprod_deleted }}
      nonprod_failed:
        description: "Number of failed deletions in non-prod"
        value: ${{ jobs.cleanup.outputs.nonprod_failed }}
      prod_kept:
        description: "Number of versions kept in prod"
        value: ${{ jobs.cleanup.outputs.prod_kept }}
      prod_deleted:
        description: "Number of versions deleted in prod"
        value: ${{ jobs.cleanup.outputs.prod_deleted }}
      prod_failed:
        description: "Number of failed deletions in prod"
        value: ${{ jobs.cleanup.outputs.prod_failed }}

jobs:
  cleanup:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    outputs:
      nonprod_kept: ${{ steps.nonprod-cleanup.outputs.kept-count }}
      nonprod_deleted: ${{ steps.nonprod-cleanup.outputs.deleted-count }}
      nonprod_failed: ${{ steps.nonprod-cleanup.outputs.failed-count }}
      prod_kept: ${{ steps.prod-cleanup.outputs.kept-count }}
      prod_deleted: ${{ steps.prod-cleanup.outputs.deleted-count }}
      prod_failed: ${{ steps.prod-cleanup.outputs.failed-count }}

    steps:
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Non-Prod Auth
        id: nonprod-auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}

      - name: Cleanup Non-Prod Revisions
        id: nonprod-cleanup
        shell: bash {0}
        run: |
          set +e
          
          # Initialize counters and logging
          DELETED=0
          FAILED=0
          KEPT=0
          mkdir -p cleanup-logs
          LOG_FILE="cleanup-logs/nonprod-cleanup-$(date +%Y%m%d_%H%M%S).log"
          
          {
            echo "=== Non-Prod Cleanup Started at $(date) ==="
            echo "Proxy: ${{ inputs.proxy_name }}"
            echo "Keep Count: ${{ inputs.keep_count }}"
            
            # Get access token
            ACCESS_TOKEN=$(gcloud auth print-access-token)
            if [ -z "$ACCESS_TOKEN" ]; then
              echo "Failed to get access token"
              echo "kept-count=0" >> $GITHUB_OUTPUT
              echo "deleted-count=0" >> $GITHUB_OUTPUT
              echo "failed-count=0" >> $GITHUB_OUTPUT
              exit 1
            fi
            
            echo "Getting current revisions..."
            REVISIONS_JSON=$(curl -s -X GET -H "Authorization: Bearer $ACCESS_TOKEN" \
              "https://apigee.googleapis.com/v1/organizations/${{ secrets.APIGEE_ORG }}/apis/${{ inputs.proxy_name }}/revisions")
            
            # Get deployed revisions to protect them
            echo "Getting deployed revisions..."
            DEPLOYED_JSON=$(curl -s -X GET -H "Authorization: Bearer $ACCESS_TOKEN" \
              "https://apigee.googleapis.com/v1/organizations/${{ secrets.APIGEE_ORG }}/deployments")
            
            DEPLOYED_REVS=$(echo "$DEPLOYED_JSON" | jq -r --arg PROXY "${{ inputs.proxy_name }}" \
              '.deployments[] | select(.apiProxy==$PROXY) | .revision')
            
            echo "Currently deployed revisions: ${DEPLOYED_REVS:-None}"
            
            # Convert to array and sort
            readarray -t REVISIONS < <(echo "$REVISIONS_JSON" | jq -r '.[]' | sort -nr)
            TOTAL_REVISIONS=${#REVISIONS[@]}
            
            echo "Found $TOTAL_REVISIONS total revisions"
            
            # Initialize arrays for tracking
            declare -a REVISIONS_TO_KEEP
            declare -a REVISIONS_TO_DELETE
            
            # First, protect deployed revisions
            for REV in $DEPLOYED_REVS; do
              REVISIONS_TO_KEEP+=("$REV")
              ((KEPT++))
              echo "Protecting deployed revision: $REV"
            done
            
            # Then keep most recent revisions
            for REV in "${REVISIONS[@]}"; do
              if [ $KEPT -lt ${{ inputs.keep_count }} ]; then
                if [[ ! " ${REVISIONS_TO_KEEP[@]} " =~ " ${REV} " ]]; then
                  REVISIONS_TO_KEEP+=("$REV")
                  ((KEPT++))
                  echo "Keeping recent revision: $REV"
                fi
              else
                if [[ ! " ${REVISIONS_TO_KEEP[@]} " =~ " ${REV} " ]]; then
                  REVISIONS_TO_DELETE+=("$REV")
                fi
              fi
            done
            
            echo "Revisions to keep: ${REVISIONS_TO_KEEP[*]}"
            echo "Revisions to delete: ${REVISIONS_TO_DELETE[*]}"
            
            # Delete old revisions
            for REV in "${REVISIONS_TO_DELETE[@]}"; do
              echo "Attempting to delete revision $REV"
              
              STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE \
                -H "Authorization: Bearer $ACCESS_TOKEN" \
                "https://apigee.googleapis.com/v1/organizations/${{ secrets.APIGEE_ORG }}/apis/${{ inputs.proxy_name }}/revisions/$REV")
              
              if [ "$STATUS_CODE" = "200" ]; then
                ((DELETED++))
                echo "✅ Successfully deleted revision $REV"
              else
                ((FAILED++))
                echo "❌ Failed to delete revision $REV (Status: $STATUS_CODE)"
              fi
            done
            
            echo "=== Cleanup Summary ==="
            echo "Total revisions: $TOTAL_REVISIONS"
            echo "Kept: $KEPT"
            echo "Deleted: $DELETED"
            echo "Failed: $FAILED"
            
          } 2>&1 | tee -a "$LOG_FILE"
          
          # Set outputs
          echo "kept-count=$KEPT" >> $GITHUB_OUTPUT
          echo "deleted-count=$DELETED" >> $GITHUB_OUTPUT
          echo "failed-count=$FAILED" >> $GITHUB_OUTPUT

      - name: Prod Auth
        id: prod-auth
        if: success()
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_PROD }}
          service_account: ${{ secrets.SERVICE_ACCOUNT_PROD }}
        continue-on-error: true

      - name: Cleanup Prod Revisions
        id: prod-cleanup
        if: steps.prod-auth.outcome == 'success'
        shell: bash {0}
        run: |
          set +e
          
          # Initialize counters and logging
          DELETED=0
          FAILED=0
          KEPT=0
          LOG_FILE="cleanup-logs/prod-cleanup-$(date +%Y%m%d_%H%M%S).log"
          
          {
            echo "=== Production Cleanup Started at $(date) ==="
            echo "Proxy: ${{ inputs.proxy_name }}"
            echo "Keep Count: ${{ inputs.keep_count }}"
            
            # Get access token
            ACCESS_TOKEN=$(gcloud auth print-access-token)
            if [ -z "$ACCESS_TOKEN" ]; then
              echo "Failed to get access token"
              echo "kept-count=0" >> $GITHUB_OUTPUT
              echo "deleted-count=0" >> $GITHUB_OUTPUT
              echo "failed-count=0" >> $GITHUB_OUTPUT
              exit 1
            fi
            
            echo "Getting current revisions..."
            REVISIONS_JSON=$(curl -s -X GET -H "Authorization: Bearer $ACCESS_TOKEN" \
              "https://apigee.googleapis.com/v1/organizations/${{ secrets.APIGEE_ORG_PROD }}/apis/${{ inputs.proxy_name }}/revisions")
            
            # Get deployed revisions
            echo "Getting deployed revisions..."
            DEPLOYED_JSON=$(curl -s -X GET -H "Authorization: Bearer $ACCESS_TOKEN" \
              "https://apigee.googleapis.com/v1/organizations/${{ secrets.APIGEE_ORG_PROD }}/deployments")
            
            DEPLOYED_REVS=$(echo "$DEPLOYED_JSON" | jq -r --arg PROXY "${{ inputs.proxy_name }}" \
              '.deployments[] | select(.apiProxy==$PROXY) | .revision')
            
            echo "Currently deployed revisions: ${DEPLOYED_REVS:-None}"
            
            # Convert to array and sort
            readarray -t REVISIONS < <(echo "$REVISIONS_JSON" | jq -r '.[]' | sort -nr)
            TOTAL_REVISIONS=${#REVISIONS[@]}
            
            echo "Found $TOTAL_REVISIONS total revisions"
            
            # Initialize arrays for tracking
            declare -a REVISIONS_TO_KEEP
            declare -a REVISIONS_TO_DELETE
            
            # First, protect deployed revisions
            for REV in $DEPLOYED_REVS; do
              REVISIONS_TO_KEEP+=("$REV")
              ((KEPT++))
              echo "Protecting deployed revision: $REV"
            done
            
            # Then keep most recent revisions
            for REV in "${REVISIONS[@]}"; do
              if [ $KEPT -lt ${{ inputs.keep_count }} ]; then
                if [[ ! " ${REVISIONS_TO_KEEP[@]} " =~ " ${REV} " ]]; then
                  REVISIONS_TO_KEEP+=("$REV")
                  ((KEPT++))
                  echo "Keeping recent revision: $REV"
                fi
              else
                if [[ ! " ${REVISIONS_TO_KEEP[@]} " =~ " ${REV} " ]]; then
                  REVISIONS_TO_DELETE+=("$REV")
                fi
              fi
            done
            
            echo "Revisions to keep: ${REVISIONS_TO_KEEP[*]}"
            echo "Revisions to delete: ${REVISIONS_TO_DELETE[*]}"
            
            # Delete old revisions
            for REV in "${REVISIONS_TO_DELETE[@]}"; do
              echo "Attempting to delete revision $REV"
              
              STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE \
                -H "Authorization: Bearer $ACCESS_TOKEN" \
                "https://apigee.googleapis.com/v1/organizations/${{ secrets.APIGEE_ORG_PROD }}/apis/${{ inputs.proxy_name }}/revisions/$REV")
              
              if [ "$STATUS_CODE" = "200" ]; then
                ((DELETED++))
                echo "✅ Successfully deleted revision $REV"
              else
                ((FAILED++))
                echo "❌ Failed to delete revision $REV (Status: $STATUS_CODE)"
              fi
            done
            
            echo "=== Cleanup Summary ==="
            echo "Total revisions: $TOTAL_REVISIONS"
            echo "Kept: $KEPT"
            echo "Deleted: $DELETED"
            echo "Failed: $FAILED"
            
          } 2>&1 | tee -a "$LOG_FILE"
          
          # Set outputs
          echo "kept-count=$KEPT" >> $GITHUB_OUTPUT
          echo "deleted-count=$DELETED" >> $GITHUB_OUTPUT
          echo "failed-count=$FAILED" >> $GITHUB_OUTPUT

      - name: Upload Cleanup Logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: cleanup-logs
          path: cleanup-logs/
          retention-days: 7

      - name: Generate Cleanup Report
        if: always()
        run: |
          echo "# API Proxy Revision Cleanup Report" > cleanup-report.md
          echo "" >> cleanup-report.md
          echo "## Non-Prod Environment" >> cleanup-report.md
          echo "- Kept: ${{ steps.nonprod-cleanup.outputs.kept-count }} revisions" >> cleanup-report.md
          echo "- Deleted: ${{ steps.nonprod-cleanup.outputs.deleted-count }} revisions" >> cleanup-report.md
          echo "- Failed: ${{ steps.nonprod-cleanup.outputs.failed-count }} deletions" >> cleanup-report.md
          echo "" >> cleanup-report.md
          echo "## Production Environment" >> cleanup-report.md
          echo "- Kept: ${{ steps.prod-cleanup.outputs.kept-count }} revisions" >> cleanup-report.md
          echo "- Deleted: ${{ steps.prod-cleanup.outputs.deleted-count }} revisions" >> cleanup-report.md
          echo "- Failed: ${{ steps.prod-cleanup.outputs.failed-count }} deletions" >> cleanup-report.md
          
          cat cleanup-report.md >> $GITHUB_STEP_SUMMARY

      - name: Check Cleanup Status
        if: always()
        run: |
          TOTAL_FAILED=$((
            ${{ steps.nonprod-cleanup.outputs.failed-count }} + 
            ${{ steps.prod-cleanup.outputs.failed-count }}
          ))
          
          if [ $TOTAL_FAILED -gt 0 ]; then
            echo "::warning::Cleanup completed with $TOTAL_FAILED failed deletions"
          else
            echo "::notice::Cleanup completed successfully"
          fi
