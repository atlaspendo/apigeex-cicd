# File: .github/workflows/verify_nonprod_deployment.yml
name: Verify Non-Prod Deployment

on:
  workflow_call:
    inputs:
      proxy_name:
        description: The name of the API proxy to verify
        required: true
        type: string
      environment_group:
        description: The environment group where the proxy is deployed
        required: true
        type: string
      environment_type:
        description: The environment type where the proxy is deployed
        required: true
        type: string
      revision:
        description: The revision number to verify
        required: true
        type: string
      version_id:
        description: The version ID of the deployment
        required: true
        type: string
    secrets:
      APIGEE_ORG:
        required: true
      WORKLOAD_IDENTITY_PROVIDER:
        required: true
      SERVICE_ACCOUNT:
        required: true
    outputs:
      status:
        description: "Status of the verification"
        value: ${{ jobs.verify.outputs.status }}
      details:
        description: "Detailed verification results"
        value: ${{ jobs.verify.outputs.details }}

jobs:
  verify:
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.verification.outputs.status }}
      details: ${{ steps.verification.outputs.details }}
    
    steps:
      - name: Setup Authentication
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}
          token_format: 'access_token'
          create_credentials_file: true

      - name: Install apigeecli
        id: install-cli
        run: |
          echo "::group::üîß Installing Apigee CLI"
          mkdir -p $HOME/.apigeecli/bin
          curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
          echo "$HOME/.apigeecli/bin" >> $GITHUB_PATH
          echo "‚úÖ apigeecli installed successfully"
          echo "::endgroup::"

      - name: Verify Deployment Status
        id: deployment-check
        run: |
          echo "::group::üîç Verifying Deployment Status"
          
          # Determine environment name
          if [ "${{ inputs.environment_group }}" == "default" ]; then
            DEPLOY_ENV="${{ inputs.environment_type }}"
          else
            DEPLOY_ENV="${{ inputs.environment_group }}-${{ inputs.environment_type }}"
          fi
          
          echo "üìç Checking deployment in environment: $DEPLOY_ENV"
          
          # Get access token
          TOKEN=$(gcloud auth print-access-token)
          
          # Check deployment status
          DEPLOYMENT_STATUS=$($HOME/.apigeecli/bin/apigeecli apis get deployment \
            --name "${{ inputs.proxy_name }}" \
            --org "${{ secrets.APIGEE_ORG }}" \
            --env "$DEPLOY_ENV" \
            --token "$TOKEN" \
            --json | jq -r '.state')
          
          if [ "$DEPLOYMENT_STATUS" != "deployed" ]; then
            echo "‚ùå Deployment verification failed. Status: $DEPLOYMENT_STATUS"
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "details=Deployment not in 'deployed' state. Current state: $DEPLOYMENT_STATUS" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "‚úÖ Deployment status verified: $DEPLOYMENT_STATUS"
          echo "::endgroup::"

      - name: Verify Revision
        id: revision-check
        if: success()
        run: |
          echo "::group::üîç Verifying Deployed Revision"
          
          # Get access token
          TOKEN=$(gcloud auth print-access-token)
          
          # Determine environment name
          if [ "${{ inputs.environment_group }}" == "default" ]; then
            DEPLOY_ENV="${{ inputs.environment_type }}"
          else
            DEPLOY_ENV="${{ inputs.environment_group }}-${{ inputs.environment_type }}"
          fi
          
          # Check deployed revision
          DEPLOYED_REVISION=$($HOME/.apigeecli/bin/apigeecli apis get deployment \
            --name "${{ inputs.proxy_name }}" \
            --org "${{ secrets.APIGEE_ORG }}" \
            --env "$DEPLOY_ENV" \
            --token "$TOKEN" \
            --json | jq -r '.revision')
          
          if [ "$DEPLOYED_REVISION" != "${{ inputs.revision }}" ]; then
            echo "‚ùå Revision mismatch"
            echo "Expected: ${{ inputs.revision }}"
            echo "Found: $DEPLOYED_REVISION"
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "details=Deployed revision ($DEPLOYED_REVISION) does not match expected revision (${{ inputs.revision }})" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "‚úÖ Revision verified: $DEPLOYED_REVISION"
          echo "::endgroup::"

      - name: Verify Proxy Configuration
        id: config-check
        if: success()
        run: |
          echo "::group::üîç Verifying Proxy Configuration"
          
          # Get access token
          TOKEN=$(gcloud auth print-access-token)
          
          # Get proxy configuration
          PROXY_CONFIG=$($HOME/.apigeecli/bin/apigeecli apis get \
            --name "${{ inputs.proxy_name }}" \
            --org "${{ secrets.APIGEE_ORG }}" \
            --rev "${{ inputs.revision }}" \
            --token "$TOKEN" \
            --json)
          
          # Check essential configuration elements
          if [ -z "$PROXY_CONFIG" ]; then
            echo "‚ùå Failed to retrieve proxy configuration"
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "details=Unable to retrieve proxy configuration" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Additional configuration checks can be added here
          echo "‚úÖ Proxy configuration verified"
          echo "::endgroup::"

      - name: Check Proxy Health
        id: health-check
        if: success()
        run: |
          echo "::group::üè• Checking Proxy Health"
          
          # Get access token
          TOKEN=$(gcloud auth print-access-token)
          
          # Determine environment name
          if [ "${{ inputs.environment_group }}" == "default" ]; then
            DEPLOY_ENV="${{ inputs.environment_type }}"
          else
            DEPLOY_ENV="${{ inputs.environment_group }}-${{ inputs.environment_type }}"
          fi
          
          # Get deployment status details
          HEALTH_STATUS=$($HOME/.apigeecli/bin/apigeecli apis get deployment \
            --name "${{ inputs.proxy_name }}" \
            --org "${{ secrets.APIGEE_ORG }}" \
            --env "$DEPLOY_ENV" \
            --token "$TOKEN" \
            --json | jq -r '.state')
          
          if [ "$HEALTH_STATUS" == "deployed" ]; then
            echo "‚úÖ Proxy health check passed"
            echo "status=success" >> $GITHUB_OUTPUT
            echo "details=All verification checks passed successfully" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Proxy health check failed"
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "details=Proxy health check failed. Status: $HEALTH_STATUS" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "::endgroup::"

      - name: Generate Verification Report
        if: always()
        run: |
          echo "::group::üìù Generating Verification Report"
          mkdir -p verification-reports
          
          # Create verification report
          cat << EOF > verification-reports/verification-summary.md
          # Non-Prod Deployment Verification Report
          
          ## Overview
          - **Proxy Name**: ${{ inputs.proxy_name }}
          - **Environment**: ${{ inputs.environment_group }}-${{ inputs.environment_type }}
          - **Revision**: ${{ inputs.revision }}
          - **Version ID**: ${{ inputs.version_id }}
          - **Status**: ${{ steps.verification.outputs.status }}
          
          ## Verification Steps
          1. Deployment Status Check: ${{ steps.deployment-check.outcome == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}
          2. Revision Verification: ${{ steps.revision-check.outcome == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}
          3. Configuration Check: ${{ steps.config-check.outcome == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}
          4. Health Check: ${{ steps.health-check.outcome == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}
          
          ## Details
          ${{ steps.verification.outputs.details }}
          
          ## Timestamp
          Generated at: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          EOF
          
          echo "‚úÖ Verification report generated"
          echo "::endgroup::"

      - name: Upload Verification Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: verification-reports-${{ inputs.version_id }}
          path: verification-reports/
          retention-days: 7

      - name: Set Final Status
        id: verification
        if: always()
        run: |
          if [ "${{ steps.deployment-check.outcome }}" == "success" ] && \
             [ "${{ steps.revision-check.outcome }}" == "success" ] && \
             [ "${{ steps.config-check.outcome }}" == "success" ] && \
             [ "${{ steps.health-check.outcome }}" == "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "details=All verification checks passed successfully" >> $GITHUB_OUTPUT
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "details=One or more verification checks failed" >> $GITHUB_OUTPUT
            exit 1
          fi
