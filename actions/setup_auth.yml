# File: .github/workflows/setup_auth.yml
name: Setup Authentication

on:
  workflow_call:
    secrets:
      WORKLOAD_IDENTITY_PROVIDER:
        required: true
      WORKLOAD_IDENTITY_PROVIDER_PROD:
        required: true
      SERVICE_ACCOUNT:
        required: true
      SERVICE_ACCOUNT_PROD:
        required: true
    outputs:
      nonprod_token:
        description: "Non-prod authentication token"
        value: ${{ jobs.auth.outputs.nonprod_token }}
      prod_token:
        description: "Prod authentication token"
        value: ${{ jobs.auth.outputs.prod_token }}
      auth_status:
        description: "Authentication status"
        value: ${{ jobs.auth.outputs.status }}

jobs:
  auth:
    runs-on: ubuntu-latest
    outputs:
      nonprod_token: ${{ steps.nonprod_auth.outputs.access_token }}
      prod_token: ${{ steps.prod_auth.outputs.access_token }}
      status: ${{ steps.final_status.outputs.status }}

    steps:
      - name: Initialize Authentication
        id: init
        run: |
          echo "::group::üîê Initializing Authentication Process"
          echo "Starting authentication setup at $(date)"
          mkdir -p auth-logs
          echo "::endgroup::"

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: 'latest'
          install_components: 'beta'

      - name: Non-Prod Authentication
        id: nonprod_auth
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}
          token_format: 'access_token'
          create_credentials_file: true
          cleanup_credentials: true
          export_environment_variables: true

      - name: Verify Non-Prod Token
        id: verify_nonprod
        run: |
          echo "::group::üîç Verifying Non-Prod Authentication"
          
          # Get and validate non-prod token
          TOKEN="${{ steps.nonprod_auth.outputs.access_token }}"
          if [ -z "$TOKEN" ]; then
            echo "‚ùå Failed to obtain non-prod access token"
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Verify token format
          if [[ ! "$TOKEN" =~ ^ya29\..+ ]]; then
            echo "‚ùå Invalid non-prod token format"
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "‚úÖ Non-prod token verified successfully"
          echo "status=success" >> $GITHUB_OUTPUT
          echo "::endgroup::"

      - name: Prod Authentication
        id: prod_auth
        if: success()
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_PROD }}
          service_account: ${{ secrets.SERVICE_ACCOUNT_PROD }}
          token_format: 'access_token'
          create_credentials_file: true
          cleanup_credentials: true
          export_environment_variables: true

      - name: Verify Prod Token
        id: verify_prod
        if: success()
        run: |
          echo "::group::üîç Verifying Production Authentication"
          
          # Get and validate prod token
          TOKEN="${{ steps.prod_auth.outputs.access_token }}"
          if [ -z "$TOKEN" ]; then
            echo "‚ùå Failed to obtain production access token"
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Verify token format
          if [[ ! "$TOKEN" =~ ^ya29\..+ ]]; then
            echo "‚ùå Invalid production token format"
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "‚úÖ Production token verified successfully"
          echo "status=success" >> $GITHUB_OUTPUT
          echo "::endgroup::"

      - name: Test Non-Prod Token
        id: test_nonprod
        if: success()
        run: |
          echo "::group::üîÑ Testing Non-Prod Authentication"
          
          # Test token with a simple API call
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${{ steps.nonprod_auth.outputs.access_token }}" \
            "https://apigee.googleapis.com/v1/organizations")
          
          if [ "$RESPONSE" -eq 200 ]; then
            echo "‚úÖ Non-prod token test successful"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Non-prod token test failed with status $RESPONSE"
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "::endgroup::"

      - name: Test Prod Token
        id: test_prod
        if: success()
        run: |
          echo "::group::üîÑ Testing Production Authentication"
          
          # Test token with a simple API call
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${{ steps.prod_auth.outputs.access_token }}" \
            "https://apigee.googleapis.com/v1/organizations")
          
          if [ "$RESPONSE" -eq 200 ]; then
            echo "‚úÖ Production token test successful"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Production token test failed with status $RESPONSE"
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "::endgroup::"

      - name: Generate Auth Report
        if: always()
        run: |
          echo "::group::üìù Generating Authentication Report"
          
          # Create report directory if it doesn't exist
          mkdir -p auth-logs
          
          # Generate detailed report
          cat << EOF > auth-logs/auth-report.md
          # Authentication Setup Report
          
          ## Non-Prod Environment
          - **Status**: ${{ steps.verify_nonprod.outputs.status }}
          - **Token Test**: ${{ steps.test_nonprod.outputs.status }}
          
          ## Production Environment
          - **Status**: ${{ steps.verify_prod.outputs.status }}
          - **Token Test**: ${{ steps.test_prod.outputs.status }}
          
          ## Timestamp
          Generated at: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          EOF
          
          echo "‚úÖ Authentication report generated"
          echo "::endgroup::"

      - name: Upload Auth Logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: auth-logs
          path: auth-logs/
          retention-days: 7

      - name: Set Final Status
        id: final_status
        if: always()
        run: |
          if [ "${{ steps.verify_nonprod.outputs.status }}" == "success" ] && \
             [ "${{ steps.verify_prod.outputs.status }}" == "success" ] && \
             [ "${{ steps.test_nonprod.outputs.status }}" == "success" ] && \
             [ "${{ steps.test_prod.outputs.status }}" == "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failed" >> $GITHUB_OUTPUT
          fi

      - name: Auth Summary
        if: always()
        run: |
          if [ "${{ steps.final_status.outputs.status }}" == "success" ]; then
            echo "::notice title=‚úÖ Authentication Success::Authentication setup completed successfully for both environments"
          else
            echo "::error title=‚ùå Authentication Failed::One or more authentication steps failed"
            exit 1
          fi
