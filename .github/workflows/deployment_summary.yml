# File: .github/workflows/deployment_summary.yml
name: Deployment Summary

on:
  workflow_call:
    inputs:
      proxy_name:
        description: The name of the API proxy
        required: true
        type: string
      environment_group:
        description: The environment group
        required: true
        type: string
      environment_type:
        description: The environment type
        required: true
        type: string
      is_production:
        description: Whether this is a production deployment
        required: true
        type: boolean
      nonprod_status:
        description: Status of non-prod deployment
        required: true
        type: string
      nonprod_revision:
        description: Revision number from non-prod deployment
        required: true
        type: string
      prod_status:
        description: Status of production deployment
        required: false
        type: string
      prod_revision:
        description: Revision number from production deployment
        required: false
        type: string
      version_id:
        description: Version ID used for deployment
        required: true
        type: string
    outputs:
      summary_status:
        description: "Overall status of the deployment"
        value: ${{ jobs.create_summary.outputs.status }}

jobs:
  create_summary:
    runs-on: ubuntu-latest
    permissions:
      checks: write
      contents: read
      id-token: write
      deployments: write
      issues: write
    outputs:
      status: ${{ steps.final_status.outputs.status }}

    steps:
      - name: Initialize Summary
        id: init
        run: |
          echo "::group::üìä Initializing Deployment Summary"
          echo "Starting summary generation at $(date)"
          mkdir -p deployment-summary
          echo "::endgroup::"

      - name: Download Deployment Artifacts
        uses: actions/download-artifact@v3
        continue-on-error: true
        with:
          path: deployment-artifacts

      - name: Generate Detailed Logs
        run: |
          echo "::group::üìù Generating Deployment Logs"
          
          # Create logs directory and file
          mkdir -p deployment-summary
          LOG_FILE="deployment-summary/deployment_log_${{ inputs.proxy_name }}_$(date +%Y%m%d_%H%M%S).txt"
          
          {
            echo "============================================================"
            echo "                 APIGEE DEPLOYMENT LOGS                      "
            echo "============================================================"
            echo ""
            echo "Generated at: $(date '+%Y-%m-%d %H:%M:%S')"
            echo "Proxy Name: ${{ inputs.proxy_name }}"
            echo "Environment Group: ${{ inputs.environment_group }}"
            echo "Environment Type: ${{ inputs.environment_type }}"
            echo "Version ID: ${{ inputs.version_id }}"
            echo ""
            
            echo "============================================================"
            echo "                 NON-PROD DEPLOYMENT                         "
            echo "============================================================"
            echo "Status: ${{ inputs.nonprod_status }}"
            echo "Revision: ${{ inputs.nonprod_revision }}"
            echo "Environment: ${{ inputs.environment_group }}-${{ inputs.environment_type }}"
            echo ""
            
            if [[ "${{ inputs.is_production }}" == "true" ]]; then
              echo "============================================================"
              echo "                 PRODUCTION DEPLOYMENT                       "
              echo "============================================================"
              echo "Status: ${{ inputs.prod_status }}"
              echo "Revision: ${{ inputs.prod_revision }}"
              echo "Environment: Production"
            fi
            echo ""
            
            echo "============================================================"
            echo "                 DEPLOYMENT DETAILS                          "
            echo "============================================================"
            echo "Is Production: ${{ inputs.is_production }}"
            echo "Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            echo "Timestamp: $(date '+%Y-%m-%d %H:%M:%S')"
            
          } > "$LOG_FILE"
          
          echo "log_file=$LOG_FILE" >> $GITHUB_ENV
          echo "::endgroup::"

      - name: Generate Step Summary
        run: |
          {
            echo "# üöÄ Apigee Deployment Summary"
            echo ""
            echo "## üìä Deployment Status"
            echo "| Category | Details |"
            echo "|----------|---------|"
            echo "| Proxy Name | \`${{ inputs.proxy_name }}\` |"
            echo "| Environment | \`${{ inputs.environment_group }}-${{ inputs.environment_type }}\` |"
            echo "| Version ID | \`${{ inputs.version_id }}\` |"
            echo ""
            echo "## üìà Non-Production"
            echo "| Metric | Value |"
            echo "|--------|-------|"
            echo "| Status | ${{ inputs.nonprod_status == 'success' && '‚úÖ Success' || '‚ùå Failed' }} |"
            echo "| Revision | \`${{ inputs.nonprod_revision }}\` |"
            
            if [[ "${{ inputs.is_production }}" == "true" ]]; then
              echo ""
              echo "## üè≠ Production"
              echo "| Metric | Value |"
              echo "|--------|-------|"
              echo "| Status | ${{ inputs.prod_status == 'success' && '‚úÖ Success' || '‚ùå Failed' }} |"
              echo "| Revision | \`${{ inputs.prod_revision }}\` |"
            fi
            
            echo ""
            echo "## üîó Links"
            echo "- [Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
            echo ""
            echo "---"
            echo "_Generated at $(date -u +"%Y-%m-%d %H:%M:%S UTC")_"
            
          } >> $GITHUB_STEP_SUMMARY

      - name: Create Deployment Issue
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const logContent = fs.readFileSync(process.env.LOG_FILE, 'utf8');
            
            const summary = `# üöÄ Apigee Deployment Summary

            ## üìä Deployment Information
            | Category | Details |
            |----------|---------|
            | Proxy Name | \`${process.env.PROXY_NAME}\` |
            | Environment | \`${process.env.ENV_GROUP}-${process.env.ENV_TYPE}\` |
            | Version ID | \`${process.env.VERSION_ID}\` |
            | Non-Prod Status | ${process.env.NONPROD_STATUS === 'success' ? '‚úÖ Success' : '‚ùå Failed'} |
            | Non-Prod Revision | \`${process.env.NONPROD_REVISION}\` |
            ${process.env.IS_PRODUCTION === 'true' ? 
              `| Prod Status | ${process.env.PROD_STATUS === 'success' ? '‚úÖ Success' : '‚ùå Failed'} |
               | Prod Revision | \`${process.env.PROD_REVISION}\` |` : ''}

            ## üìù Detailed Logs
            <details>
            <summary>Click to expand deployment logs</summary>

            \`\`\`
            ${logContent}
            \`\`\`

            </details>

            ## üîó Links
            - [Workflow Run](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})

            ---
            ‚ö° *Generated at ${new Date().toISOString()}*`;

            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Deployment Summary: ${process.env.PROXY_NAME} (${new Date().toISOString().split('T')[0]})`,
              body: summary,
              labels: ['deployment', process.env.NONPROD_STATUS === 'success' ? 'success' : 'failed']
            });
            
            return issue.data.number;
        env:
          PROXY_NAME: ${{ inputs.proxy_name }}
          ENV_GROUP: ${{ inputs.environment_group }}
          ENV_TYPE: ${{ inputs.environment_type }}
          VERSION_ID: ${{ inputs.version_id }}
          NONPROD_STATUS: ${{ inputs.nonprod_status }}
          NONPROD_REVISION: ${{ inputs.nonprod_revision }}
          PROD_STATUS: ${{ inputs.prod_status }}
          PROD_REVISION: ${{ inputs.prod_revision }}
          IS_PRODUCTION: ${{ inputs.is_production }}

      - name: Upload Summary Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: deployment-summary-${{ inputs.version_id }}
          path: deployment-summary/
          retention-days: 30

      - name: Set Final Status
        id: final_status
        run: |
          if [[ "${{ inputs.nonprod_status }}" == "success" ]] && \
             ([[ "${{ inputs.is_production }}" != "true" ]] || [[ "${{ inputs.prod_status }}" == "success" ]]); then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "::notice title=‚úÖ Deployment Complete::Deployment completed successfully. Check the summary for details."
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "::error title=‚ùå Deployment Issues::Deployment completed with issues. Check the summary for details."
            exit 1
          fi

      - name: Create Deployment Badge
        if: always()
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: deployment-status-gist-id
          filename: deployment-status.json
          label: deployment
          message: ${{ steps.final_status.outputs.status }}
          color: ${{ steps.final_status.outputs.status == 'success' && 'success' || 'critical' }}
          namedLogo: apigee

      - name: Update Deployment Status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const environment = '${{ inputs.environment_type }}';
            const state = '${{ steps.final_status.outputs.status }}' === 'success' ? 'success' : 'failure';
            
            await github.rest.repos.createDeployment({
              owner,
              repo,
              ref: context.sha,
              environment,
              auto_merge: false,
              required_contexts: []
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner,
              repo,
              deployment_id: context.payload.deployment.id,
              state,
              environment,
              description: `Deployment ${state === 'success' ? 'successful' : 'failed'}`,
              log_url: `${context.serverUrl}/${owner}/${repo}/actions/runs/${context.runId}`
            });
