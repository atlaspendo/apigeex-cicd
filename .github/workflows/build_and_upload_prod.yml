# File: .github/workflows/build_and_upload_prod.yml
name: Build and Upload Production

on:
  workflow_call:
    inputs:
      proxy_name:
        description: The name of the API proxy
        required: true
        type: string
      version_id:
        description: Version ID from non-prod build
        required: true
        type: string
    secrets:
      APIGEE_ORG_PROD:
        required: true
      WORKLOAD_IDENTITY_PROVIDER_PROD:
        required: true
      SERVICE_ACCOUNT_PROD:
        required: true
    outputs:
      latest_revision:
        description: "The uploaded revision number"
        value: ${{ jobs.build_and_upload.outputs.revision }}
      upload_status:
        description: "Status of the upload process"
        value: ${{ jobs.build_and_upload.outputs.status }}

jobs:
  build_and_upload:
    runs-on: ubuntu-latest
    outputs:
      revision: ${{ steps.upload_and_sync.outputs.revision }}
      status: ${{ steps.final_status.outputs.status }}

    steps:
      - name: Set Version ID
        id: set-version
        run: |
          echo "::group::üè∑Ô∏è Setting Version Information"
          echo "VERSION_ID=${{ inputs.version_id }}" >> $GITHUB_ENV
          echo "‚úÖ Version ID set: ${{ inputs.version_id }}"
          echo "::endgroup::"

      - name: Download Non-Prod Artifacts
        id: download-artifacts
        uses: actions/download-artifact@v3
        with:
          name: proxy-artifacts-${{ inputs.version_id }}
          path: artifacts

      - name: Verify Downloaded Artifacts
        id: verify-artifacts
        run: |
          echo "::group::üì¶ Verifying Downloaded Artifacts"
          echo "Looking for artifacts with version ID: ${{ inputs.version_id }}"
          
          # List downloaded artifacts
          ls -la artifacts/ || echo "Artifacts directory is empty or doesn't exist"
          
          # Check for required files
          if [ ! -f "artifacts/revision.txt" ]; then
            echo "‚ùå Error: revision.txt not found"
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          if [ ! -f "artifacts/proxy-${{ inputs.version_id }}.zip" ]; then
            echo "‚ùå Error: proxy bundle not found"
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "üìù Source revision: $(cat artifacts/revision.txt)"
          echo "‚úÖ Artifacts verified successfully"
          echo "status=success" >> $GITHUB_OUTPUT
          echo "::endgroup::"

      - name: Install apigeecli
        id: install-apigeecli
        if: steps.verify-artifacts.outputs.status == 'success'
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: |
            echo "::group::üîß Installing Apigee CLI"
            mkdir -p $HOME/.apigeecli/bin
            curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
            echo "$HOME/.apigeecli/bin" >> $GITHUB_PATH
            echo "‚úÖ apigeecli installed successfully"
            echo "::endgroup::"

      - name: Setup Google Cloud Auth
        id: auth
        if: steps.verify-artifacts.outputs.status == 'success'
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_PROD }}
          service_account: ${{ secrets.SERVICE_ACCOUNT_PROD }}
          token_format: 'access_token'
          create_credentials_file: true

      - name: Upload and Sync Revision
        id: upload_and_sync
        if: steps.verify-artifacts.outputs.status == 'success'
        run: |
          echo "::group::üì§ Uploading to Production"
          SOURCE_REVISION=$(cat artifacts/revision.txt)
          echo "üìù Target revision: $SOURCE_REVISION"
          
          # Get access token
          TOKEN=$(gcloud auth print-access-token)
          
          # Verify bundle exists before attempting upload
          if [ ! -f "artifacts/proxy-${{ inputs.version_id }}.zip" ]; then
            echo "‚ùå Error: Bundle file not found at expected location"
            ls -la artifacts/
            exit 1
          fi
          
          echo "Beginning upload process..."
          
          # Function to handle upload with retry
          upload_with_retry() {
            local max_attempts=3
            local attempt=1
            local delay=5
            
            while [ $attempt -le $max_attempts ]; do
              echo "Upload attempt $attempt of $max_attempts..."
              
              IMPORT_OUTPUT=$($HOME/.apigeecli/bin/apigeecli apis create bundle \
                -n "${{ inputs.proxy_name }}" \
                -p "artifacts/proxy-${{ inputs.version_id }}.zip" \
                --org "${{ secrets.APIGEE_ORG_PROD }}" \
                --token "$TOKEN")
              
              if [ $? -eq 0 ]; then
                echo "‚úÖ Upload successful"
                echo "$IMPORT_OUTPUT"
                return 0
              fi
              
              echo "‚ö†Ô∏è Upload attempt failed"
              echo "$IMPORT_OUTPUT"
              
              ((attempt++))
              if [ $attempt -le $max_attempts ]; then
                echo "Waiting $delay seconds before retry..."
                sleep $delay
                ((delay*=2))
              fi
            done
            
            return 1
          }
          
          # Initial upload
          if ! upload_with_retry; then
            echo "‚ùå All upload attempts failed"
            exit 1
          fi
          
          CURRENT_REVISION=$(echo "$IMPORT_OUTPUT" | grep -oP '"revision":\s*"\K[^"]+')
          echo "Current revision in prod: $CURRENT_REVISION"
          
          # Continue uploading until we reach or exceed the target revision
          while [ "$CURRENT_REVISION" -lt "$SOURCE_REVISION" ]; do
            echo "Uploading to increment revision..."
            
            if ! upload_with_retry; then
              echo "‚ùå Revision sync failed"
              exit 1
            fi
            
            CURRENT_REVISION=$(echo "$IMPORT_OUTPUT" | grep -oP '"revision":\s*"\K[^"]+')
            echo "Updated revision: $CURRENT_REVISION"
          done
          
          echo "‚úÖ Successfully synced revision numbers"
          echo "üìù Final revision: $CURRENT_REVISION"
          echo "revision=$CURRENT_REVISION" >> $GITHUB_OUTPUT
          echo "::endgroup::"

      - name: Verify Upload
        id: verify-upload
        if: success()
        run: |
          echo "::group::‚úîÔ∏è Verifying Upload"
          
          # Get access token
          TOKEN=$(gcloud auth print-access-token)
          
          # Verify the uploaded revision
          VERIFY_OUTPUT=$($HOME/.apigeecli/bin/apigeecli apis get \
            --name "${{ inputs.proxy_name }}" \
            --org "${{ secrets.APIGEE_ORG_PROD }}" \
            --rev "${{ steps.upload_and_sync.outputs.revision }}" \
            --token "$TOKEN")
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Upload verification successful"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Upload verification failed"
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "::endgroup::"

      - name: Generate Upload Report
        if: always()
        run: |
          echo "::group::üìù Generating Upload Report"
          mkdir -p upload-reports
          
          # Create report file
          REPORT_FILE="upload-reports/prod_upload_report_$(date +%Y%m%d_%H%M%S).md"
          
          cat << EOF > "$REPORT_FILE"
          # Production Upload Report
          
          ## Upload Details
          - **API Proxy**: ${{ inputs.proxy_name }}
          - **Version ID**: ${{ inputs.version_id }}
          - **Target Revision**: $(cat artifacts/revision.txt)
          - **Final Revision**: ${{ steps.upload_and_sync.outputs.revision }}
          - **Status**: ${{ steps.verify-upload.outputs.status }}
          
          ## Process Timeline
          - **Started**: $(date -d @${{ github.event.repository.created_at }} '+%Y-%m-%d %H:%M:%S UTC')
          - **Completed**: $(date '+%Y-%m-%d %H:%M:%S UTC')
          
          ## Verification Results
          - Artifact Verification: ${{ steps.verify-artifacts.outputs.status }}
          - Upload Verification: ${{ steps.verify-upload.outputs.status }}
          
          ## Additional Information
          - Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          - Upload User: ${{ github.actor }}
          EOF
          
          echo "‚úÖ Upload report generated: $REPORT_FILE"
          echo "::endgroup::"

      - name: Upload Reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: prod-upload-reports-${{ inputs.version_id }}
          path: upload-reports/
          retention-days: 30

      - name: Set Final Status
        id: final_status
        if: always()
        run: |
          if [ "${{ steps.verify-artifacts.outputs.status }}" == "success" ] && \
             [ "${{ steps.verify-upload.outputs.status }}" == "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "::notice::Production upload completed successfully"
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "::error::Production upload failed"
            exit 1
          fi
