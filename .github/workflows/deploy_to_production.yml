# File: .github/workflows/deploy_to_production.yml
name: Deploy to Production

on:
  workflow_call:
    inputs:
      proxy_name:
        description: The name of the API proxy to deploy
        required: true
        type: string
      environment_group:
        description: The environment group to deploy to
        required: true
        type: string
      latest_revision:
        description: The revision number to deploy
        required: true
        type: string
      version_id:
        description: Version ID of the deployment
        required: true
        type: string
    secrets:
      APIGEE_ORG_PROD:
        required: true
      WORKLOAD_IDENTITY_PROVIDER_PROD:
        required: true
      SERVICE_ACCOUNT_PROD:
        required: true
    outputs:
      deployment_status:
        description: "Status of the production deployment"
        value: ${{ jobs.deploy.outputs.status }}
      deployed_revision:
        description: "The deployed revision number"
        value: ${{ jobs.deploy.outputs.revision }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    outputs:
      status: ${{ steps.deployment.outputs.status }}
      revision: ${{ inputs.latest_revision }}

    steps:
      - name: Initialize Production Deployment
        id: init
        run: |
          echo "::group::üöÄ Initializing Production Deployment"
          echo "Starting deployment process at $(date)"
          mkdir -p deployment-logs
          echo "::endgroup::"

      - name: Setup Google Cloud Auth
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_PROD }}
          service_account: ${{ secrets.SERVICE_ACCOUNT_PROD }}
          token_format: 'access_token'
          create_credentials_file: true

      - name: Install apigeecli
        id: install-cli
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: |
            echo "::group::üîß Installing Apigee CLI"
            mkdir -p $HOME/.apigeecli/bin
            curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
            echo "$HOME/.apigeecli/bin" >> $GITHUB_PATH
            echo "‚úÖ apigeecli installed successfully"
            echo "::endgroup::"

      - name: Verify Pre-Deployment State
        id: pre-verify
        run: |
          echo "::group::üîç Verifying Pre-Deployment State"
          
          # Get access token
          TOKEN=$(gcloud auth print-access-token)
          
          # Determine environment name
          if [ "${{ inputs.environment_group }}" == "default" ]; then
            DEPLOY_ENV="prod"
          else
            DEPLOY_ENV="${{ inputs.environment_group }}-prod"
          fi
          
          echo "üìç Target Environment: $DEPLOY_ENV"
          
          # Get current deployment state
          CURRENT_STATE=$($HOME/.apigeecli/bin/apigeecli apis get deployment \
            --name "${{ inputs.proxy_name }}" \
            --org "${{ secrets.APIGEE_ORG_PROD }}" \
            --env "$DEPLOY_ENV" \
            --token "$TOKEN" \
            --json || echo '{"state": "undeployed"}')
          
          CURRENT_REVISION=$(echo "$CURRENT_STATE" | jq -r '.revision // "none"')
          
          echo "Current deployment state:"
          echo "- Environment: $DEPLOY_ENV"
          echo "- Current Revision: $CURRENT_REVISION"
          
          echo "deployment_env=$DEPLOY_ENV" >> $GITHUB_OUTPUT
          echo "current_revision=$CURRENT_REVISION" >> $GITHUB_OUTPUT
          echo "::endgroup::"

      - name: Backup Current Deployment
        id: backup
        if: steps.pre-verify.outputs.current_revision != 'none'
        run: |
          echo "::group::üì¶ Backing Up Current Deployment"
          
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          BACKUP_DIR="deployment-logs/backup_${TIMESTAMP}"
          mkdir -p "$BACKUP_DIR"
          
          # Get access token
          TOKEN=$(gcloud auth print-access-token)
          
          # Export current deployment configuration
          $HOME/.apigeecli/bin/apigeecli apis get \
            --name "${{ inputs.proxy_name }}" \
            --org "${{ secrets.APIGEE_ORG_PROD }}" \
            --rev "${{ steps.pre-verify.outputs.current_revision }}" \
            --token "$TOKEN" \
            --json > "$BACKUP_DIR/deployment_config.json"
          
          echo "‚úÖ Backup completed: $BACKUP_DIR"
          echo "backup_dir=$BACKUP_DIR" >> $GITHUB_OUTPUT
          echo "::endgroup::"

      - name: Deploy to Production
        id: deployment
        run: |
          echo "::group::üöÄ Deploying to Production"
          
          # Get access token
          TOKEN=$(gcloud auth print-access-token)
          
          DEPLOY_ENV="${{ steps.pre-verify.outputs.deployment_env }}"
          REVISION="${{ inputs.latest_revision }}"
          
          echo "üìç Target Environment: $DEPLOY_ENV"
          echo "üì¶ Deploying revision: $REVISION"
          
          # Perform deployment
          DEPLOY_OUTPUT=$($HOME/.apigeecli/bin/apigeecli apis deploy \
            --name "${{ inputs.proxy_name }}" \
            --org "${{ secrets.APIGEE_ORG_PROD }}" \
            --env "$DEPLOY_ENV" \
            --rev "$REVISION" \
            --token "$TOKEN" \
            --ovr \
            --wait \
            --json)
          
          DEPLOY_STATUS=$?
          
          if [ $DEPLOY_STATUS -eq 0 ]; then
            echo "‚úÖ Deployment successful"
            echo "status=success" >> $GITHUB_OUTPUT
            echo "deployed_revision=$REVISION" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Deployment failed"
            echo "status=failed" >> $GITHUB_OUTPUT
            
            # Initiate rollback if backup exists
            if [ ! -z "${{ steps.backup.outputs.backup_dir }}" ]; then
              echo "üîÑ Initiating rollback..."
              
              $HOME/.apigeecli/bin/apigeecli apis deploy \
                --name "${{ inputs.proxy_name }}" \
                --org "${{ secrets.APIGEE_ORG_PROD }}" \
                --env "$DEPLOY_ENV" \
                --rev "${{ steps.pre-verify.outputs.current_revision }}" \
                --token "$TOKEN" \
                --ovr \
                --wait
                
              if [ $? -eq 0 ]; then
                echo "‚úÖ Rollback successful"
              else
                echo "‚ùå Rollback failed"
              fi
            fi
            
            exit 1
          fi
          echo "::endgroup::"

      - name: Verify Deployment
        id: verify
        if: steps.deployment.outputs.status == 'success'
        run: |
          echo "::group::‚úîÔ∏è Verifying Production Deployment"
          
          # Get access token
          TOKEN=$(gcloud auth print-access-token)
          
          DEPLOY_ENV="${{ steps.pre-verify.outputs.deployment_env }}"
          EXPECTED_REVISION="${{ steps.deployment.outputs.deployed_revision }}"
          
          # Verify deployment
          VERIFY_OUTPUT=$($HOME/.apigeecli/bin/apigeecli apis get deployment \
            --name "${{ inputs.proxy_name }}" \
            --org "${{ secrets.APIGEE_ORG_PROD }}" \
            --env "$DEPLOY_ENV" \
            --token "$TOKEN" \
            --json)
          
          CURRENT_REVISION=$(echo "$VERIFY_OUTPUT" | jq -r '.revision')
          DEPLOYMENT_STATE=$(echo "$VERIFY_OUTPUT" | jq -r '.state')
          
          if [ "$CURRENT_REVISION" == "$EXPECTED_REVISION" ] && [ "$DEPLOYMENT_STATE" == "deployed" ]; then
            echo "‚úÖ Deployment verification successful"
            echo "status=verified" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Deployment verification failed"
            echo "Expected revision: $EXPECTED_REVISION"
            echo "Current revision: $CURRENT_REVISION"
            echo "Deployment state: $DEPLOYMENT_STATE"
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "::endgroup::"

      - name: Generate Deployment Report
        if: always()
        run: |
          echo "::group::üìù Generating Deployment Report"
          
          REPORT_FILE="deployment-logs/production_deployment_report_$(date +%Y%m%d_%H%M%S).md"
          
          cat << EOF > "$REPORT_FILE"
          # Production Deployment Report
          
          ## Deployment Details
          - **API Proxy**: ${{ inputs.proxy_name }}
          - **Environment**: ${{ steps.pre-verify.outputs.deployment_env }}
          - **Version ID**: ${{ inputs.version_id }}
          - **Revision**: ${{ inputs.latest_revision }}
          - **Status**: ${{ steps.deployment.outputs.status }}
          
          ## Deployment Timeline
          - **Started**: $(date -d @${{ github.event.repository.created_at }} '+%Y-%m-%d %H:%M:%S UTC')
          - **Completed**: $(date '+%Y-%m-%d %H:%M:%S UTC')
          
          ## Pre-Deployment State
          - Previous Revision: ${{ steps.pre-verify.outputs.current_revision }}
          - Backup Location: ${steps.backup.outputs.backup_dir:-None}
          
          ## Verification Results
          - Final Status: ${{ steps.verify.outputs.status || steps.deployment.outputs.status }}
          - Deployed Revision: ${{ steps.deployment.outputs.deployed_revision }}
          
          ## Additional Information
          - Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          - Deployment User: ${{ github.actor }}
          EOF
          
          echo "‚úÖ Deployment report generated: $REPORT_FILE"
          echo "::endgroup::"

      - name: Upload Deployment Artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: production-deployment-${{ inputs.version_id }}
          path: |
            deployment-logs/
          retention-days: 30

      - name: Set Final Status
        id: final_status
        if: always()
        run: |
          if [ "${{ steps.deployment.outputs.status }}" == "success" ] && \
             [ "${{ steps.verify.outputs.status }}" == "verified" ]; then
            echo "::notice::Production deployment completed successfully"
          else
            echo "::error::Production deployment failed or verification failed"
            exit 1
          fi
