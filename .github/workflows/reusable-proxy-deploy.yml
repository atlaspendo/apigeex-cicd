# File: .github/workflows/reusable-proxy-deploy.yml
name: Reusable Apigee Proxy Deployment

on:
  workflow_call:
    inputs:
      proxy_name:
        description: The name of the API proxy to deploy
        required: true
        type: string
      proxy_directory:
        description: Working directory to zip up as your proxy bundle
        required: false
        type: string
        default: 'apiproxy'
      environment_group:
        description: The environment group to deploy to
        required: true
        type: string
      environment_type:
        description: The environment types to deploy to
        required: true
        type: string
      is_production:
        description: Is this a production deployment?
        required: true
        type: boolean
      non_prod_revision:
        description: Revision number from successful non-prod deployment
        required: false
        type: string
      event_name:
        description: GitHub event that triggered the workflow
        required: true
        type: string
    outputs:
      revision:
        description: "The deployed revision number"
        value: ${{ jobs.Build_And_Upload_NonProd.outputs.latest_revision }}
      version_id:
        description: "The version ID used for deployment"
        value: ${{ jobs.Build_And_Upload_NonProd.outputs.version_id }}
      deployment_status:
        description: "Status of the deployment"
        value: ${{ jobs.validate_deployment_inputs.outputs.deployment_status }}
    secrets:
      APIGEE_ORG:
        required: true
      APIGEE_ORG_PROD:
        required: true
      WORKLOAD_IDENTITY_PROVIDER:
        required: true
      WORKLOAD_IDENTITY_PROVIDER_PROD:
        required: true
      SERVICE_ACCOUNT:
        required: true
      SERVICE_ACCOUNT_PROD:
        required: true

jobs:
  validate_deployment_inputs:
    uses: atlaspendo/apigeex-cicd/.github/workflows/actions/apigeex-build/validate_inputs.yml@main
    with:
      environment_group: ${{ inputs.environment_group }}
      environment_type: ${{ inputs.environment_type }}
      is_production: ${{ inputs.is_production }}
      non_prod_revision: ${{ inputs.non_prod_revision }}

  Setup_Auth:
    needs: validate_deployment_inputs
    if: needs.validate_deployment_inputs.outputs.can_proceed == 'true'
    uses: atlaspendo/apigeex-cicd/.github/workflows/actions/apigeex-build/setup_auth.yml@main
    secrets: inherit

  Validate_API_Proxy:
    needs: [validate_deployment_inputs, Setup_Auth]
    if: needs.validate_deployment_inputs.outputs.can_proceed == 'true'
    uses: atlaspendo/apigeex-cicd/.github/workflows/actions/apigeex-build/validate_api_proxy.yml@main
    with:
      proxy_directory: ${{ inputs.proxy_directory }}

  Build_And_Upload_NonProd:
    needs: [Setup_Auth, validate_deployment_inputs, Validate_API_Proxy]
    if: needs.validate_deployment_inputs.outputs.can_proceed == 'true'
    uses: atlaspendo/apigeex-cicd/.github/workflows/actions/apigeex-build/build_and_upload_nonprod.yml@main
    with:
      proxy_name: ${{ inputs.proxy_name }}
      proxy_directory: ${{ inputs.proxy_directory }}
      is_production: ${{ inputs.is_production }}
    secrets:
      APIGEE_ORG: ${{ secrets.APIGEE_ORG }}
      WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
      SERVICE_ACCOUNT: ${{ secrets.SERVICE_ACCOUNT }}

  Deploy_To_NonProd:
    needs: [Build_And_Upload_NonProd, validate_deployment_inputs]
    if: needs.validate_deployment_inputs.outputs.can_proceed == 'true'
    uses: atlaspendo/apigeex-cicd/.github/workflows/actions/apigeex-build/deploy_to_nonprod.yml@main
    with:
      proxy_name: ${{ inputs.proxy_name }}
      environment_group: ${{ inputs.environment_group }}
      environment_type: ${{ inputs.environment_type }}
      latest_revision: ${{ needs.Build_And_Upload_NonProd.outputs.latest_revision }}
    secrets:
      APIGEE_ORG: ${{ secrets.APIGEE_ORG }}
      WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
      SERVICE_ACCOUNT: ${{ secrets.SERVICE_ACCOUNT }}

  Request_Production_Approval:
    needs: [Build_And_Upload_NonProd]
    if: needs.Build_And_Upload_NonProd.result == 'success'
    uses: atlaspendo/apigeex-cicd/.github/workflows/actions/apigeex-build/request_production_approval.yml@main
    with:
      proxy_name: ${{ inputs.proxy_name }}
      version_id: ${{ needs.Build_And_Upload_NonProd.outputs.version_id }}
      revision: ${{ needs.Build_And_Upload_NonProd.outputs.latest_revision }}

  Build_And_Upload_Prod:
    needs: [Request_Production_Approval]
    if: needs.Request_Production_Approval.result == 'success'
    uses: atlaspendo/apigeex-cicd/.github/workflows/actions/apigeex-build/build_and_upload_prod.yml@main
    with:
      proxy_name: ${{ inputs.proxy_name }}
      version_id: ${{ needs.Build_And_Upload_NonProd.outputs.version_id }}
    secrets:
      APIGEE_ORG_PROD: ${{ secrets.APIGEE_ORG_PROD }}
      WORKLOAD_IDENTITY_PROVIDER_PROD: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_PROD }}
      SERVICE_ACCOUNT_PROD: ${{ secrets.SERVICE_ACCOUNT_PROD }}

  Deploy_To_Production:
    needs: [Build_And_Upload_Prod]
    if: needs.Build_And_Upload_Prod.result == 'success'
    uses: atlaspendo/apigeex-cicd/.github/workflows/actions/apigeex-build/deploy_to_production.yml@main
    with:
      proxy_name: ${{ inputs.proxy_name }}
      environment_group: ${{ inputs.environment_group }}
      latest_revision: ${{ needs.Build_And_Upload_Prod.outputs.latest_revision }}
    secrets:
      APIGEE_ORG_PROD: ${{ secrets.APIGEE_ORG_PROD }}
      WORKLOAD_IDENTITY_PROVIDER_PROD: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_PROD }}
      SERVICE_ACCOUNT_PROD: ${{ secrets.SERVICE_ACCOUNT_PROD }}

  Clean_Old_Versions:
    needs: [Build_And_Upload_NonProd, Build_And_Upload_Prod, Deploy_To_NonProd, Deploy_To_Production]
    if: always()
    uses: atlaspendo/apigeex-cicd/.github/workflows/actions/apigeex-build/clean_old_versions.yml@main
    with:
      proxy_name: ${{ inputs.proxy_name }}
    secrets:
      APIGEE_ORG: ${{ secrets.APIGEE_ORG }}
      APIGEE_ORG_PROD: ${{ secrets.APIGEE_ORG_PROD }}
      WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
      WORKLOAD_IDENTITY_PROVIDER_PROD: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_PROD }}
      SERVICE_ACCOUNT: ${{ secrets.SERVICE_ACCOUNT }}
      SERVICE_ACCOUNT_PROD: ${{ secrets.SERVICE_ACCOUNT_PROD }}

  Deployment_Summary:
    needs: [validate_deployment_inputs, Build_And_Upload_NonProd, Deploy_To_NonProd, Build_And_Upload_Prod, Deploy_To_Production, Clean_Old_Versions]
    if: always()
    uses: atlaspendo/apigeex-cicd/.github/workflows/actions/apigeex-build/deployment_summary.yml@main
    with:
      proxy_name: ${{ inputs.proxy_name }}
      environment_group: ${{ inputs.environment_group }}
      environment_type: ${{ inputs.environment_type }}
      is_production: ${{ inputs.is_production }}
      nonprod_status: ${{ needs.Deploy_To_NonProd.result }}
      nonprod_revision: ${{ needs.Build_And_Upload_NonProd.outputs.latest_revision }}
      prod_status: ${{ needs.Deploy_To_Production.result }}
      prod_revision: ${{ needs.Build_And_Upload_Prod.outputs.latest_revision }}
      version_id: ${{ needs.Build_And_Upload_NonProd.outputs.version_id }}
