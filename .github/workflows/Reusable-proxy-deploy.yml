name: Apigee Proxy Deployment [Reusable Workflow]

on:
  workflow_call:
    inputs:
      proxy_name:
        description: The name of the API proxy to deploy
        required: true
        type: string
      proxy_directory:
        description: Working directory to zip up as your proxy bundle
        required: false
        type: string
        default: 'apiproxy'
      environment_group:
        description: The environment group to deploy to
        required: true
        type: string
      environment_type:
        description: The environment types to deploy to
        required: true
        type: string
      runner:
        description: The runner to use for the job
        required: false
        default: 'ubuntu-latest'
        type: string
    secrets:
      apigee_org:
        required: true
      workload_identity_provider:
        required: true
      service_account:
        required: true

permissions:
  contents: read
  id-token: write

jobs:
  Prepare_Environment_List:
    runs-on: ${{ inputs.runner }}
    outputs:
      environments: ${{ steps.set-envs.outputs.environments }}
    steps:
      - name: Set Environment List
        id: set-envs
        run: |
          GROUP="${{ inputs.environment_group }}"
          TYPES="${{ inputs.environment_type }}"
          
          generate_env_list() {
            local group=$1
            local types=$2
            local envs="["
            
            IFS=',' read -ra ENV_TYPES <<< "$types"
            local first=true
            
            for type in "${ENV_TYPES[@]}"; do
              if [ "$first" = true ]; then
                first=false
              else
                envs="${envs},"
              fi
              
              if [ "$group" = "default" ]; then
                envs="${envs}\"${type}\""
              else
                envs="${envs}\"${group}-${type}\""
              fi
            done
            
            envs="${envs}]"
            echo "$envs"
          }
          
          ENVIRONMENTS=$(generate_env_list "$GROUP" "$TYPES")
          echo "environments=$ENVIRONMENTS" >> $GITHUB_OUTPUT

  GCP_Auth:
    needs: [Prepare_Environment_List]
    runs-on: ${{ inputs.runner }}
    outputs:
      access_token: ${{ steps.auth.outputs.access_token }}
    steps:
      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.workload_identity_provider }}
          service_account: ${{ secrets.service_account }}
          token_format: 'access_token'

  ApigeeLint:
    needs: [GCP_Auth]
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install apigeelint
        run: npm install -g apigeelint

      - name: Run apigeelint
        run: apigeelint -s ${{ inputs.proxy_directory }} -f table.js

  Prepare_and_Upload:
    needs: [GCP_Auth, ApigeeLint]
    runs-on: ${{ inputs.runner }}
    outputs:
      latest_revision: ${{ steps.upload.outputs.revision }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.workload_identity_provider }}
          service_account: ${{ secrets.service_account }}
          token_format: 'access_token'

      - name: Install apigeecli
        run: |
          mkdir -p $HOME/.apigeecli/bin
          curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
          echo "$HOME/.apigeecli/bin" >> $GITHUB_PATH
          $HOME/.apigeecli/bin/apigeecli --help

      - name: Create API bundle
        id: create-bundle
        working-directory: ${{ github.workspace }}
        run: |
          create_bundle() {
            local source_dir="$1"
            echo "Creating bundle from: $source_dir"
            mkdir -p temp_bundle
            cp -r "$source_dir" temp_bundle/apiproxy
            cd temp_bundle
            zip -r ../proxy.zip apiproxy
            cd ..
            echo "Zip contents:"
            unzip -l proxy.zip
            rm -rf temp_bundle
          }
          
          if [ -d "${{ inputs.proxy_directory }}" ]; then
            create_bundle "${{ inputs.proxy_directory }}"
          elif [ -d "src/${{ inputs.proxy_directory }}" ]; then
            create_bundle "src/${{ inputs.proxy_directory }}"
          else
            echo "Error: Could not find apiproxy directory"
            exit 1
          fi

      - name: Upload and Get Revision
        id: upload
        env:
          APIGEE_ORG: ${{ secrets.apigee_org }}
          PROXY_NAME: ${{ inputs.proxy_name }}
          ACCESS_TOKEN: ${{ steps.auth.outputs.access_token }}
        run: |
          echo "Importing API proxy bundle to Apigee organization"
          IMPORT_OUTPUT=$($HOME/.apigeecli/bin/apigeecli apis create bundle -n "$PROXY_NAME" -p proxy.zip \
            --org "$APIGEE_ORG" \
            --token "$ACCESS_TOKEN")
          
          echo "$IMPORT_OUTPUT"
          
          LATEST_REVISION=$(echo "$IMPORT_OUTPUT" | grep -oP '"revision": "\K[^"]+')
          
          if [ -z "$LATEST_REVISION" ]; then
            echo "Failed to get revision number"
            exit 1
          fi
          
          echo "Latest revision: $LATEST_REVISION"
          echo "revision=$LATEST_REVISION" >> $GITHUB_OUTPUT

  Deploy_to_Environment:
    needs: [Prepare_Environment_List, GCP_Auth, Prepare_and_Upload]
    strategy:
      matrix:
        environment: ${{ fromJSON(needs.Prepare_Environment_List.outputs.environments) }}
      fail-fast: false
      max-parallel: 1
    runs-on: ${{ inputs.runner }}
    environment: ${{ matrix.environment }}
    steps:
      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.workload_identity_provider }}
          service_account: ${{ secrets.service_account }}
          token_format: 'access_token'

      - name: Install apigeecli
        run: |
          mkdir -p $HOME/.apigeecli/bin
          curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
          echo "$HOME/.apigeecli/bin" >> $GITHUB_PATH

      - name: Deploy to Environment
        env:
          APIGEE_ORG: ${{ secrets.apigee_org }}
          APIGEE_ENV: ${{ matrix.environment }}
          PROXY_NAME: ${{ inputs.proxy_name }}
          ACCESS_TOKEN: ${{ steps.auth.outputs.access_token }}
          LATEST_REVISION: ${{ needs.Prepare_and_Upload.outputs.latest_revision }}
        run: |
          if [ -z "$LATEST_REVISION" ]; then
            echo "Error: LATEST_REVISION is empty. Deployment cannot proceed."
            exit 1
          fi
          
          echo "Deploying proxy '$PROXY_NAME' revision '$LATEST_REVISION' to environment '$APIGEE_ENV'"
          
          $HOME/.apigeecli/bin/apigeecli apis deploy \
            --name "$PROXY_NAME" \
            --org "$APIGEE_ORG" \
            --env "$APIGEE_ENV" \
            --rev "$LATEST_REVISION" \
            --token "$ACCESS_TOKEN" \
            --ovr \
            --wait

  Cleanup_Old_Revisions:
    needs: [Deploy_to_Environment]
    if: always()
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.workload_identity_provider }}
          service_account: ${{ secrets.service_account }}
          token_format: 'access_token'

      - name: Delete Older Revisions
        env:
          APIGEE_ORG: ${{ secrets.apigee_org }}
          APIGEE_PROXY_NAME: ${{ inputs.proxy_name }}
          ACCESS_TOKEN: ${{ steps.auth.outputs.access_token }}
        run: |
          REVISIONS=$(curl -s -H "Authorization: Bearer $ACCESS_TOKEN" \
            "https://apigee.googleapis.com/v1/organizations/$APIGEE_ORG/apis/$APIGEE_PROXY_NAME/revisions")
          
          readarray -t REVISIONS < <(echo "$REVISIONS" | jq -r '.[]' | sort -n)
          TOTAL_REVISIONS=${#REVISIONS[@]}
          KEEP_COUNT=5
          
          if [ "$TOTAL_REVISIONS" -gt "$KEEP_COUNT" ]; then
            DELETE_COUNT=$((TOTAL_REVISIONS - KEEP_COUNT))
            for ((i=0; i<DELETE_COUNT; i++)); do
              REV="${REVISIONS[$i]}"
              curl -X DELETE -H "Authorization: Bearer $ACCESS_TOKEN" \
                "https://apigee.googleapis.com/v1/organizations/$APIGEE_ORG/apis/$APIGEE_PROXY_NAME/revisions/$REV"
            done
          fi


  Deployment_Summary:
    needs: [ApigeeLint, Prepare_and_Upload, Deploy_to_Environment, Prepare_Environment_List, Cleanup_Old_Revisions, GCP_Auth]
    if: always()
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Generate Enhanced Summary
        run: |
          TIMESTAMP=$(date '+%d/%m/%Y, %H:%M:%S')
          
          cat << EOF >> $GITHUB_STEP_SUMMARY
          <div align="center">
          
          # 🎯 Apigee Proxy Deployment Dashboard
          <sub>Deployment Time: $TIMESTAMP</sub>
          
          </div>

          ## 📊 Stage Details
          <div style="display: flex; justify-content: center; gap: 10px; margin: 20px 0;">
            <div style="background-color: #f6f8fa; padding: 15px; border-radius: 8px; text-align: center; min-width: 150px;">
              <div style="font-size: 12px; color: #6a737d;">PROXY NAME</div>
              <div style="font-size: 16px; color: #0366d6; margin-top: 5px; font-weight: bold;">${{ inputs.proxy_name }}</div>
            </div>
            <div style="background-color: #f6f8fa; padding: 15px; border-radius: 8px; text-align: center; min-width: 150px;">
              <div style="font-size: 12px; color: #6a737d;">REVISION</div>
              <div style="font-size: 16px; color: #28a745; margin-top: 5px; font-weight: bold;">${{ needs.Prepare_and_Upload.outputs.latest_revision }}</div>
            </div>
            <div style="background-color: #f6f8fa; padding: 15px; border-radius: 8px; text-align: center; min-width: 150px;">
              <div style="font-size: 12px; color: #6a737d;">GROUP</div>
              <div style="font-size: 16px; color: #6f42c1; margin-top: 5px; font-weight: bold;">${{ inputs.environment_group }}</div>
            </div>
          </div>

          ## 🎯 Deployment Progress
          \`\`\`mermaid
          stateDiagram-v2
              direction LR
              classDef success fill:#28a745,color:#fff,stroke:none
              classDef failure fill:#cb2431,color:#fff,stroke:none
              classDef neutral fill:#6a737d,color:#fff,stroke:none

              Auth: Authentication
              Lint: Code Quality
              Up: Bundle Upload
              Deploy: Deployment
              
              Auth --> Lint
              Lint --> Up
              Up --> Deploy
              
              $([ "${{ needs.GCP_Auth.result }}" == "success" ] && echo "class Auth success" || echo "class Auth failure")
              $([ "${{ needs.ApigeeLint.result }}" == "success" ] && echo "class Lint success" || echo "class Lint failure")
              $([ "${{ needs.Prepare_and_Upload.result }}" == "success" ] && echo "class Up success" || echo "class Up failure")
              $([ "${{ needs.Deploy_to_Environment.result }}" == "success" ] && echo "class Deploy success" || echo "class Deploy failure")
          \`\`\`

          ## 🌐 Environment Status

          <div style="display: flex; flex-wrap: wrap; justify-content: center; gap: 15px; margin: 20px 0;">
          $(for env in $(echo ${{ inputs.environment_type }} | tr ',' ' '); do
            if [ "${{ inputs.environment_group }}" == "default" ]; then
              ENV_NAME="${env}"
            else
              ENV_NAME="${{ inputs.environment_group }}-${env}"
            fi
            if [ "${{ needs.Deploy_to_Environment.result }}" == "success" ]; then
              echo "<div style=\"background-color: #f0fff4; border: 1px solid #28a745; padding: 15px; border-radius: 8px; min-width: 200px; text-align: center;\">"
              echo "<div style=\"font-size: 14px; color: #22863a; margin-bottom: 8px;\">${ENV_NAME}</div>"
              echo "<div style=\"display: flex; justify-content: center; align-items: center; gap: 8px;\">"
              echo "<span style=\"font-size: 12px; color: #28a745;\">✓ ACTIVE</span>"
              echo "<span style=\"width: 8px; height: 8px; background-color: #28a745; border-radius: 50%;\"></span>"
              echo "</div>"
              echo "</div>"
            else
              echo "<div style=\"background-color: #fff5f5; border: 1px solid #cb2431; padding: 15px; border-radius: 8px; min-width: 200px; text-align: center;\">"
              echo "<div style=\"font-size: 14px; color: #cb2431; margin-bottom: 8px;\">${ENV_NAME}</div>"
              echo "<div style=\"display: flex; justify-content: center; align-items: center; gap: 8px;\">"
              echo "<span style=\"font-size: 12px; color: #cb2431;\">⨯ FAILED</span>"
              echo "<span style=\"width: 8px; height: 8px; background-color: #cb2431; border-radius: 50%;\"></span>"
              echo "</div>"
              echo "</div>"
            fi
          done)
          </div>

          ## 📊 Pipeline Results

          <div style="display: flex; flex-wrap: wrap; justify-content: center; gap: 15px; margin: 20px 0;">
            <!-- Authentication -->
            <div style="background-color: #f6f8fa; padding: 15px; border-radius: 8px; min-width: 200px;">
              <div style="font-size: 12px; color: #6a737d; margin-bottom: 8px;">🔐 AUTHENTICATION</div>
              $(if [ "${{ needs.GCP_Auth.result }}" == "success" ]; then
                echo "<div style=\"display: flex; align-items: center; gap: 5px;\">"
                echo "<span style=\"width: 6px; height: 6px; background-color: #28a745; border-radius: 50%;\"></span>"
                echo "<span style=\"font-size: 14px; color: #28a745;\">Successful</span>"
                echo "</div>"
                echo "<div style=\"font-size: 11px; color: #6a737d; margin-top: 5px;\">Workload Identity</div>"
              else
                echo "<div style=\"display: flex; align-items: center; gap: 5px;\">"
                echo "<span style=\"width: 6px; height: 6px; background-color: #cb2431; border-radius: 50%;\"></span>"
                echo "<span style=\"font-size: 14px; color: #cb2431;\">Failed</span>"
                echo "</div>"
                echo "<div style=\"font-size: 11px; color: #6a737d; margin-top: 5px;\">Auth Error</div>"
              fi)
            </div>

            <!-- Linting -->
            <div style="background-color: #f6f8fa; padding: 15px; border-radius: 8px; min-width: 200px;">
              <div style="font-size: 12px; color: #6a737d; margin-bottom: 8px;">🔍 CODE QUALITY</div>
              $(if [ "${{ needs.ApigeeLint.result }}" == "success" ]; then
                echo "<div style=\"display: flex; align-items: center; gap: 5px;\">"
                echo "<span style=\"width: 6px; height: 6px; background-color: #28a745; border-radius: 50%;\"></span>"
                echo "<span style=\"font-size: 14px; color: #28a745;\">Passed</span>"
                echo "</div>"
                echo "<div style=\"font-size: 11px; color: #6a737d; margin-top: 5px;\">API Validation</div>"
              else
                echo "<div style=\"display: flex; align-items: center; gap: 5px;\">"
                echo "<span style=\"width: 6px; height: 6px; background-color: #cb2431; border-radius: 50%;\"></span>"
                echo "<span style=\"font-size: 14px; color: #cb2431;\">Failed</span>"
                echo "</div>"
                echo "<div style=\"font-size: 11px; color: #6a737d; margin-top: 5px;\">Quality Issues</div>"
              fi)
            </div>

            <!-- Upload -->
            <div style="background-color: #f6f8fa; padding: 15px; border-radius: 8px; min-width: 200px;">
              <div style="font-size: 12px; color: #6a737d; margin-bottom: 8px;">📦 BUNDLE</div>
              $(if [ "${{ needs.Prepare_and_Upload.result }}" == "success" ]; then
                echo "<div style=\"display: flex; align-items: center; gap: 5px;\">"
                echo "<span style=\"width: 6px; height: 6px; background-color: #28a745; border-radius: 50%;\"></span>"
                echo "<span style=\"font-size: 14px; color: #28a745;\">Uploaded</span>"
                echo "</div>"
                echo "<div style=\"font-size: 11px; color: #6a737d; margin-top: 5px;\">Rev: ${{ needs.Prepare_and_Upload.outputs.latest_revision }}</div>"
              else
                echo "<div style=\"display: flex; align-items: center; gap: 5px;\">"
                echo "<span style=\"width: 6px; height: 6px; background-color: #cb2431; border-radius: 50%;\"></span>"
                echo "<span style=\"font-size: 14px; color: #cb2431;\">Failed</span>"
                echo "</div>"
                echo "<div style=\"font-size: 11px; color: #6a737d; margin-top: 5px;\">Upload Error</div>"
              fi)
            </div>

            <!-- Deployment -->
            <div style="background-color: #f6f8fa; padding: 15px; border-radius: 8px; min-width: 200px;">
              <div style="font-size: 12px; color: #6a737d; margin-bottom: 8px;">🚀 DEPLOYMENT</div>
              $(if [ "${{ needs.Deploy_to_Environment.result }}" == "success" ]; then
                echo "<div style=\"display: flex; align-items: center; gap: 5px;\">"
                echo "<span style=\"width: 6px; height: 6px; background-color: #28a745; border-radius: 50%;\"></span>"
                echo "<span style=\"font-size: 14px; color: #28a745;\">Deployed</span>"
                echo "</div>"
                echo "<div style=\"font-size: 11px; color: #6a737d; margin-top: 5px;\">All Environments</div>"
              else
                echo "<div style=\"display: flex; align-items: center; gap: 5px;\">"
                echo "<span style=\"width: 6px; height: 6px; background-color: #cb2431; border-radius: 50%;\"></span>"
                echo "<span style=\"font-size: 14px; color: #cb2431;\">Failed</span>"
                echo "</div>"
                echo "<div style=\"font-size: 11px; color: #6a737d; margin-top: 5px;\">Deployment Error</div>"
              fi)
            </div>
          </div>

          ## 📈 Final Status

          <div align="center" style="margin: 20px 0;">
            $(if [ "${{ needs.Deploy_to_Environment.result }}" == "success" ] && \
               [ "${{ needs.GCP_Auth.result }}" == "success" ] && \
               [ "${{ needs.ApigeeLint.result }}" == "success" ] && \
               [ "${{ needs.Prepare_and_Upload.result }}" == "success" ]; then
              echo "<div style=\"background: linear-gradient(45deg, #28a745, #34d058); padding: 20px; border-radius: 8px; display: inline-block; box-shadow: 0 4px 6px rgba(0,0,0,0.1);\">"
              echo "<h3 style=\"margin: 0; color: white;\">✨ Deployment Successfully Completed</h3>"
              echo "</div>"
            else
              echo "<div style=\"background: linear-gradient(45deg, #cb2431, #ff4444); padding: 20px; border-radius: 8px; display: inline-block; box-shadow: 0 4px 6px rgba(0,0,0,0.1);\">"
              echo "<h3 style=\"margin: 0; color: white;\">⚠️ Deployment Issues Detected</h3>"
              echo "</div>"
            fi)
          </div>

          <div align="center" style="margin-top: 20px; opacity: 0.8;">
            <sub>Run ID: <code style="background-color: #f6f8fa; padding: 3px 6px; border-radius: 4px; font-size: 11px;">${{ github.run_id }}</code></sub>
          </div>
          EOF

