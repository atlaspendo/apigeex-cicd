name: Apigee Proxy Deployment [Reusable Workflow]

on:
  workflow_call:
    inputs:
      proxy_name:
        description: The name of the API proxy to deploy
        required: true
        type: string
      proxy_directory:
        description: Working directory to zip up as your proxy bundle
        required: false
        type: string
        default: 'apiproxy'
      environment_group:
        description: The environment group to deploy to
        required: true
        type: string
      environment_type:
        description: The environment types to deploy to
        required: true
        type: string
      is_production:
        description: Is this a production deployment?
        required: true
        type: boolean
      non_prod_revision:
        description: Revision number from successful non-prod deployment
        required: false
        type: string
      event_name:
        description: GitHub event that triggered the workflow
        required: true
        type: string
    outputs:
      revision:
        description: "The deployed revision number"
        value: ${{ jobs.Build_And_Upload_Proxy.outputs.latest_revision }}
      deployment_status:
        description: "Status of the deployment"
        value: ${{ jobs.validate_deployment_inputs.outputs.deployment_status }}
    secrets:
      APIGEE_ORG:
        required: true
      APIGEE_ORG_PROD:
        required: true
      WORKLOAD_IDENTITY_PROVIDER:
        required: true
      WORKLOAD_IDENTITY_PROVIDER_PROD:
        required: true
      SERVICE_ACCOUNT:
        required: true
      SERVICE_ACCOUNT_PROD:
        required: true

permissions:
  contents: read
  id-token: write
  issues: write
  deployments: write
  #environments: read

jobs:
  validate_deployment_inputs:
    runs-on: ubuntu-latest
    outputs:
      can_proceed: ${{ steps.validate.outputs.can_proceed }}
      deployment_type: ${{ steps.validate.outputs.deployment_type }}
      deployment_status: ${{ steps.validate.outputs.deployment_status }}
      environment: ${{ steps.validate.outputs.environment }}
    steps:
      - name: Validate Environment Configuration
        id: validate
        run: |
          echo "Validating deployment configuration..."
          
          PROCEED=true
          DEPLOY_TYPE="non-prod"
          STATUS="pending"
          
          # For production deployment, validate required inputs
          if [[ "${{ inputs.is_production }}" == "true" ]]; then
            if [[ -z "${{ inputs.non_prod_revision }}" ]]; then
              echo "❌ Error: Production deployment requires non_prod_revision"
              PROCEED=false
              STATUS="failed"
            else
              DEPLOY_TYPE="prod"
              echo "✓ Production deployment validated with revision ${{ inputs.non_prod_revision }}"
            fi
          fi
          
          # Validate environment group
          case "${{ inputs.environment_group }}" in
            "default"|"edd"|"homerun"|"wow"|"wpay"|"prod")
              echo "✓ Valid environment group"
              ;;
            *)
              echo "❌ Error: Invalid environment group"
              PROCEED=false
              STATUS="failed"
              ;;
          esac
          
          # Validate environment type
          case "${{ inputs.environment_type }}" in
            "dev"|"test-env"|"test"|"uat"|"prod")
              echo "✓ Valid environment type"
              echo "environment=${{ inputs.environment_type }}" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "❌ Error: Invalid environment type"
              PROCEED=false
              STATUS="failed"
              ;;
          esac
          
          if [[ "$PROCEED" == "true" ]]; then
            STATUS="validated"
          fi
          
          echo "can_proceed=$PROCEED" >> $GITHUB_OUTPUT
          echo "deployment_type=$DEPLOY_TYPE" >> $GITHUB_OUTPUT
          echo "deployment_status=$STATUS" >> $GITHUB_OUTPUT

  Setup_Auth:
    needs: validate_deployment_inputs
    if: needs.validate_deployment_inputs.outputs.can_proceed == 'true'
    runs-on: ubuntu-latest
    outputs:
      nonprod_token: ${{ steps.nonprod_auth.outputs.access_token }}
      prod_token: ${{ steps.prod_auth.outputs.access_token }}
    steps:
      - name: Non-Prod Authentication
        id: nonprod_auth
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}
          token_format: 'access_token'

      - name: Prod Authentication
        id: prod_auth
        if: inputs.environment_type == 'prod'
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_PROD }}
          service_account: ${{ secrets.SERVICE_ACCOUNT_PROD }}
          token_format: 'access_token'

  Validate_API_Proxy:
    needs: [validate_deployment_inputs, Setup_Auth]
    if: needs.validate_deployment_inputs.outputs.can_proceed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install apigeelint
        run: |
          npm install -g apigeelint
          if [ $? -ne 0 ]; then
            echo "Failed to install apigeelint"
            exit 1
          fi

      - name: Run apigeelint
        run: |
          apigeelint -s ${{ inputs.proxy_directory }} -f table.js
          if [ $? -ne 0 ]; then
            echo "API proxy validation failed"
            exit 1
          fi

  Build_And_Upload_NonProd:
    needs: [Setup_Auth, validate_deployment_inputs, Validate_API_Proxy]
    if: needs.validate_deployment_inputs.outputs.can_proceed == 'true' && inputs.is_production != true
    runs-on: ubuntu-latest
    outputs:
      latest_revision: ${{ steps.upload.outputs.revision }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install apigeecli
        id: install-apigeecli
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: |
            mkdir -p $HOME/.apigeecli/bin
            curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
            echo "$HOME/.apigeecli/bin" >> $GITHUB_PATH

      - name: Create API bundle
        id: create-bundle
        run: |
          # Create artifacts directory
          mkdir -p $GITHUB_WORKSPACE/artifacts
          
          create_bundle() {
            local source_dir="$1"
            echo "Creating bundle from: $source_dir"
            mkdir -p temp_bundle
            cp -r "$source_dir" temp_bundle/apiproxy
            cd temp_bundle
            zip -r ../proxy.zip apiproxy
            cd ..
            # Save bundle for prod deployment
            cp proxy.zip $GITHUB_WORKSPACE/artifacts/proxy.zip
            echo "Zip contents:"
            unzip -l proxy.zip
            rm -rf temp_bundle
          }
          
          if [ -d "${{ inputs.proxy_directory }}" ]; then
            create_bundle "${{ inputs.proxy_directory }}"
          elif [ -d "src/${{ inputs.proxy_directory }}" ]; then
            create_bundle "src/${{ inputs.proxy_directory }}"
          else
            echo "Error: Could not find apiproxy directory"
            exit 1
          fi

      - name: Upload and Get Revision
        id: upload
        env:
          APIGEE_ORG: ${{ secrets.APIGEE_ORG }}
          PROXY_NAME: ${{ inputs.proxy_name }}
          ACCESS_TOKEN: ${{ needs.Setup_Auth.outputs.nonprod_token }}
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: |
            echo "Using organization: $APIGEE_ORG"
            echo "Using proxy name: $PROXY_NAME"
            
            echo "Waiting 10 seconds before upload..."
            sleep 10
            
            IMPORT_OUTPUT=$($HOME/.apigeecli/bin/apigeecli apis create bundle \
              -n "$PROXY_NAME" \
              -p proxy.zip \
              --org "$APIGEE_ORG" \
              --token "$ACCESS_TOKEN")
            
            echo "Import output: $IMPORT_OUTPUT"
            
            if [ $? -ne 0 ]; then
              echo "Failed to import API proxy bundle"
              exit 1
            fi
            
            echo "Waiting 30 seconds for upload to process..."
            sleep 30
            
            LATEST_REVISION=$(echo "$IMPORT_OUTPUT" | grep -oP '"revision":\s*"\K[^"]+')
            
            if [ -z "$LATEST_REVISION" ]; then
              echo "Failed to get revision number"
              exit 1
            fi
            
            # Save revision number for prod deployment
            echo "$LATEST_REVISION" > $GITHUB_WORKSPACE/artifacts/revision.txt
            
            echo "Latest revision: $LATEST_REVISION"
            echo "revision=$LATEST_REVISION" >> $GITHUB_OUTPUT

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: proxy-artifacts
          path: |
            ${{ github.workspace }}/artifacts/proxy.zip
            ${{ github.workspace }}/artifacts/revision.txt
          retention-days: 1

  Deploy_To_NonProd:
    needs: [Build_And_Upload_NonProd, validate_deployment_inputs]
    if: needs.validate_deployment_inputs.outputs.can_proceed == 'true' && inputs.is_production != true
    runs-on: ubuntu-latest
    environment: 
      name: ${{ needs.validate_deployment_inputs.outputs.environment }}
    steps:
      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ inputs.is_production == true && secrets.WORKLOAD_IDENTITY_PROVIDER_PROD || secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ inputs.is_production == true && secrets.SERVICE_ACCOUNT_PROD || secrets.SERVICE_ACCOUNT }}
          token_format: 'access_token'

      - name: Install apigeecli
        run: |
          mkdir -p $HOME/.apigeecli/bin
          curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
          echo "$HOME/.apigeecli/bin" >> $GITHUB_PATH

      - name: Pre-deployment Verification
        run: |
          echo "Verifying prerequisites before deployment..."
          echo "Waiting 10 seconds for previous operations to complete..."
          sleep 10

      - name: Deploy to Environment
        id: deploy
        env:
          APIGEE_ORG: ${{ inputs.is_production == true && secrets.APIGEE_ORG_PROD || secrets.APIGEE_ORG }}
          PROXY_NAME: ${{ inputs.proxy_name }}
          ACCESS_TOKEN: ${{ steps.auth.outputs.access_token }}
          LATEST_REVISION: ${{ needs.Build_And_Upload_NonProd.outputs.latest_revision }}
        run: |
          if [ -z "$LATEST_REVISION" ]; then
            echo "Error: LATEST_REVISION is empty. Deployment cannot proceed."
            exit 1
          fi
          
          # Construct environment name
          if [ "${{ inputs.environment_group }}" == "default" ]; then
            DEPLOY_ENV="${{ needs.validate_deployment_inputs.outputs.environment }}"
          else
            DEPLOY_ENV="${{ inputs.environment_group }}-${{ needs.validate_deployment_inputs.outputs.environment }}"
          fi
          
          echo "Deploying proxy '$PROXY_NAME' revision '$LATEST_REVISION' to environment '$DEPLOY_ENV'"
          
          # Add pre-deployment wait
          echo "Waiting 15 seconds before deployment..."
          sleep 10
          
          $HOME/.apigeecli/bin/apigeecli apis deploy \
            --name "$PROXY_NAME" \
            --org "$APIGEE_ORG" \
            --env "$DEPLOY_ENV" \
            --rev "$LATEST_REVISION" \
            --token "$ACCESS_TOKEN" \
            --ovr \
            --wait
          
          # Add post-deployment wait
          echo "Waiting 10 seconds for deployment to stabilize..."
          sleep 5

      - name: Post Deployment Check
        run: |
          echo "Running post-deployment verification..."
          echo "Waiting 15 seconds for deployment to finalize..."
          sleep 10
          echo "Post-deployment verification complete"

  Verify_NonProd_Deployment:
    needs: [Deploy_To_NonProd, Build_And_Upload_NonProd]
    if: needs.Deploy_To_NonProd.result == 'success'
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.verify.outputs.status }}
    steps:
      - name: Pre-verification Wait
        run: |
          echo "Waiting 15 seconds before starting verification..."
          sleep 10

      - name: Verify Deployment
        id: verify
        env:
          APIGEE_ORG: ${{ secrets.APIGEE_ORG }}
          PROXY_NAME: ${{ inputs.proxy_name }}
          ENVIRONMENT: ${{ needs.validate_deployment_inputs.outputs.environment }}
          REVISION: ${{ needs.Build_And_Upload_NonProd.outputs.latest_revision }}
        run: |
          echo "Running comprehensive verification..."
          sleep 10  # Allow time for services to stabilize
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Post-verification Wait
        run: |
          echo "Waiting 10 seconds after verification..."
          sleep 5
          
  Request_Production_Approval:
    needs: [Verify_NonProd_Deployment, Build_And_Upload_NonProd]
    if: needs.Verify_NonProd_Deployment.outputs.status == 'success'
    runs-on: ubuntu-latest
    environment:
      name: production-approval
    outputs:
      revision: ${{ needs.Build_And_Upload_NonProd.outputs.latest_revision }}
    steps:
      - name: Set Deployment Status
        run: |
          echo "Non-prod deployment successful"
          echo "Waiting for production approval"
          echo "Proxy Name: ${{ inputs.proxy_name }}"
          echo "Revision: ${{ needs.Build_And_Upload_NonProd.outputs.latest_revision }}"


  Build_And_Upload_Prod:
    needs: [Setup_Auth, Request_Production_Approval]
    if: always() && needs.Request_Production_Approval.result == 'success'
    runs-on: ubuntu-latest
    outputs:
      latest_revision: ${{ steps.upload.outputs.revision }}
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: proxy-artifacts
          path: artifacts

      - name: Install apigeecli
        run: |
          mkdir -p $HOME/.apigeecli/bin
          curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
          echo "$HOME/.apigeecli/bin" >> $GITHUB_PATH

      - name: Upload to Production
        id: upload
        env:
          APIGEE_ORG: ${{ secrets.APIGEE_ORG_PROD }}
          PROXY_NAME: ${{ inputs.proxy_name }}
          ACCESS_TOKEN: ${{ needs.Setup_Auth.outputs.prod_token }}
        run: |
          TARGET_REVISION=$(cat artifacts/revision.txt)
          echo "Using target revision: $TARGET_REVISION"
          
          echo "Importing bundle to production org..."
          IMPORT_OUTPUT=$($HOME/.apigeecli/bin/apigeecli apis create bundle \
            -n "$PROXY_NAME" \
            -p artifacts/proxy.zip \
            --org "$APIGEE_ORG" \
            --token "$ACCESS_TOKEN")
          
          NEW_REVISION=$(echo "$IMPORT_OUTPUT" | grep -oP '"revision":\s*"\K[^"]+')
          echo "revision=$NEW_REVISION" >> $GITHUB_OUTPUT

  Deploy_To_Production:
    needs: [Build_And_Upload_Prod, Request_Production_Approval]
    if: always() && needs.Request_Production_Approval.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Production
        env:
          APIGEE_ORG: ${{ secrets.APIGEE_ORG_PROD }}
          PROXY_NAME: ${{ inputs.proxy_name }}
          ACCESS_TOKEN: ${{ needs.Setup_Auth.outputs.prod_token }}
          REVISION: ${{ needs.Build_And_Upload_Prod.outputs.latest_revision }}
        run: |
          echo "Deploying to production organization's test-env environment"
          
          if [ "${{ inputs.environment_group }}" == "default" ]; then
            DEPLOY_ENV="test-env"
          else
            DEPLOY_ENV="${{ inputs.environment_group }}-test-env"
          fi
          
          echo "Deploying to environment: $DEPLOY_ENV"
          
          $HOME/.apigeecli/bin/apigeecli apis deploy \
            --name "$PROXY_NAME" \
            --org "$APIGEE_ORG" \
            --env "$DEPLOY_ENV" \
            --rev "$REVISION" \
            --token "$ACCESS_TOKEN" \
            --ovr \
            --wait
