name: Apigee Proxy Deployment [Reusable Workflow]

on:
  workflow_call:
    inputs:
      proxy_name:
        description: The name of the API proxy to deploy
        required: true
        type: string
      proxy_directory:
        description: Working directory to zip up as your proxy bundle
        required: false
        type: string
        default: 'apiproxy'
      environment_group:
        description: The environment group to deploy to
        required: true
        type: string
      environment_type:
        description: The environment types to deploy to
        required: true
        type: string
      runner:
        description: The runner to use for the job
        required: false
        default: 'ubuntu-latest'
        type: string
    secrets:
      apigee_org:
        required: true
      workload_identity_provider:
        required: true
      service_account:
        required: true

permissions:
  contents: read
  id-token: write

jobs:
  Prepare_Environment_List:
    runs-on: ${{ inputs.runner }}
    outputs:
      environments: ${{ steps.set-envs.outputs.environments }}
    steps:
      - name: Set Environment List
        id: set-envs
        run: |
          GROUP="${{ inputs.environment_group }}"
          TYPES="${{ inputs.environment_type }}"
          
          generate_env_list() {
            local group=$1
            local types=$2
            local envs="["
            
            IFS=',' read -ra ENV_TYPES <<< "$types"
            local first=true
            
            for type in "${ENV_TYPES[@]}"; do
              if [ "$first" = true ]; then
                first=false
              else
                envs="${envs},"
              fi
              
              if [ "$group" = "default" ]; then
                envs="${envs}\"${type}\""
              else
                envs="${envs}\"${group}-${type}\""
              fi
            done
            
            envs="${envs}]"
            echo "$envs"
          }
          
          ENVIRONMENTS=$(generate_env_list "$GROUP" "$TYPES")
          echo "environments=$ENVIRONMENTS" >> $GITHUB_OUTPUT

  GCP_Auth:
    needs: [Prepare_Environment_List]
    runs-on: ${{ inputs.runner }}
    outputs:
      access_token: ${{ steps.auth.outputs.access_token }}
    steps:
      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.workload_identity_provider }}
          service_account: ${{ secrets.service_account }}
          token_format: 'access_token'

  ApigeeLint:
    needs: [GCP_Auth]
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install apigeelint
        run: npm install -g apigeelint

      - name: Run apigeelint
        run: apigeelint -s ${{ inputs.proxy_directory }} -f table.js

  Prepare_and_Upload:
    needs: [GCP_Auth, ApigeeLint]
    runs-on: ${{ inputs.runner }}
    outputs:
      latest_revision: ${{ steps.upload.outputs.revision }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.workload_identity_provider }}
          service_account: ${{ secrets.service_account }}
          token_format: 'access_token'

      - name: Install apigeecli
        run: |
          mkdir -p $HOME/.apigeecli/bin
          curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
          echo "$HOME/.apigeecli/bin" >> $GITHUB_PATH
          $HOME/.apigeecli/bin/apigeecli --help

      - name: Create API bundle
        id: create-bundle
        working-directory: ${{ github.workspace }}
        run: |
          create_bundle() {
            local source_dir="$1"
            echo "Creating bundle from: $source_dir"
            mkdir -p temp_bundle
            cp -r "$source_dir" temp_bundle/apiproxy
            cd temp_bundle
            zip -r ../proxy.zip apiproxy
            cd ..
            echo "Zip contents:"
            unzip -l proxy.zip
            rm -rf temp_bundle
          }
          
          if [ -d "${{ inputs.proxy_directory }}" ]; then
            create_bundle "${{ inputs.proxy_directory }}"
          elif [ -d "src/${{ inputs.proxy_directory }}" ]; then
            create_bundle "src/${{ inputs.proxy_directory }}"
          else
            echo "Error: Could not find apiproxy directory"
            exit 1
          fi

      - name: Upload and Get Revision
        id: upload
        env:
          APIGEE_ORG: ${{ secrets.apigee_org }}
          PROXY_NAME: ${{ inputs.proxy_name }}
          ACCESS_TOKEN: ${{ steps.auth.outputs.access_token }}
        run: |
          echo "Importing API proxy bundle to Apigee organization"
          IMPORT_OUTPUT=$($HOME/.apigeecli/bin/apigeecli apis create bundle -n "$PROXY_NAME" -p proxy.zip \
            --org "$APIGEE_ORG" \
            --token "$ACCESS_TOKEN")
          
          echo "$IMPORT_OUTPUT"
          
          LATEST_REVISION=$(echo "$IMPORT_OUTPUT" | grep -oP '"revision": "\K[^"]+')
          
          if [ -z "$LATEST_REVISION" ]; then
            echo "Failed to get revision number"
            exit 1
          fi
          
          echo "Latest revision: $LATEST_REVISION"
          echo "revision=$LATEST_REVISION" >> $GITHUB_OUTPUT

  Deploy_to_Environment:
    needs: [Prepare_Environment_List, GCP_Auth, Prepare_and_Upload]
    strategy:
      matrix:
        environment: ${{ fromJSON(needs.Prepare_Environment_List.outputs.environments) }}
      fail-fast: false
      max-parallel: 1
    runs-on: ${{ inputs.runner }}
    environment: ${{ matrix.environment }}
    steps:
      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.workload_identity_provider }}
          service_account: ${{ secrets.service_account }}
          token_format: 'access_token'

      - name: Install apigeecli
        run: |
          mkdir -p $HOME/.apigeecli/bin
          curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
          echo "$HOME/.apigeecli/bin" >> $GITHUB_PATH

      - name: Deploy to Environment
        env:
          APIGEE_ORG: ${{ secrets.apigee_org }}
          APIGEE_ENV: ${{ matrix.environment }}
          PROXY_NAME: ${{ inputs.proxy_name }}
          ACCESS_TOKEN: ${{ steps.auth.outputs.access_token }}
          LATEST_REVISION: ${{ needs.Prepare_and_Upload.outputs.latest_revision }}
        run: |
          if [ -z "$LATEST_REVISION" ]; then
            echo "Error: LATEST_REVISION is empty. Deployment cannot proceed."
            exit 1
          fi
          
          echo "Deploying proxy '$PROXY_NAME' revision '$LATEST_REVISION' to environment '$APIGEE_ENV'"
          
          $HOME/.apigeecli/bin/apigeecli apis deploy \
            --name "$PROXY_NAME" \
            --org "$APIGEE_ORG" \
            --env "$APIGEE_ENV" \
            --rev "$LATEST_REVISION" \
            --token "$ACCESS_TOKEN" \
            --ovr \
            --wait

  Cleanup_Old_Revisions:
    needs: [Deploy_to_Environment]
    if: always()
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.workload_identity_provider }}
          service_account: ${{ secrets.service_account }}
          token_format: 'access_token'

      - name: Delete Older Revisions
        env:
          APIGEE_ORG: ${{ secrets.apigee_org }}
          APIGEE_PROXY_NAME: ${{ inputs.proxy_name }}
          ACCESS_TOKEN: ${{ steps.auth.outputs.access_token }}
        run: |
          REVISIONS=$(curl -s -H "Authorization: Bearer $ACCESS_TOKEN" \
            "https://apigee.googleapis.com/v1/organizations/$APIGEE_ORG/apis/$APIGEE_PROXY_NAME/revisions")
          
          readarray -t REVISIONS < <(echo "$REVISIONS" | jq -r '.[]' | sort -n)
          TOTAL_REVISIONS=${#REVISIONS[@]}
          KEEP_COUNT=5
          
          if [ "$TOTAL_REVISIONS" -gt "$KEEP_COUNT" ]; then
            DELETE_COUNT=$((TOTAL_REVISIONS - KEEP_COUNT))
            for ((i=0; i<DELETE_COUNT; i++)); do
              REV="${REVISIONS[$i]}"
              curl -X DELETE -H "Authorization: Bearer $ACCESS_TOKEN" \
                "https://apigee.googleapis.com/v1/organizations/$APIGEE_ORG/apis/$APIGEE_PROXY_NAME/revisions/$REV"
            done
          fi

  Deployment_Summary:
    needs: [ApigeeLint, Prepare_and_Upload, Deploy_to_Environment, Prepare_Environment_List, Cleanup_Old_Revisions, GCP_Auth]
    if: always()
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Generate Enhanced Deployment Summary
        run: |
          # Get current timestamp
          TIMESTAMP=$(date '+%d/%m/%Y, %H:%M:%S')
          
          cat << EOF >> $GITHUB_STEP_SUMMARY
          <div align="center">
          
          # üöÄ Apigee Proxy Deployment Summary
          
          **Deployment Time:** $TIMESTAMP
          
          </div>
          
          ---
          
          ## üìã Deployment Information
          
          \`\`\`
          üì¶ Proxy: ${{ inputs.proxy_name }}
          üìå Version: ${{ needs.Prepare_and_Upload.outputs.latest_revision }}
          üîç Group: ${{ inputs.environment_group }}
          \`\`\`
          
          ## üåê Environment Configuration
          
          ### Target Environments
          $(for env in $(echo ${{ inputs.environment_type }} | tr ',' ' '); do
            if [ "${{ inputs.environment_group }}" == "default" ]; then
              echo "- \`${env}\` $([ "${{ needs.Deploy_to_Environment.result }}" == "success" ] && echo "‚úÖ" || echo "‚ùå")"
            else
              echo "- \`${{ inputs.environment_group }}-${env}\` $([ "${{ needs.Deploy_to_Environment.result }}" == "success" ] && echo "‚úÖ" || echo "‚ùå")"
            fi
          done)
          
          ## üìä Deployment Pipeline Status
          
          ### üîê Authentication
          \`\`\`diff
          $([ "${{ needs.GCP_Auth.result }}" == "success" ] && echo "+ ‚úì Authentication Successful" || echo "- ‚úó Authentication Failed")
          Provider: Workload Identity Federation
          Status: ${{ needs.GCP_Auth.result }}
          \`\`\`
          
          ### üîç Linting Results
          \`\`\`diff
          $([ "${{ needs.ApigeeLint.result }}" == "success" ] && echo "+ ‚úì Linting Passed" || echo "- ‚úó Linting Failed")
          Tool: apigeelint
          Status: ${{ needs.ApigeeLint.result }}
          \`\`\`
          
          ### üì¶ Upload Process
          \`\`\`diff
          $([ "${{ needs.Prepare_and_Upload.result }}" == "success" ] && echo "+ ‚úì Upload Successful" || echo "- ‚úó Upload Failed")
          New Revision: ${{ needs.Prepare_and_Upload.outputs.latest_revision }}
          Status: ${{ needs.Prepare_and_Upload.result }}
          \`\`\`
          
          ### üöÄ Deployment Status
          \`\`\`diff
          $([ "${{ needs.Deploy_to_Environment.result }}" == "success" ] && echo "+ ‚úì Deployment Successful" || echo "- ‚úó Deployment Failed")
          Target Environments: ${{ inputs.environment_type }}
          Status: ${{ needs.Deploy_to_Environment.result }}
          \`\`\`
          
          ## üßπ Cleanup Summary
          \`\`\`
          Retention Policy: Latest 5 revisions
          Cleanup Status: $([ "${{ needs.Cleanup_Old_Revisions.result }}" == "success" ] && echo "‚úÖ Completed" || echo "‚ùå Failed")
          \`\`\`
          
          ## üìà Deployment Timeline
          
          | Stage | Duration | Status |
          |-------|----------|---------|
          | üîê Authentication | \`${{ needs.GCP_Auth.duration }}\` | $([ "${{ needs.GCP_Auth.result }}" == "success" ] && echo "‚úÖ" || echo "‚ùå") |
          | üîç Linting | \`${{ needs.ApigeeLint.duration }}\` | $([ "${{ needs.ApigeeLint.result }}" == "success" ] && echo "‚úÖ" || echo "‚ùå") |
          | üì¶ Upload | \`${{ needs.Prepare_and_Upload.duration }}\` | $([ "${{ needs.Prepare_and_Upload.result }}" == "success" ] && echo "‚úÖ" || echo "‚ùå") |
          | üöÄ Deployment | \`${{ needs.Deploy_to_Environment.duration }}\` | $([ "${{ needs.Deploy_to_Environment.result }}" == "success" ] && echo "‚úÖ" || echo "‚ùå") |
          | üßπ Cleanup | \`${{ needs.Cleanup_Old_Revisions.duration }}\` | $([ "${{ needs.Cleanup_Old_Revisions.result }}" == "success" ] && echo "‚úÖ" || echo "‚ùå") |
          
          ## üéØ Final Status
          
          $(if [ "${{ needs.Deploy_to_Environment.result }}" == "success" ] && \
             [ "${{ needs.GCP_Auth.result }}" == "success" ] && \
             [ "${{ needs.ApigeeLint.result }}" == "success" ] && \
             [ "${{ needs.Prepare_and_Upload.result }}" == "success" ]; then
            echo "<details><summary>‚ú® Deployment Successfully Completed</summary>"
            echo ""
            echo "### Success Details"
            echo "- ‚úÖ All authentication checks passed"
            echo "- ‚úÖ Code quality standards met"
            echo "- ‚úÖ Successfully uploaded to Apigee"
            echo "- ‚úÖ Deployed to all target environments"
            echo "- ‚úÖ Cleanup completed successfully"
            echo "</details>"
          else
            echo "<details><summary>‚ö†Ô∏è Deployment Issues Detected</summary>"
            echo ""
            echo "### Issue Details"
            echo "$([ "${{ needs.GCP_Auth.result }}" != "success" ] && echo "- ‚ùå Authentication failed" || echo "- ‚úÖ Authentication successful")"
            echo "$([ "${{ needs.ApigeeLint.result }}" != "success" ] && echo "- ‚ùå Linting failed" || echo "- ‚úÖ Linting passed")"
            echo "$([ "${{ needs.Prepare_and_Upload.result }}" != "success" ] && echo "- ‚ùå Upload failed" || echo "- ‚úÖ Upload successful")"
            echo "$([ "${{ needs.Deploy_to_Environment.result }}" != "success" ] && echo "- ‚ùå Deployment failed" || echo "- ‚úÖ Deployment successful")"
            echo "</details>"
          fi)
          
          ---
          
          <div align="center">
          
          **Repository:** \`${{ github.repository }}\` | **Workflow:** \`${{ github.workflow }}\` | **Run ID:** \`${{ github.run_id }}\`
          
          </div>
          EOF
