name: Apigee Proxy Deployment [Reusable Workflow]

on:
  workflow_call:
    inputs:
      proxy_name:
        description: The name of the API proxy to deploy
        required: true
        type: string
      proxy_directory:
        description: Working directory to zip up as your proxy bundle
        required: false
        type: string
        default: 'apiproxy'
      environment_group:
        description: The environment group to deploy to
        required: true
        type: string
      environment_type:
        description: The environment types to deploy to
        required: true
        type: string
      runner:
        description: The runner to use for the job
        required: false
        default: 'ubuntu-latest'
        type: string
    secrets:
      apigee_org:
        required: true
      workload_identity_provider:
        required: true
      service_account:
        required: true

permissions:
  contents: read
  id-token: write

jobs:
  Initialize_Environment_Configuration:
    runs-on: ${{ inputs.runner }}
    outputs:
      environments: ${{ steps.set-envs.outputs.environments }}
    steps:
      - name: Set Environment List
        id: set-envs
        run: |
          GROUP="${{ inputs.environment_group }}"
          TYPES="${{ inputs.environment_type }}"
          
          generate_env_list() {
            local group=$1
            local types=$2
            local envs="["
            
            IFS=',' read -ra ENV_TYPES <<< "$types"
            local first=true
            
            for type in "${ENV_TYPES[@]}"; do
              if [ "$first" = true ]; then
                first=false
              else
                envs="${envs},"
              fi
              
              if [ "$group" = "default" ]; then
                envs="${envs}\"${type}\""
              else
                envs="${envs}\"${group}-${type}\""
              fi
            done
            
            envs="${envs}]"
            echo "$envs"
          }
          
          ENVIRONMENTS=$(generate_env_list "$GROUP" "$TYPES")
          echo "environments=$ENVIRONMENTS" >> $GITHUB_OUTPUT

  Setup_GCP_Authentication:
    needs: [Initialize_Environment_Configuration]
    runs-on: ${{ inputs.runner }}
    outputs:
      access_token: ${{ steps.auth.outputs.access_token }}
    steps:
      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.workload_identity_provider }}
          service_account: ${{ secrets.service_account }}
          token_format: 'access_token'

  Validate_API_Proxy-ApigeeLint:
    needs: [Setup_GCP_Authentication]
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install apigeelint
        run: npm install -g apigeelint

      - name: Run apigeelint
        run: apigeelint -s ${{ inputs.proxy_directory }} -f table.js

  Build_And_Upload_Proxy:
    needs: [Setup_GCP_Authentication, Validate_API_Proxy-ApigeeLint]
    runs-on: ${{ inputs.runner }}
    outputs:
      latest_revision: ${{ steps.upload.outputs.revision }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.workload_identity_provider }}
          service_account: ${{ secrets.service_account }}
          token_format: 'access_token'

      - name: Install apigeecli
        run: |
          mkdir -p $HOME/.apigeecli/bin
          curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
          echo "$HOME/.apigeecli/bin" >> $GITHUB_PATH
          $HOME/.apigeecli/bin/apigeecli --help

      - name: Create API bundle
        id: create-bundle
        working-directory: ${{ github.workspace }}
        run: |
          create_bundle() {
            local source_dir="$1"
            echo "Creating bundle from: $source_dir"
            mkdir -p temp_bundle
            cp -r "$source_dir" temp_bundle/apiproxy
            cd temp_bundle
            zip -r ../proxy.zip apiproxy
            cd ..
            echo "Zip contents:"
            unzip -l proxy.zip
            rm -rf temp_bundle
          }
          
          if [ -d "${{ inputs.proxy_directory }}" ]; then
            create_bundle "${{ inputs.proxy_directory }}"
          elif [ -d "src/${{ inputs.proxy_directory }}" ]; then
            create_bundle "src/${{ inputs.proxy_directory }}"
          else
            echo "Error: Could not find apiproxy directory"
            exit 1
          fi

      - name: Upload and Get Revision
        id: upload
        env:
          APIGEE_ORG: ${{ secrets.apigee_org }}
          PROXY_NAME: ${{ inputs.proxy_name }}
          ACCESS_TOKEN: ${{ steps.auth.outputs.access_token }}
        run: |
          echo "Importing API proxy bundle to Apigee organization"
          IMPORT_OUTPUT=$($HOME/.apigeecli/bin/apigeecli apis create bundle -n "$PROXY_NAME" -p proxy.zip \
            --org "$APIGEE_ORG" \
            --token "$ACCESS_TOKEN")
          
          echo "$IMPORT_OUTPUT"
          
          LATEST_REVISION=$(echo "$IMPORT_OUTPUT" | grep -oP '"revision": "\K[^"]+')
          
          if [ -z "$LATEST_REVISION" ]; then
            echo "Failed to get revision number"
            exit 1
          fi
          
          echo "Latest revision: $LATEST_REVISION"
          echo "revision=$LATEST_REVISION" >> $GITHUB_OUTPUT

  Deploy_Proxy_To_Environment:
    needs: [Initialize_Environment_Configuration, Setup_GCP_Authentication, Build_And_Upload_Proxy]
    strategy:
      matrix:
        environment: ${{ fromJSON(needs.Prepare_Environment_List.outputs.environments) }}
      fail-fast: false
      max-parallel: 1
    runs-on: ${{ inputs.runner }}
    environment: ${{ matrix.environment }}
    steps:
      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.workload_identity_provider }}
          service_account: ${{ secrets.service_account }}
          token_format: 'access_token'

      - name: Install apigeecli
        run: |
          mkdir -p $HOME/.apigeecli/bin
          curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
          echo "$HOME/.apigeecli/bin" >> $GITHUB_PATH

      - name: Deploy to Environment
        env:
          APIGEE_ORG: ${{ secrets.apigee_org }}
          APIGEE_ENV: ${{ matrix.environment }}
          PROXY_NAME: ${{ inputs.proxy_name }}
          ACCESS_TOKEN: ${{ steps.auth.outputs.access_token }}
          LATEST_REVISION: ${{ needs.Prepare_and_Upload.outputs.latest_revision }}
        run: |
          if [ -z "$LATEST_REVISION" ]; then
            echo "Error: LATEST_REVISION is empty. Deployment cannot proceed."
            exit 1
          fi
          
          echo "Deploying proxy '$PROXY_NAME' revision '$LATEST_REVISION' to environment '$APIGEE_ENV'"
          
          $HOME/.apigeecli/bin/apigeecli apis deploy \
            --name "$PROXY_NAME" \
            --org "$APIGEE_ORG" \
            --env "$APIGEE_ENV" \
            --rev "$LATEST_REVISION" \
            --token "$ACCESS_TOKEN" \
            --ovr \
            --wait

  Perform_Revision_Cleanup:
    needs: [Build_And_Upload_Proxy]
    if: always()
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.workload_identity_provider }}
          service_account: ${{ secrets.service_account }}
          token_format: 'access_token'

      - name: Delete Older Revisions
        env:
          APIGEE_ORG: ${{ secrets.apigee_org }}
          APIGEE_PROXY_NAME: ${{ inputs.proxy_name }}
          ACCESS_TOKEN: ${{ steps.auth.outputs.access_token }}
        run: |
          REVISIONS=$(curl -s -H "Authorization: Bearer $ACCESS_TOKEN" \
            "https://apigee.googleapis.com/v1/organizations/$APIGEE_ORG/apis/$APIGEE_PROXY_NAME/revisions")
          
          readarray -t REVISIONS < <(echo "$REVISIONS" | jq -r '.[]' | sort -n)
          TOTAL_REVISIONS=${#REVISIONS[@]}
          KEEP_COUNT=5
          
          if [ "$TOTAL_REVISIONS" -gt "$KEEP_COUNT" ]; then
            DELETE_COUNT=$((TOTAL_REVISIONS - KEEP_COUNT))
            for ((i=0; i<DELETE_COUNT; i++)); do
              REV="${REVISIONS[$i]}"
              curl -X DELETE -H "Authorization: Bearer $ACCESS_TOKEN" \
                "https://apigee.googleapis.com/v1/organizations/$APIGEE_ORG/apis/$APIGEE_PROXY_NAME/revisions/$REV"
            done
          fi


  Generate_Deployment_Report:
    needs: [Validate_API_Proxy-ApigeeLint, Build_And_Upload_Proxy, Initialize_Environment_Configuration, Perform_Revision_Cleanup]
    if: always()
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Generate Deployment Summary
        shell: bash
        run: |
          echo "# 🎯 Apigee Proxy Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "<sub>**Deployment Time:** $(date '+%d/%m/%Y, %H:%M:%S')</sub>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 🔐 Identity & Authentication" >> $GITHUB_STEP_SUMMARY
          echo "| Process | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Workload Identity Federation | $([ "${{ needs.GCP_Auth.result }}" == "success" ] && echo "✅ Verified" || echo "❌ Failed") | Service Account Authentication |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔍 Code Analysis" >> $GITHUB_STEP_SUMMARY
          echo "| Validation | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|---------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| API Proxy Lint Check | $([ "${{ needs.ApigeeLint.result }}" == "success" ] && echo "✅ Passed" || echo "❌ Failed") | Policy & Structure Validation |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📦 Bundle Operations" >> $GITHUB_STEP_SUMMARY
          echo "| Operation | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Proxy Bundle Creation | $([ "${{ needs.Prepare_and_Upload.result }}" == "success" ] && echo "✅ Created" || echo "❌ Failed") | Version: ${{ needs.Prepare_and_Upload.outputs.latest_revision }} |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🚀 Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | Status | Health Check |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|---------|--------------|" >> $GITHUB_STEP_SUMMARY
          # Process each environment
          IFS=',' read -ra ENVS <<< "${{ inputs.environment_type }}"
          for env in "${ENVS[@]}"; do
            if [ "${{ inputs.environment_group }}" == "default" ]; then
              ENV_NAME="${env}"
            else
              ENV_NAME="${{ inputs.environment_group }}-${env}"
            fi
            if [ "${{ needs.Deploy_to_Environment.result }}" == "success" ]; then
              echo "| \`${ENV_NAME}\` | ✅ ACTIVE | \`OPTIMAL\` |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| \`${ENV_NAME}\` | ❌ FAILED | \`CRITICAL\` |" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Deployment Information" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Proxy | \`${{ inputs.proxy_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Revision | \`${{ needs.Prepare_and_Upload.outputs.latest_revision }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Organization | \`${{ secrets.apigee_org }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Group | \`${{ inputs.environment_group }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Environments | \`${{ inputs.environment_type }}\` |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🧹 Cleanup Operations" >> $GITHUB_STEP_SUMMARY
          echo "| Operation | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Old Revision Cleanup | $([ "${{ needs.Cleanup_Old_Revisions.result }}" == "success" ] && echo "✅ Completed" || echo "❌ Failed") | Keeping Latest 5 Revisions |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📈 Final Status" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.Deploy_to_Environment.result }}" == "success" ] && \
             [ "${{ needs.GCP_Auth.result }}" == "success" ] && \
             [ "${{ needs.ApigeeLint.result }}" == "success" ] && \
             [ "${{ needs.Prepare_and_Upload.result }}" == "success" ]; then
            echo "<table><tr><td><h3>✨ Deployment Successfully Completed</h3>" >> $GITHUB_STEP_SUMMARY
            echo "<ul>" >> $GITHUB_STEP_SUMMARY
            echo "<li>Authentication: ✅ Verified</li>" >> $GITHUB_STEP_SUMMARY
            echo "<li>Code Quality: ✅ Standards Met</li>" >> $GITHUB_STEP_SUMMARY
            echo "<li>Bundle: ✅ Created & Uploaded</li>" >> $GITHUB_STEP_SUMMARY
            echo "<li>Deployment: ✅ Successfully Deployed</li>" >> $GITHUB_STEP_SUMMARY
            echo "</ul></td></tr></table>" >> $GITHUB_STEP_SUMMARY
          else
            echo "<table><tr><td><h3>⚠️ Deployment Issues Detected</h3>" >> $GITHUB_STEP_SUMMARY
            echo "<ul>" >> $GITHUB_STEP_SUMMARY
            echo "<li>Authentication: $([ "${{ needs.GCP_Auth.result }}" == "success" ] && echo "✅ Passed" || echo "❌ Failed")</li>" >> $GITHUB_STEP_SUMMARY
            echo "<li>Code Quality: $([ "${{ needs.ApigeeLint.result }}" == "success" ] && echo "✅ Passed" || echo "❌ Failed")</li>" >> $GITHUB_STEP_SUMMARY
            echo "<li>Bundle: $([ "${{ needs.Prepare_and_Upload.result }}" == "success" ] && echo "✅ Passed" || echo "❌ Failed")</li>" >> $GITHUB_STEP_SUMMARY
            echo "<li>Deployment: $([ "${{ needs.Deploy_to_Environment.result }}" == "success" ] && echo "✅ Passed" || echo "❌ Failed")</li>" >> $GITHUB_STEP_SUMMARY
            echo "</ul></td></tr></table>" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "<sub>Run ID: \`${{ github.run_id }}\` | Generated: $(date '+%H:%M:%S')</sub>" >> $GITHUB_STEP_SUMMARY

