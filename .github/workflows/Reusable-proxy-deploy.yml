name: Apigee Proxy Deployment [Reusable Workflow]

on:
  workflow_call:
    inputs:
      proxy_name:
        description: The name of the API proxy to deploy
        required: true
        type: string
      proxy_directory:
        description: Working directory to zip up as your proxy bundle
        required: false
        type: string
        default: 'apiproxy'
      environment_group:
        description: The environment group to deploy to
        required: true
        type: string
      environment_type:
        description: The environment types to deploy to
        required: true
        type: string
      runner:
        description: The runner to use for the job
        required: false
        default: 'ubuntu-latest'
        type: string
    secrets:
      apigee_org:
        required: true
      workload_identity_provider:
        required: true
      service_account:
        required: true

permissions:
  contents: read
  id-token: write

jobs:
  Prepare_Environment_List:
    runs-on: ${{ inputs.runner }}
    outputs:
      environments: ${{ steps.set-envs.outputs.environments }}
    steps:
      - name: Set Environment List
        id: set-envs
        run: |
          GROUP="${{ inputs.environment_group }}"
          TYPES="${{ inputs.environment_type }}"
          
          generate_env_list() {
            local group=$1
            local types=$2
            local envs="["
            
            IFS=',' read -ra ENV_TYPES <<< "$types"
            local first=true
            
            for type in "${ENV_TYPES[@]}"; do
              if [ "$first" = true ]; then
                first=false
              else
                envs="${envs},"
              fi
              
              if [ "$group" = "default" ]; then
                envs="${envs}\"${type}\""
              else
                envs="${envs}\"${group}-${type}\""
              fi
            done
            
            envs="${envs}]"
            echo "$envs"
          }
          
          ENVIRONMENTS=$(generate_env_list "$GROUP" "$TYPES")
          echo "environments=$ENVIRONMENTS" >> $GITHUB_OUTPUT

  GCP_Auth:
    needs: [Prepare_Environment_List]
    runs-on: ${{ inputs.runner }}
    outputs:
      access_token: ${{ steps.auth.outputs.access_token }}
    steps:
      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.workload_identity_provider }}
          service_account: ${{ secrets.service_account }}
          token_format: 'access_token'

  ApigeeLint:
    needs: [GCP_Auth]
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install apigeelint
        run: npm install -g apigeelint

      - name: Run apigeelint
        run: apigeelint -s ${{ inputs.proxy_directory }} -f table.js

  Prepare_and_Upload:
    needs: [GCP_Auth, ApigeeLint]
    runs-on: ${{ inputs.runner }}
    outputs:
      latest_revision: ${{ steps.upload.outputs.revision }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.workload_identity_provider }}
          service_account: ${{ secrets.service_account }}
          token_format: 'access_token'

      - name: Install apigeecli
        run: |
          mkdir -p $HOME/.apigeecli/bin
          curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
          echo "$HOME/.apigeecli/bin" >> $GITHUB_PATH
          $HOME/.apigeecli/bin/apigeecli --help

      - name: Create API bundle
        id: create-bundle
        working-directory: ${{ github.workspace }}
        run: |
          create_bundle() {
            local source_dir="$1"
            echo "Creating bundle from: $source_dir"
            mkdir -p temp_bundle
            cp -r "$source_dir" temp_bundle/apiproxy
            cd temp_bundle
            zip -r ../proxy.zip apiproxy
            cd ..
            echo "Zip contents:"
            unzip -l proxy.zip
            rm -rf temp_bundle
          }
          
          if [ -d "${{ inputs.proxy_directory }}" ]; then
            create_bundle "${{ inputs.proxy_directory }}"
          elif [ -d "src/${{ inputs.proxy_directory }}" ]; then
            create_bundle "src/${{ inputs.proxy_directory }}"
          else
            echo "Error: Could not find apiproxy directory"
            exit 1
          fi

      - name: Upload and Get Revision
        id: upload
        env:
          APIGEE_ORG: ${{ secrets.apigee_org }}
          PROXY_NAME: ${{ inputs.proxy_name }}
          ACCESS_TOKEN: ${{ steps.auth.outputs.access_token }}
        run: |
          echo "Importing API proxy bundle to Apigee organization"
          IMPORT_OUTPUT=$($HOME/.apigeecli/bin/apigeecli apis create bundle -n "$PROXY_NAME" -p proxy.zip \
            --org "$APIGEE_ORG" \
            --token "$ACCESS_TOKEN")
          
          echo "$IMPORT_OUTPUT"
          
          LATEST_REVISION=$(echo "$IMPORT_OUTPUT" | grep -oP '"revision": "\K[^"]+')
          
          if [ -z "$LATEST_REVISION" ]; then
            echo "Failed to get revision number"
            exit 1
          fi
          
          echo "Latest revision: $LATEST_REVISION"
          echo "revision=$LATEST_REVISION" >> $GITHUB_OUTPUT

  Deploy_to_Environment:
    needs: [Prepare_Environment_List, GCP_Auth, Prepare_and_Upload]
    strategy:
      matrix:
        environment: ${{ fromJSON(needs.Prepare_Environment_List.outputs.environments) }}
      fail-fast: false
      max-parallel: 1
    runs-on: ${{ inputs.runner }}
    environment: ${{ matrix.environment }}
    steps:
      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.workload_identity_provider }}
          service_account: ${{ secrets.service_account }}
          token_format: 'access_token'

      - name: Install apigeecli
        run: |
          mkdir -p $HOME/.apigeecli/bin
          curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
          echo "$HOME/.apigeecli/bin" >> $GITHUB_PATH

      - name: Deploy to Environment
        env:
          APIGEE_ORG: ${{ secrets.apigee_org }}
          APIGEE_ENV: ${{ matrix.environment }}
          PROXY_NAME: ${{ inputs.proxy_name }}
          ACCESS_TOKEN: ${{ steps.auth.outputs.access_token }}
          LATEST_REVISION: ${{ needs.Prepare_and_Upload.outputs.latest_revision }}
        run: |
          if [ -z "$LATEST_REVISION" ]; then
            echo "Error: LATEST_REVISION is empty. Deployment cannot proceed."
            exit 1
          fi
          
          echo "Deploying proxy '$PROXY_NAME' revision '$LATEST_REVISION' to environment '$APIGEE_ENV'"
          
          $HOME/.apigeecli/bin/apigeecli apis deploy \
            --name "$PROXY_NAME" \
            --org "$APIGEE_ORG" \
            --env "$APIGEE_ENV" \
            --rev "$LATEST_REVISION" \
            --token "$ACCESS_TOKEN" \
            --ovr \
            --wait

  Cleanup_Old_Revisions:
    needs: [Deploy_to_Environment]
    if: always()
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.workload_identity_provider }}
          service_account: ${{ secrets.service_account }}
          token_format: 'access_token'

      - name: Delete Older Revisions
        env:
          APIGEE_ORG: ${{ secrets.apigee_org }}
          APIGEE_PROXY_NAME: ${{ inputs.proxy_name }}
          ACCESS_TOKEN: ${{ steps.auth.outputs.access_token }}
        run: |
          REVISIONS=$(curl -s -H "Authorization: Bearer $ACCESS_TOKEN" \
            "https://apigee.googleapis.com/v1/organizations/$APIGEE_ORG/apis/$APIGEE_PROXY_NAME/revisions")
          
          readarray -t REVISIONS < <(echo "$REVISIONS" | jq -r '.[]' | sort -n)
          TOTAL_REVISIONS=${#REVISIONS[@]}
          KEEP_COUNT=5
          
          if [ "$TOTAL_REVISIONS" -gt "$KEEP_COUNT" ]; then
            DELETE_COUNT=$((TOTAL_REVISIONS - KEEP_COUNT))
            for ((i=0; i<DELETE_COUNT; i++)); do
              REV="${REVISIONS[$i]}"
              curl -X DELETE -H "Authorization: Bearer $ACCESS_TOKEN" \
                "https://apigee.googleapis.com/v1/organizations/$APIGEE_ORG/apis/$APIGEE_PROXY_NAME/revisions/$REV"
            done
          fi


  Deployment_Summary:
    needs: [ApigeeLint, Prepare_and_Upload, Deploy_to_Environment, Prepare_Environment_List, Cleanup_Old_Revisions, GCP_Auth]
    if: always()
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Generate Enhanced Summary
        run: |
          TIMESTAMP=$(date '+%d/%m/%Y, %H:%M:%S')
          
          cat << EOF >> $GITHUB_STEP_SUMMARY
          <div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif;">
            <!-- Header Section -->
            <div style="padding: 16px 0; border-bottom: 1px solid #e1e4e8;">
              <h1 style="margin: 0; font-size: 24px; color: #24292e;">
                🎯 Apigee Proxy Deployment Status
              </h1>
              <p style="margin: 4px 0 0; font-size: 12px; color: #586069;">
                Deployment Time: $TIMESTAMP
              </p>
            </div>

            <!-- Stage Details Section -->
            <div style="margin: 24px 0; padding: 16px; background-color: #f6f8fa; border-radius: 6px;">
              <div style="display: flex; gap: 16px; margin-bottom: 16px;">
                <div style="flex: 1; padding: 12px; background: white; border: 1px solid #e1e4e8; border-radius: 6px;">
                  <div style="font-size: 12px; color: #586069;">PROXY NAME</div>
                  <div style="font-size: 16px; font-weight: 600; color: #24292e; margin-top: 4px;">${{ inputs.proxy_name }}</div>
                </div>
                <div style="flex: 1; padding: 12px; background: white; border: 1px solid #e1e4e8; border-radius: 6px;">
                  <div style="font-size: 12px; color: #586069;">REVISION</div>
                  <div style="font-size: 16px; font-weight: 600; color: #24292e; margin-top: 4px;">${{ needs.Prepare_and_Upload.outputs.latest_revision }}</div>
                </div>
                <div style="flex: 1; padding: 12px; background: white; border: 1px solid #e1e4e8; border-radius: 6px;">
                  <div style="font-size: 12px; color: #586069;">GROUP</div>
                  <div style="font-size: 16px; font-weight: 600; color: #24292e; margin-top: 4px;">${{ inputs.environment_group }}</div>
                </div>
              </div>
            </div>

            <!-- Environment Status Section -->
            <div style="margin: 24px 0;">
              <h2 style="margin: 0 0 16px; font-size: 20px; color: #24292e;">
                🌐 Environment Status
              </h2>
              $(for env in $(echo ${{ inputs.environment_type }} | tr ',' ' '); do
                if [ "${{ inputs.environment_group }}" == "default" ]; then
                  ENV_NAME="${env}"
                else
                  ENV_NAME="${{ inputs.environment_group }}-${env}"
                fi
                if [ "${{ needs.Deploy_to_Environment.result }}" == "success" ]; then
                  echo "<div style=\"margin: 8px 0; padding: 12px 16px; background-color: #f0fff4; border: 1px solid #34d058; border-radius: 6px; display: flex; justify-content: space-between; align-items: center;\">"
                  echo "<div style=\"font-size: 14px; color: #24292e;\">${ENV_NAME}</div>"
                  echo "<div style=\"display: flex; align-items: center; gap: 8px;\">"
                  echo "<span style=\"width: 8px; height: 8px; background-color: #28a745; border-radius: 50%;\"></span>"
                  echo "<span style=\"font-size: 12px; color: #28a745; font-weight: 600;\">ACTIVE</span>"
                  echo "</div>"
                  echo "</div>"
                else
                  echo "<div style=\"margin: 8px 0; padding: 12px 16px; background-color: #fff5f5; border: 1px solid #d73a49; border-radius: 6px; display: flex; justify-content: space-between; align-items: center;\">"
                  echo "<div style=\"font-size: 14px; color: #24292e;\">${ENV_NAME}</div>"
                  echo "<div style=\"display: flex; align-items: center; gap: 8px;\">"
                  echo "<span style=\"width: 8px; height: 8px; background-color: #d73a49; border-radius: 50%;\"></span>"
                  echo "<span style=\"font-size: 12px; color: #d73a49; font-weight: 600;\">INACTIVE</span>"
                  echo "</div>"
                  echo "</div>"
                fi
              done)
            </div>

            <!-- Pipeline Results Section -->
            <div style="margin: 24px 0;">
              <h2 style="margin: 0 0 16px; font-size: 20px; color: #24292e;">
                📊 Pipeline Results
              </h2>
              <div style="border: 1px solid #e1e4e8; border-radius: 6px; overflow: hidden;">
                <!-- Authentication -->
                <div style="padding: 12px 16px; display: flex; justify-content: space-between; align-items: center; background-color: $([ "${{ needs.GCP_Auth.result }}" == "success" ] && echo "#f0fff4" || echo "#fff5f5"); border-bottom: 1px solid #e1e4e8;">
                  <div>
                    <div style="font-size: 14px; color: #24292e;">🔐 AUTHENTICATION</div>
                    <div style="font-size: 12px; color: #586069; margin-top: 2px;">Workload Identity</div>
                  </div>
                  <div style="display: flex; align-items: center; gap: 8px;">
                    $([ "${{ needs.GCP_Auth.result }}" == "success" ] && echo "<span style=\"color: #28a745; font-weight: 600;\">Successful</span>" || echo "<span style=\"color: #d73a49; font-weight: 600;\">Failed</span>")
                  </div>
                </div>

                <!-- Code Quality -->
                <div style="padding: 12px 16px; display: flex; justify-content: space-between; align-items: center; background-color: $([ "${{ needs.ApigeeLint.result }}" == "success" ] && echo "#f0fff4" || echo "#fff5f5"); border-bottom: 1px solid #e1e4e8;">
                  <div>
                    <div style="font-size: 14px; color: #24292e;">🔍 CODE QUALITY</div>
                    <div style="font-size: 12px; color: #586069; margin-top: 2px;">API Validation</div>
                  </div>
                  <div style="display: flex; align-items: center; gap: 8px;">
                    $([ "${{ needs.ApigeeLint.result }}" == "success" ] && echo "<span style=\"color: #28a745; font-weight: 600;\">Passed</span>" || echo "<span style=\"color: #d73a49; font-weight: 600;\">Failed</span>")
                  </div>
                </div>

                <!-- Bundle -->
                <div style="padding: 12px 16px; display: flex; justify-content: space-between; align-items: center; background-color: $([ "${{ needs.Prepare_and_Upload.result }}" == "success" ] && echo "#f0fff4" || echo "#fff5f5"); border-bottom: 1px solid #e1e4e8;">
                  <div>
                    <div style="font-size: 14px; color: #24292e;">📦 BUNDLE</div>
                    <div style="font-size: 12px; color: #586069; margin-top: 2px;">Rev: ${{ needs.Prepare_and_Upload.outputs.latest_revision }}</div>
                  </div>
                  <div style="display: flex; align-items: center; gap: 8px;">
                    $([ "${{ needs.Prepare_and_Upload.result }}" == "success" ] && echo "<span style=\"color: #28a745; font-weight: 600;\">Uploaded</span>" || echo "<span style=\"color: #d73a49; font-weight: 600;\">Failed</span>")
                  </div>
                </div>

                <!-- Deployment -->
                <div style="padding: 12px 16px; display: flex; justify-content: space-between; align-items: center; background-color: $([ "${{ needs.Deploy_to_Environment.result }}" == "success" ] && echo "#f0fff4" || echo "#fff5f5");">
                  <div>
                    <div style="font-size: 14px; color: #24292e;">🚀 DEPLOYMENT</div>
                    <div style="font-size: 12px; color: #586069; margin-top: 2px;">All Environments</div>
                  </div>
                  <div style="display: flex; align-items: center; gap: 8px;">
                    $([ "${{ needs.Deploy_to_Environment.result }}" == "success" ] && echo "<span style=\"color: #28a745; font-weight: 600;\">Deployed</span>" || echo "<span style=\"color: #d73a49; font-weight: 600;\">Failed</span>")
                  </div>
                </div>
              </div>
            </div>

            <!-- Final Status Section -->
            <div style="margin: 24px 0;">
              <h2 style="margin: 0 0 16px; font-size: 20px; color: #24292e;">
                📈 Final Status
              </h2>
              <div style="text-align: center;">
                $(if [ "${{ needs.Deploy_to_Environment.result }}" == "success" ] && \
                   [ "${{ needs.GCP_Auth.result }}" == "success" ] && \
                   [ "${{ needs.ApigeeLint.result }}" == "success" ] && \
                   [ "${{ needs.Prepare_and_Upload.result }}" == "success" ]; then
                  echo "<div style=\"display: inline-block; padding: 16px 32px; background: linear-gradient(135deg, #28a745 0%, #34d058 100%); border-radius: 8px; box-shadow: 0 2px 4px rgba(40, 167, 69, 0.2);\">"
                  echo "<span style=\"font-size: 16px; color: white; font-weight: 600;\">✨ Deployment Successfully Completed</span>"
                  echo "</div>"
                else
                  echo "<div style=\"display: inline-block; padding: 16px 32px; background: linear-gradient(135deg, #d73a49 0%, #cb2431 100%); border-radius: 8px; box-shadow: 0 2px 4px rgba(215, 58, 73, 0.2);\">"
                  echo "<span style=\"font-size: 16px; color: white; font-weight: 600;\">⚠️ Deployment Issues Detected</span>"
                  echo "</div>"
                fi)
              </div>
            </div>

            <!-- Footer -->
            <div style="margin-top: 24px; padding-top: 16px; border-top: 1px solid #e1e4e8; text-align: center;">
              <span style="font-size: 12px; color: #586069;">Run ID: </span>
              <code style="font-size: 12px; background-color: #f6f8fa; padding: 2px 6px; border-radius: 4px;">${{ github.run_id }}</code>
            </div>
          </div>
          EOF

