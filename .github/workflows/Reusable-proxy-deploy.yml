name: Apigee Proxy Deployment [Reusable Workflow]

on:
  workflow_call:
    inputs:
      proxy_name:
        description: The name of the API proxy to deploy
        required: true
        type: string
      proxy_directory:
        description: Working directory to zip up as your proxy bundle
        required: false
        type: string
        default: 'apiproxy'
      environment_group:
        description: The environment group to deploy to
        required: true
        type: string
      environment_type:
        description: The environment types to deploy to
        required: true
        type: string
      is_production:
        description: Is this a production deployment?
        required: true
        type: boolean
      non_prod_revision:
        description: Revision number from successful non-prod deployment (required for production)
        required: false
        type: string
      runner:
        description: The runner to use for the job
        required: false
        default: 'ubuntu-latest'
        type: string
    outputs:
      revision:
        description: "The deployed revision number"
        value: ${{ jobs.Build_And_Upload_Proxy.outputs.latest_revision }}
    secrets:
      APIGEE_ORG:
        required: true
      APIGEE_ORG_PROD:
        required: true
      WORKLOAD_IDENTITY_PROVIDER:
        required: true
      WORKLOAD_IDENTITY_PROVIDER_PROD:
        required: true
      SERVICE_ACCOUNT:
        required: true
      SERVICE_ACCOUNT_PROD:
        required: true

permissions:
  contents: read
  id-token: write

jobs:
  Initialize_Environment_Configuration:
    runs-on: ${{ inputs.runner }}
    outputs:
      environments: ${{ steps.set-envs.outputs.environments }}
    steps:
      - name: Set Environment List
        id: set-envs
        run: |
          generate_env_list() {
            local group="$1"
            local types="$2"
            local envs="["
            
            IFS=',' read -ra ENV_TYPES <<< "$types"
            local first=true
            
            for type in "${ENV_TYPES[@]}"; do
              if [ "$first" = true ]; then
                first=false
              else
                envs="${envs},"
              fi
              
              if [ "$group" = "default" ]; then
                envs="${envs}\"${type}\""
              else
                envs="${envs}\"${group}-${type}\""
              fi
            done
            
            envs="${envs}]"
            echo "$envs"
          }
          
          ENVIRONMENTS=$(generate_env_list "${{ inputs.environment_group }}" "${{ inputs.environment_type }}")
          echo "environments=$ENVIRONMENTS" >> $GITHUB_OUTPUT

  Setup_GCP_Authentication:
    runs-on: ${{ inputs.runner }}
    outputs:
      access_token: ${{ steps.auth.outputs.access_token }}
    steps:
      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ inputs.is_production == true && secrets.WORKLOAD_IDENTITY_PROVIDER_PROD || secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ inputs.is_production == true && secrets.SERVICE_ACCOUNT_PROD || secrets.SERVICE_ACCOUNT }}
          token_format: 'access_token'

  Validate_API_Proxy:
    needs: [Setup_GCP_Authentication]
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install apigeelint
        run: |
          npm install -g apigeelint
          if [ $? -ne 0 ]; then
            echo "Failed to install apigeelint"
            exit 1
          fi

      - name: Run apigeelint
        run: |
          apigeelint -s ${{ inputs.proxy_directory }} -f table.js
          if [ $? -ne 0 ]; then
            echo "API proxy validation failed"
            exit 1
          fi

  Build_And_Upload_Proxy:
    needs: [Setup_GCP_Authentication, Validate_API_Proxy]
    runs-on: ${{ inputs.runner }}
    outputs:
      latest_revision: ${{ steps.upload.outputs.revision }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install apigeecli
        id: install-apigeecli
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: |
            mkdir -p $HOME/.apigeecli/bin
            curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
            echo "$HOME/.apigeecli/bin" >> $GITHUB_PATH

      - name: Create API bundle
        id: create-bundle
        run: |
          create_bundle() {
            local source_dir="$1"
            echo "Creating bundle from: $source_dir"
            mkdir -p temp_bundle
            cp -r "$source_dir" temp_bundle/apiproxy
            cd temp_bundle
            zip -r ../proxy.zip apiproxy
            cd ..
            echo "Zip contents:"
            unzip -l proxy.zip
            rm -rf temp_bundle
          }
          
          if [ -d "${{ inputs.proxy_directory }}" ]; then
            create_bundle "${{ inputs.proxy_directory }}"
          elif [ -d "src/${{ inputs.proxy_directory }}" ]; then
            create_bundle "src/${{ inputs.proxy_directory }}"
          else
            echo "Error: Could not find apiproxy directory"
            exit 1
          fi

      - name: Get GCP Token
        id: get-token
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ inputs.is_production == true && secrets.WORKLOAD_IDENTITY_PROVIDER_PROD || secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ inputs.is_production == true && secrets.SERVICE_ACCOUNT_PROD || secrets.SERVICE_ACCOUNT }}
          token_format: 'access_token'

      - name: Upload and Get Revision
        id: upload
        env:
          APIGEE_ORG: ${{ inputs.is_production == true && secrets.APIGEE_ORG_PROD || secrets.APIGEE_ORG }}
          PROXY_NAME: ${{ inputs.proxy_name }}
          ACCESS_TOKEN: ${{ steps.get-token.outputs.access_token }}
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: |
            echo "Using organization: $APIGEE_ORG"
            echo "Using proxy name: $PROXY_NAME"
            echo "Token available: ${{ steps.get-token.outputs.access_token != '' }}"
            
            IMPORT_OUTPUT=$($HOME/.apigeecli/bin/apigeecli apis create bundle \
              -n "$PROXY_NAME" \
              -p proxy.zip \
              --org "$APIGEE_ORG" \
              --token "$ACCESS_TOKEN")
            
            echo "Import output: $IMPORT_OUTPUT"
            
            if [ $? -ne 0 ]; then
              echo "Failed to import API proxy bundle"
              exit 1
            fi
            
            LATEST_REVISION=$(echo "$IMPORT_OUTPUT" | grep -oP '"revision":\s*"\K[^"]+')
            
            if [ -z "$LATEST_REVISION" ]; then
              echo "Failed to get revision number"
              exit 1
            fi
            
            echo "Latest revision: $LATEST_REVISION"
            echo "revision=$LATEST_REVISION" >> $GITHUB_OUTPUT

  Deploy_Proxy_To_Environment:
    needs: [Setup_GCP_Authentication, Build_And_Upload_Proxy]
    if: needs.Setup_GCP_Authentication.result == 'success' && needs.Build_And_Upload_Proxy.result == 'success'
    runs-on: ${{ inputs.runner }}
    outputs:
      deployment_success: ${{ steps.deploy.outputs.success }}
    steps:
      - name: Get GCP Token
        id: get-token
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ inputs.is_production == true && secrets.WORKLOAD_IDENTITY_PROVIDER_PROD || secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ inputs.is_production == true && secrets.SERVICE_ACCOUNT_PROD || secrets.SERVICE_ACCOUNT }}
          token_format: 'access_token'

      - name: Install apigeecli
        id: install-cli
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: |
            mkdir -p $HOME/.apigeecli/bin
            curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
            echo "$HOME/.apigeecli/bin" >> $GITHUB_PATH

      - name: Deploy to Environment
        id: deploy
        uses: nick-invision/retry@v2
        env:
          APIGEE_ORG: ${{ inputs.is_production == true && secrets.APIGEE_ORG_PROD || secrets.APIGEE_ORG }}
          PROXY_NAME: ${{ inputs.proxy_name }}
          ENV_GROUP: ${{ inputs.environment_group }}
          ENV_TYPE: ${{ inputs.environment_type }}
          ACCESS_TOKEN: ${{ steps.get-token.outputs.access_token }}
          REVISION: ${{ needs.Build_And_Upload_Proxy.outputs.latest_revision }}
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: |
            echo "Starting deployment process..."
            echo "Proxy Name: $PROXY_NAME"
            echo "Environment Group: $ENV_GROUP"
            echo "Environment Type(s): $ENV_TYPE"
            echo "Revision: $REVISION"
            echo "Organization: $APIGEE_ORG"
            
            if [ -z "$REVISION" ]; then
              echo "Error: REVISION is empty. Deployment cannot proceed."
              exit 1
            fi
            
            # Function to deploy to a single environment
            deploy_to_env() {
              local deploy_env=$1
              echo "Deploying proxy '$PROXY_NAME' revision '$REVISION' to environment '$deploy_env'"
              
              # Check if proxy is already deployed
              CURRENT_DEPLOYMENT=$($HOME/.apigeecli/bin/apigeecli apis list deployments \
                -o "$APIGEE_ORG" \
                -t "$ACCESS_TOKEN" \
                -n "$PROXY_NAME" \
                -e "$deploy_env" \
                --json)
              
              CURRENT_REV=$(echo "$CURRENT_DEPLOYMENT" | jq -r '.[]?.revision[0]?.name // empty')
              
              if [ "$CURRENT_REV" == "$REVISION" ]; then
                echo "Revision $REVISION is already deployed to $deploy_env"
                return 0
              fi
              
              echo "Deploying revision $REVISION to $deploy_env"
              $HOME/.apigeecli/bin/apigeecli apis deploy \
                -n "$PROXY_NAME" \
                -o "$APIGEE_ORG" \
                -e "$deploy_env" \
                -r "$REVISION" \
                -t "$ACCESS_TOKEN" \
                --ovr \
                --wait
              
              if [ $? -ne 0 ]; then
                echo "Failed to deploy to environment $deploy_env"
                return 1
              fi
              
              echo "Successfully deployed to environment $deploy_env"
              return 0
            }
            
            # Split environment types and deploy to each
            IFS=',' read -ra ENV_TYPES <<< "$ENV_TYPE"
            DEPLOY_SUCCESS=true
            
            for env_type in "${ENV_TYPES[@]}"; do
              # Trim whitespace
              env_type=$(echo "$env_type" | xargs)
              
              if [ "$ENV_GROUP" == "default" ]; then
                DEPLOY_ENV="${env_type}"
              else
                DEPLOY_ENV="${ENV_GROUP}-${env_type}"
              fi
              
              echo "Processing deployment for environment: $DEPLOY_ENV"
              
              # Verify environment exists
              ENV_CHECK=$($HOME/.apigeecli/bin/apigeecli environments list \
                -o "$APIGEE_ORG" \
                -t "$ACCESS_TOKEN" \
                --json)
              
              if [[ ! "$ENV_CHECK" == *"$DEPLOY_ENV"* ]]; then
                echo "Error: Environment $DEPLOY_ENV does not exist in organization"
                DEPLOY_SUCCESS=false
                continue
              fi
              
              # Deploy to environment
              if ! deploy_to_env "$DEPLOY_ENV"; then
                DEPLOY_SUCCESS=false
                echo "Deployment failed for environment $DEPLOY_ENV"
                continue
              fi
              
              # Verify deployment
              VERIFY_DEPLOYMENT=$($HOME/.apigeecli/bin/apigeecli apis list deployments \
                -o "$APIGEE_ORG" \
                -t "$ACCESS_TOKEN" \
                -n "$PROXY_NAME" \
                -e "$DEPLOY_ENV" \
                --json)
              
              DEPLOYED_REV=$(echo "$VERIFY_DEPLOYMENT" | jq -r '.[]?.revision[0]?.name // empty')
              
              if [ "$DEPLOYED_REV" != "$REVISION" ]; then
                echo "Verification failed: Expected revision $REVISION, but found $DEPLOYED_REV in $DEPLOY_ENV"
                DEPLOY_SUCCESS=false
                continue
              fi
              
              echo "Verified deployment of revision $REVISION in environment $DEPLOY_ENV"
            done
            
            if [ "$DEPLOY_SUCCESS" = true ]; then
              echo "success=true" >> $GITHUB_OUTPUT
              echo "All deployments completed successfully"
            else
              echo "success=false" >> $GITHUB_OUTPUT
              echo "One or more deployments failed"
              exit 1
            fi

      - name: Add Deployment Details to Summary
        if: always()
        run: |
          echo "### Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Proxy Name:** ${{ inputs.proxy_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Revision:** ${{ needs.Build_And_Upload_Proxy.outputs.latest_revision }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment Group:** ${{ inputs.environment_group }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment Type:** ${{ inputs.environment_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** $([ "${{ steps.deploy.outputs.success }}" == "true" ] && echo "✅ Success" || echo "❌ Failed")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  Perform_NonProd_Cleanup:
    needs: [Deploy_Proxy_To_Environment]
    if: always() && !inputs.is_production
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Get GCP Token
        id: get-token
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}
          token_format: 'access_token'

      - name: Install apigeecli
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: |
            mkdir -p $HOME/.apigeecli/bin
            curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
            echo "$HOME/.apigeecli/bin" >> $GITHUB_PATH

      - name: Cleanup Old Revisions
        env:
          APIGEE_ORG: ${{ secrets.APIGEE_ORG }}
          PROXY_NAME: ${{ inputs.proxy_name }}
          ACCESS_TOKEN: ${{ steps.get-token.outputs.access_token }}
        run: |
          echo "Starting non-prod revision cleanup"
          
          echo "Getting all revisions for proxy $PROXY_NAME"
          REVS=$($HOME/.apigeecli/bin/apigeecli apis list revisions \
            -o "$APIGEE_ORG" \
            -t "$ACCESS_TOKEN" \
            -n "$PROXY_NAME" \
            --json)
          
          if [ $? -ne 0 ]; then
            echo "Failed to get revisions"
            exit 1
          fi
          
          REVISIONS=($(echo "$REVS" | jq -r '.[] | select(. != null)' | sort -nr))
          TOTAL_REVS=${#REVISIONS[@]}
          KEEP_COUNT=5
          
          echo "Total revisions found: $TOTAL_REVS"
          
          if [ $TOTAL_REVS -gt $KEEP_COUNT ]; then
            DELETE_COUNT=$((TOTAL_REVS - KEEP_COUNT))
            echo "Will delete $DELETE_COUNT old revisions"
            
            for REV in "${REVISIONS[@]:$KEEP_COUNT}"; do
              echo "Processing revision $REV"
              
              DEPLOYED=$($HOME/.apigeecli/bin/apigeecli apis list deployments \
                -o "$APIGEE_ORG" \
                -t "$ACCESS_TOKEN" \
                -n "$PROXY_NAME" \
                --json)
              
              if [[ "$DEPLOYED" == *"$REV"* ]]; then
                echo "Revision $REV is currently deployed, skipping"
                continue
              fi
              
              echo "Deleting revision $REV"
              $HOME/.apigeecli/bin/apigeecli apis delete revision \
                -o "$APIGEE_ORG" \
                -t "$ACCESS_TOKEN" \
                -n "$PROXY_NAME" \
                -r "$REV"
              
              if [ $? -eq 0 ]; then
                echo "Successfully deleted revision $REV"
              else
                echo "Failed to delete revision $REV"
              fi
            done
          else
            echo "No cleanup needed, total revisions ($TOTAL_REVS) <= keep count ($KEEP_COUNT)"
          fi

  Perform_Prod_Cleanup:
    needs: [Deploy_Proxy_To_Environment, Perform_NonProd_Cleanup]
    if: always() && inputs.is_production
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Get GCP Token
        id: get-token
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_PROD }}
          service_account: ${{ secrets.SERVICE_ACCOUNT_PROD }}
          token_format: 'access_token'

      - name: Install apigeecli
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: |
            mkdir -p $HOME/.apigeecli/bin
            curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
            echo "$HOME/.apigeecli/bin" >> $GITHUB_PATH

      - name: Cleanup Old Revisions
        env:
          APIGEE_ORG: ${{ secrets.APIGEE_ORG_PROD }}
          PROXY_NAME: ${{ inputs.proxy_name }}
          ACCESS_TOKEN: ${{ steps.get-token.outputs.access_token }}
        run: |
          echo "Starting production revision cleanup"
          
          echo "Getting all revisions for proxy $PROXY_NAME"
          REVS=$($HOME/.apigeecli/bin/apigeecli apis list revisions \
            -o "$APIGEE_ORG" \
            -t "$ACCESS_TOKEN" \
            -n "$PROXY_NAME" \
            --json)
          
          if [ $? -ne 0 ]; then
            echo "Failed to get revisions"
            exit 1
          fi
          
          REVISIONS=($(echo "$REVS" | jq -r '.[] | select(. != null)' | sort -nr))
          TOTAL_REVS=${#REVISIONS[@]}
          KEEP_COUNT=5
          
          echo "Total revisions found: $TOTAL_REVS"
          
          if [ $TOTAL_REVS -gt $KEEP_COUNT ]; then
            DELETE_COUNT=$((TOTAL_REVS - KEEP_COUNT))
            echo "Will delete $DELETE_COUNT old revisions"
            
            for REV in "${REVISIONS[@]:$KEEP_COUNT}"; do
              echo "Processing revision $REV"
              
              DEPLOYED=$($HOME/.apigeecli/bin/apigeecli apis list deployments \
                -o "$APIGEE_ORG" \
                -t "$ACCESS_TOKEN" \
                -n "$PROXY_NAME" \
                --json)
              
              if [[ "$DEPLOYED" == *"$REV"* ]]; then
                echo "Revision $REV is currently deployed, skipping"
                continue
              fi
              
              echo "Deleting revision $REV"
              $HOME/.apigeecli/bin/apigeecli apis delete revision \
                -o "$APIGEE_ORG" \
                -t "$ACCESS_TOKEN" \
                -n "$PROXY_NAME" \
                -r "$REV"
              
              if [ $? -eq 0 ]; then
                echo "Successfully deleted revision $REV"
              else
                echo "Failed to delete revision $REV"
              fi
            done
          else
            echo "No cleanup needed, total revisions ($TOTAL_REVS) <= keep count ($KEEP_COUNT)"
          fi

  Generate_Deployment_Report:
    needs: [Validate_API_Proxy, Build_And_Upload_Proxy, Deploy_Proxy_To_Environment, Perform_NonProd_Cleanup, Perform_Prod_Cleanup]
    if: always()
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Generate Deployment Summary
        env:
          IS_PRODUCTION: ${{ inputs.is_production }}
          PROXY_NAME: ${{ inputs.proxy_name }}
          REVISION: ${{ needs.Build_And_Upload_Proxy.outputs.latest_revision }}
          ENV_GROUP: ${{ inputs.environment_group }}
          ENV_TYPE: ${{ inputs.environment_type }}
          APIGEE_ORG: ${{ inputs.is_production == true && secrets.APIGEE_ORG_PROD || secrets.APIGEE_ORG }}
        run: |
          echo "# 🎯 Apigee Proxy Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "<sub>**Deployment Time:** $(date '+%d/%m/%Y, %H:%M:%S')</sub>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Identity & Authentication Section
          echo "## 🔐 Identity & Authentication" >> $GITHUB_STEP_SUMMARY
          echo "| Process | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Workload Identity Federation | $([ "${{ needs.Setup_GCP_Authentication.result }}" == "success" ] && echo "✅ Success" || echo "❌ Failed") | Service Account Authentication |" >> $GITHUB_STEP_SUMMARY
          
          # Code Analysis Section
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔍 Code Analysis" >> $GITHUB_STEP_SUMMARY
          echo "| Validation | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|---------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| API Proxy Lint Check | $([ "${{ needs.Validate_API_Proxy.result }}" == "success" ] && echo "✅ Passed" || echo "❌ Failed") | Policy & Structure Validation |" >> $GITHUB_STEP_SUMMARY
          
          # Bundle Operations Section
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📦 Bundle Operations" >> $GITHUB_STEP_SUMMARY
          echo "| Operation | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Proxy Bundle Creation | $([ "${{ needs.Build_And_Upload_Proxy.result }}" == "success" ] && echo "✅ Created" || echo "❌ Failed") | Version: $REVISION |" >> $GITHUB_STEP_SUMMARY
          
          # Deployment Status Section
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🚀 Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | Status | Health Check |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|---------|--------------|" >> $GITHUB_STEP_SUMMARY
          
          # Process each environment
          IFS=',' read -ra ENVS <<< "${{ inputs.environment_type }}"
          for env in "${ENVS[@]}"; do
            if [ "${{ inputs.environment_group }}" == "default" ]; then
              ENV_NAME="${env}"
            else
              ENV_NAME="${{ inputs.environment_group }}-${env}"
            fi
            if [ "${{ needs.Deploy_Proxy_To_Environment.result }}" == "success" ]; then
              echo "| \`${ENV_NAME}\` | ✅ ACTIVE | \`OPTIMAL\` |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| \`${ENV_NAME}\` | ❌ FAILED | \`CRITICAL\` |" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          # Cleanup Status Section
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🧹 Cleanup Operations" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|---------|----------|" >> $GITHUB_STEP_SUMMARY
          if [ "$IS_PRODUCTION" == "true" ]; then
            echo "| Production | $([ "${{ needs.Perform_Prod_Cleanup.result }}" == "success" ] && echo "✅ Completed" || echo "❌ Failed") | Maintaining latest 5 revisions |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Non-Production | $([ "${{ needs.Perform_NonProd_Cleanup.result }}" == "success" ] && echo "✅ Completed" || echo "❌ Failed") | Maintaining latest 5 revisions |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Deployment Information Section
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Deployment Information" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Proxy | \`$PROXY_NAME\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Revision | \`$REVISION\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Organization | \`$APIGEE_ORG\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Group | \`$ENV_GROUP\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Environments | \`$ENV_TYPE\` |" >> $GITHUB_STEP_SUMMARY
          
          # Final Status Section
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📈 Final Status" >> $GITHUB_STEP_SUMMARY
          
          # Determine overall status
          DEPLOY_SUCCESS="${{ needs.Deploy_Proxy_To_Environment.result }}"
          CLEANUP_SUCCESS="false"
          if [ "$IS_PRODUCTION" == "true" ]; then
            CLEANUP_SUCCESS="${{ needs.Perform_Prod_Cleanup.result }}"
            ENV_TYPE="Production"
          else
            CLEANUP_SUCCESS="${{ needs.Perform_NonProd_Cleanup.result }}"
            ENV_TYPE="Non-Production"
          fi
          
          if [ "$DEPLOY_SUCCESS" == "success" ] && [ "$CLEANUP_SUCCESS" == "success" ]; then
            echo "<table><tr><td><h3>✨ Deployment Successfully Completed</h3>" >> $GITHUB_STEP_SUMMARY
            echo "<ul>" >> $GITHUB_STEP_SUMMARY
            echo "<li>Environment: $ENV_TYPE</li>" >> $GITHUB_STEP_SUMMARY
            echo "<li>Authentication: ✅ Verified</li>" >> $GITHUB_STEP_SUMMARY
            echo "<li>Code Quality: ✅ Standards Met</li>" >> $GITHUB_STEP_SUMMARY
            echo "<li>Bundle: ✅ Created & Uploaded</li>" >> $GITHUB_STEP_SUMMARY
            echo "<li>Deployment: ✅ Successfully Deployed</li>" >> $GITHUB_STEP_SUMMARY
            echo "<li>Cleanup: ✅ Completed</li>" >> $GITHUB_STEP_SUMMARY
            echo "</ul></td></tr></table>" >> $GITHUB_STEP_SUMMARY
          else
            echo "<table><tr><td><h3>⚠️ Deployment Issues Detected</h3>" >> $GITHUB_STEP_SUMMARY
            echo "<ul>" >> $GITHUB_STEP_SUMMARY
            echo "<li>Environment: $ENV_TYPE</li>" >> $GITHUB_STEP_SUMMARY
            echo "<li>Authentication: $([ "${{ needs.Setup_GCP_Authentication.result }}" == "success" ] && echo "✅ Passed" || echo "❌ Failed")</li>" >> $GITHUB_STEP_SUMMARY
            echo "<li>Code Quality: $([ "${{ needs.Validate_API_Proxy.result }}" == "success" ] && echo "✅ Passed" || echo "❌ Failed")</li>" >> $GITHUB_STEP_SUMMARY
            echo "<li>Bundle: $([ "${{ needs.Build_And_Upload_Proxy.result }}" == "success" ] && echo "✅ Passed" || echo "❌ Failed")</li>" >> $GITHUB_STEP_SUMMARY
            echo "<li>Deployment: $([ "$DEPLOY_SUCCESS" == "success" ] && echo "✅ Passed" || echo "❌ Failed")</li>" >> $GITHUB_STEP_SUMMARY
            echo "<li>Cleanup: $([ "$CLEANUP_SUCCESS" == "success" ] && echo "✅ Passed" || echo "❌ Failed")</li>" >> $GITHUB_STEP_SUMMARY
            echo "</ul></td></tr></table>" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Footer
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "<sub>Run ID: \`${{ github.run_id }}\` | Generated: $(date '+%H:%M:%S')</sub>" >> $GITHUB_STEP_SUMMARY
