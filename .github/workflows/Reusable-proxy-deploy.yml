name: Apigee Proxy Deployment [Reusable Workflow]

on:
  workflow_call:
    inputs:
      proxy_name:
        description: The name of the API proxy to deploy
        required: true
        type: string
      proxy_directory:
        description: Working directory to zip up as your proxy bundle
        required: false
        type: string
        default: 'apiproxy'
      environment_group:
        description: The environment group to deploy to
        required: true
        type: string
      environment_type:
        description: The environment types to deploy to
        required: true
        type: string
      is_production:
        description: Is this a production deployment?
        required: true
        type: boolean
      non_prod_revision:
        description: Revision number from successful non-prod deployment (required for production)
        required: false
        type: string
      runner:
        description: The runner to use for the job
        required: false
        default: 'ubuntu-latest'
        type: string
    outputs:
      revision:
        description: "The deployed revision number"
        value: ${{ jobs.Build_And_Upload_Proxy.outputs.latest_revision }}
    secrets:
      APIGEE_ORG:
        required: true
      APIGEE_ORG_PROD:
        required: true
      WORKLOAD_IDENTITY_PROVIDER:
        required: true
      WORKLOAD_IDENTITY_PROVIDER_PROD:
        required: true
      SERVICE_ACCOUNT:
        required: true
      SERVICE_ACCOUNT_PROD:
        required: true

permissions:
  contents: read
  id-token: write

jobs:
  Initialize_Environment_Configuration:
    runs-on: ${{ inputs.runner }}
    outputs:
      environments: ${{ steps.set-envs.outputs.environments }}
    steps:
      - name: Set Environment List
        id: set-envs
        run: |
          generate_env_list() {
            local group="$1"
            local types="$2"
            local envs="["
            
            IFS=',' read -ra ENV_TYPES <<< "$types"
            local first=true
            
            for type in "${ENV_TYPES[@]}"; do
              if [ "$first" = true ]; then
                first=false
              else
                envs="${envs},"
              fi
              
              if [ "$group" = "default" ]; then
                envs="${envs}\"${type}\""
              else
                envs="${envs}\"${group}-${type}\""
              fi
            done
            
            envs="${envs}]"
            echo "$envs"
          }
          
          ENVIRONMENTS=$(generate_env_list "${{ inputs.environment_group }}" "${{ inputs.environment_type }}")
          echo "environments=$ENVIRONMENTS" >> $GITHUB_OUTPUT

  Setup_GCP_Authentication:
    runs-on: ${{ inputs.runner }}
    outputs:
      access_token: ${{ steps.auth.outputs.access_token }}
    steps:
      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ inputs.is_production == true && secrets.WORKLOAD_IDENTITY_PROVIDER_PROD || secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ inputs.is_production == true && secrets.SERVICE_ACCOUNT_PROD || secrets.SERVICE_ACCOUNT }}
          token_format: 'access_token'

  Validate_API_Proxy:
    needs: [Setup_GCP_Authentication]
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install apigeelint
        run: |
          npm install -g apigeelint
          if [ $? -ne 0 ]; then
            echo "Failed to install apigeelint"
            exit 1
          fi

      - name: Run apigeelint
        run: |
          apigeelint -s ${{ inputs.proxy_directory }} -f table.js
          if [ $? -ne 0 ]; then
            echo "API proxy validation failed"
            exit 1
          fi

  Build_And_Upload_Proxy:
    needs: [Setup_GCP_Authentication, Validate_API_Proxy]
    runs-on: ${{ inputs.runner }}
    outputs:
      latest_revision: ${{ steps.upload.outputs.revision }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install apigeecli
        id: install-apigeecli
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: |
            mkdir -p $HOME/.apigeecli/bin
            curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
            echo "$HOME/.apigeecli/bin" >> $GITHUB_PATH

      - name: Create API bundle
        id: create-bundle
        run: |
          create_bundle() {
            local source_dir="$1"
            echo "Creating bundle from: $source_dir"
            mkdir -p temp_bundle
            cp -r "$source_dir" temp_bundle/apiproxy
            cd temp_bundle
            zip -r ../proxy.zip apiproxy
            cd ..
            echo "Zip contents:"
            unzip -l proxy.zip
            rm -rf temp_bundle
          }
          
          if [ -d "${{ inputs.proxy_directory }}" ]; then
            create_bundle "${{ inputs.proxy_directory }}"
          elif [ -d "src/${{ inputs.proxy_directory }}" ]; then
            create_bundle "src/${{ inputs.proxy_directory }}"
          else
            echo "Error: Could not find apiproxy directory"
            exit 1
          fi

      - name: Get GCP Token
        id: get-token
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ inputs.is_production == true && secrets.WORKLOAD_IDENTITY_PROVIDER_PROD || secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ inputs.is_production == true && secrets.SERVICE_ACCOUNT_PROD || secrets.SERVICE_ACCOUNT }}
          token_format: 'access_token'

      - name: Upload and Get Revision
        id: upload
        env:
          APIGEE_ORG: ${{ inputs.is_production == true && secrets.APIGEE_ORG_PROD || secrets.APIGEE_ORG }}
          PROXY_NAME: ${{ inputs.proxy_name }}
          ACCESS_TOKEN: ${{ steps.get-token.outputs.access_token }}
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: |
            echo "Using organization: $APIGEE_ORG"
            echo "Using proxy name: $PROXY_NAME"
            echo "Token available: ${{ steps.get-token.outputs.access_token != '' }}"
            
            IMPORT_OUTPUT=$($HOME/.apigeecli/bin/apigeecli apis create bundle \
              -n "$PROXY_NAME" \
              -p proxy.zip \
              --org "$APIGEE_ORG" \
              --token "$ACCESS_TOKEN")
            
            echo "Import output: $IMPORT_OUTPUT"
            
            if [ $? -ne 0 ]; then
              echo "Failed to import API proxy bundle"
              exit 1
            fi
            
            LATEST_REVISION=$(echo "$IMPORT_OUTPUT" | grep -oP '"revision":\s*"\K[^"]+')
            
            if [ -z "$LATEST_REVISION" ]; then
              echo "Failed to get revision number"
              exit 1
            fi
            
            echo "Latest revision: $LATEST_REVISION"
            echo "revision=$LATEST_REVISION" >> $GITHUB_OUTPUT

  Deploy_Proxy_To_Environment:
    needs: [Initialize_Environment_Configuration, Setup_GCP_Authentication, Build_And_Upload_Proxy]
    strategy:
      matrix:
        environment: ${{ fromJSON(needs.Initialize_Environment_Configuration.outputs.environments) }}
      fail-fast: false
      max-parallel: 1
    runs-on: ${{ inputs.runner }}
    environment: ${{ matrix.environment }}
    timeout-minutes: 30
    steps:
      - name: Install apigeecli
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: |
            mkdir -p $HOME/.apigeecli/bin
            curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
            echo "$HOME/.apigeecli/bin" >> $GITHUB_PATH

      - name: Get GCP Token
        id: get-token
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ inputs.is_production == true && secrets.WORKLOAD_IDENTITY_PROVIDER_PROD || secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ inputs.is_production == true && secrets.SERVICE_ACCOUNT_PROD || secrets.SERVICE_ACCOUNT }}
          token_format: 'access_token'

      - name: Deploy to Environment
        uses: nick-invision/retry@v2
        env:
          APIGEE_ORG: ${{ inputs.is_production == true && secrets.APIGEE_ORG_PROD || secrets.APIGEE_ORG }}
          APIGEE_ENV: ${{ matrix.environment }}
          PROXY_NAME: ${{ inputs.proxy_name }}
          ACCESS_TOKEN: ${{ steps.get-token.outputs.access_token }}
          REVISION: ${{ needs.Build_And_Upload_Proxy.outputs.latest_revision }}
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: |
            if [ -z "$REVISION" ]; then
              echo "Error: REVISION is empty. Deployment cannot proceed."
              exit 1
            fi
            
            echo "Deploying proxy '$PROXY_NAME' revision '$REVISION' to environment '$APIGEE_ENV'"
            echo "Using organization: $APIGEE_ORG"
            echo "Token available: ${{ steps.get-token.outputs.access_token != '' }}"
            
            $HOME/.apigeecli/bin/apigeecli apis deploy \
              --name "$PROXY_NAME" \
              --org "$APIGEE_ORG" \
              --env "$APIGEE_ENV" \
              --rev "$REVISION" \
              --token "$ACCESS_TOKEN" \
              --ovr \
              --wait

  Perform_Revision_Cleanup:
    needs: [Deploy_Proxy_To_Environment, Initialize_Environment_Configuration]
    if: always()
    runs-on: ${{ inputs.runner }}
    strategy:
      matrix:
        environment: ${{ fromJSON(needs.Initialize_Environment_Configuration.outputs.environments) }}
      fail-fast: false
    steps:
      - name: Get GCP Token
        id: get-token
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ inputs.is_production == true && secrets.WORKLOAD_IDENTITY_PROVIDER_PROD || secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ inputs.is_production == true && secrets.SERVICE_ACCOUNT_PROD || secrets.SERVICE_ACCOUNT }}
          token_format: 'access_token'

      - name: Install apigeecli
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: |
            mkdir -p $HOME/.apigeecli/bin
            curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
            echo "$HOME/.apigeecli/bin" >> $GITHUB_PATH

      - name: Cleanup Revisions for Environment
        uses: nick-invision/retry@v2
        env:
          APIGEE_ORG: ${{ inputs.is_production == true && secrets.APIGEE_ORG_PROD || secrets.APIGEE_ORG }}
          PROXY_NAME: ${{ inputs.proxy_name }}
          ENVIRONMENT: ${{ matrix.environment }}
          ACCESS_TOKEN: ${{ steps.get-token.outputs.access_token }}
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: |
            echo "Starting revision cleanup for environment: $ENVIRONMENT"
            
            # Get deployments for this environment using corrected apigeecli syntax
            echo "Fetching deployments for environment $ENVIRONMENT"
            DEPLOYMENTS=$($HOME/.apigeecli/bin/apigeecli apis list \
              -o "$APIGEE_ORG" \
              -t "$ACCESS_TOKEN" \
              deployments "$PROXY_NAME" \
              -e "$ENVIRONMENT")
            
            if [ $? -ne 0 ]; then
              echo "Failed to fetch deployments for environment $ENVIRONMENT"
              exit 1
            fi
            
            # Extract and sort revision numbers from deployments
            REVISIONS=($(echo "$DEPLOYMENTS" | grep -o '"revision": "[^"]*"' | cut -d'"' -f4 | sort -nr))
            
            echo "Found ${#REVISIONS[@]} deployed revisions in $ENVIRONMENT"
            echo "Deployed revisions: ${REVISIONS[*]}"
            
            KEEP_COUNT=5
            CURRENT_COUNT=${#REVISIONS[@]}
            
            if [ "$CURRENT_COUNT" -gt "$KEEP_COUNT" ]; then
              # Calculate how many to remove
              REMOVE_COUNT=$((CURRENT_COUNT - KEEP_COUNT))
              echo "Will undeploy $REMOVE_COUNT older revisions"
              
              # Get the revisions to remove (oldest first)
              for ((i=CURRENT_COUNT-1; i>=KEEP_COUNT; i--)); do
                OLD_REV="${REVISIONS[$i]}"
                echo "Undeploying revision $OLD_REV from environment $ENVIRONMENT"
                
                $HOME/.apigeecli/bin/apigeecli apis undeploy \
                  -n "$PROXY_NAME" \
                  -o "$APIGEE_ORG" \
                  -e "$ENVIRONMENT" \
                  -v "$OLD_REV" \
                  -t "$ACCESS_TOKEN"
                
                if [ $? -ne 0 ]; then
                  echo "Failed to undeploy revision $OLD_REV from $ENVIRONMENT"
                  exit 1
                fi
                
                echo "Successfully undeployed revision $OLD_REV"
                
                # Delete the undeployed revision
                echo "Deleting revision $OLD_REV"
                $HOME/.apigeecli/bin/apigeecli apis delete \
                  -n "$PROXY_NAME" \
                  -o "$APIGEE_ORG" \
                  -v "$OLD_REV" \
                  -t "$ACCESS_TOKEN"
                
                if [ $? -ne 0 ]; then
                  echo "Failed to delete revision $OLD_REV"
                  exit 1
                fi
                
                echo "Successfully deleted revision $OLD_REV"
              done
              
              echo "Cleanup completed for environment $ENVIRONMENT"
            else
              echo "No cleanup needed. Current revision count ($CURRENT_COUNT) <= keep count ($KEEP_COUNT)"
            fi

      - name: Add to Deployment Summary
        run: |
          echo "### Environment: ${{ matrix.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- Cleanup Status: ✅ Completed" >> $GITHUB_STEP_SUMMARY
          echo "- Maintained: Last 5 revisions" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  Generate_Deployment_Report:
    needs: [Validate_API_Proxy, Build_And_Upload_Proxy, Deploy_Proxy_To_Environment, Perform_Revision_Cleanup, Setup_GCP_Authentication]
    if: always()
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Generate Deployment Summary
        run: |
          echo "# 🎯 Apigee Proxy Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "<sub>**Deployment Time:** $(date '+%d/%m/%Y, %H:%M:%S')</sub>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 🔐 Identity & Authentication" >> $GITHUB_STEP_SUMMARY
          echo "| Process | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Workload Identity Federation | $([ "${{ needs.Setup_GCP_Authentication.result }}" == "success" ] && echo "✅ Verified" || echo "❌ Failed") | Service Account Authentication |" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔍 Code Analysis" >> $GITHUB_STEP_SUMMARY
          echo "| Validation | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|---------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| API Proxy Lint Check | $([ "${{ needs.Validate_API_Proxy.result }}" == "success" ] && echo "✅ Passed" || echo "❌ Failed") | Policy & Structure Validation |" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📦 Bundle Operations" >> $GITHUB_STEP_SUMMARY
          echo "| Operation | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Proxy Bundle Creation | $([ "${{ needs.Build_And_Upload_Proxy.result }}" == "success" ] && echo "✅ Created" || echo "❌ Failed") | Version: ${{ needs.Build_And_Upload_Proxy.outputs.latest_revision }} |" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🚀 Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | Status | Health Check |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|---------|--------------|" >> $GITHUB_STEP_SUMMARY
          
          IFS=',' read -ra ENVS <<< "${{ inputs.environment_type }}"
          for env in "${ENVS[@]}"; do
            if [ "${{ inputs.environment_group }}" == "default" ]; then
              ENV_NAME="${env}"
            else
              ENV_NAME="${{ inputs.environment_group }}-${env}"
            fi
            if [ "${{ needs.Deploy_Proxy_To_Environment.result }}" == "success" ]; then
              echo "| \`${ENV_NAME}\` | ✅ ACTIVE | \`OPTIMAL\` |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| \`${ENV_NAME}\` | ❌ FAILED | \`CRITICAL\` |" >> $GITHUB_STEP_SUMMARY
            fi
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Deployment Information" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Proxy | \`${{ inputs.proxy_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Revision | \`${{ needs.Build_And_Upload_Proxy.outputs.latest_revision }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Organization | \`${{ inputs.is_production == true && secrets.APIGEE_ORG_PROD || secrets.APIGEE_ORG }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Group | \`${{ inputs.environment_group }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Environments | \`${{ inputs.environment_type }}\` |" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🧹 Cleanup Operations" >> $GITHUB_STEP_SUMMARY
          echo "| Operation | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Old Revision Cleanup | $([ "${{ needs.Perform_Revision_Cleanup.result }}" == "success" ] && echo "✅ Completed" || echo "❌ Failed") | Keeping Latest 5 Revisions |" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "<sub>Run ID: \`${{ github.run_id }}\` | Generated: $(date '+%H:%M:%S')</sub>" >> $GITHUB_STEP_SUMMARY
