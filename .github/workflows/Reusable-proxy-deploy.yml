name: Apigee Proxy Deployment [Reusable Workflow]

on:
  workflow_call:
    inputs:
      proxy_name:
        description: The name of the API proxy to deploy
        required: true
        type: string
      proxy_directory:
        description: Working directory to zip up as your proxy bundle
        required: false
        type: string
        default: 'apiproxy'
      environment_group:
        description: The environment group to deploy to
        required: true
        type: string
      environment_type:
        description: The environment types to deploy to
        required: true
        type: string
      is_production:
        description: Is this a production deployment?
        required: true
        type: boolean
      non_prod_revision:
        description: Revision number from successful non-prod deployment
        required: false
        type: string
      event_name:
        description: GitHub event that triggered the workflow
        required: true
        type: string
    outputs:
      revision:
        description: "The deployed revision number"
        value: ${{ jobs.Build_And_Upload_Proxy.outputs.latest_revision }}
      deployment_status:
        description: "Status of the deployment"
        value: ${{ jobs.validate_deployment_inputs.outputs.deployment_status }}
    secrets:
      inherit: true

permissions:
  contents: read
  id-token: write
  issues: write

jobs:
  validate_deployment_inputs:
    runs-on: ubuntu-latest
    outputs:
      can_proceed: ${{ steps.validate.outputs.can_proceed }}
      deployment_type: ${{ steps.validate.outputs.deployment_type }}
      deployment_status: ${{ steps.validate.outputs.deployment_status }}
    steps:
      - name: Validate Environment Configuration
        id: validate
        run: |
          echo "Validating deployment configuration..."
          
          # Set default values
          PROCEED=true
          DEPLOY_TYPE="non-prod"
          STATUS="pending"
          
          # Validate production deployment requirements
          if [[ "${{ inputs.environment_group }}" == "prod" || "${{ inputs.environment_type }}" == "prod" ]]; then
            if [[ "${{ inputs.is_production }}" != "true" ]]; then
              echo "‚ùå Error: Production environment selected but is_production flag is not set"
              PROCEED=false
              STATUS="failed"
            elif [[ -z "${{ inputs.non_prod_revision }}" ]]; then
              echo "‚ùå Error: Production deployment requires non_prod_revision"
              PROCEED=false
              STATUS="failed"
            else
              DEPLOY_TYPE="prod"
            fi
          fi
          
          # Validate environment group
          case "${{ inputs.environment_group }}" in
            "default"|"edd"|"homerun"|"wow"|"wpay"|"prod")
              echo "‚úì Valid environment group"
              ;;
            *)
              echo "‚ùå Error: Invalid environment group"
              PROCEED=false
              STATUS="failed"
              ;;
          esac
          
          # Validate environment types
          IFS=',' read -ra ENV_TYPES <<< "${{ inputs.environment_type }}"
          for env_type in "${ENV_TYPES[@]}"; do
            case "$env_type" in
              "dev"|"test-env"|"test"|"uat"|"prod")
                echo "‚úì Valid environment type: $env_type"
                ;;
              *)
                echo "‚ùå Error: Invalid environment type: $env_type"
                PROCEED=false
                STATUS="failed"
                ;;
            esac
          done
          
          # Additional validations for proxy directory
          if [[ ! -z "${{ inputs.proxy_directory }}" ]]; then
            if [[ ! "${{ inputs.proxy_directory }}" =~ ^[a-zA-Z0-9_/-]+$ ]]; then
              echo "‚ùå Error: Invalid proxy directory path"
              PROCEED=false
              STATUS="failed"
            fi
          fi
          
          if [[ "$PROCEED" == "true" ]]; then
            STATUS="validated"
          fi
          
          # Set outputs
          echo "can_proceed=$PROCEED" >> $GITHUB_OUTPUT
          echo "deployment_type=$DEPLOY_TYPE" >> $GITHUB_OUTPUT
          echo "deployment_status=$STATUS" >> $GITHUB_OUTPUT
          
          # Add validation summary
          echo "### üîç Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Deployment Type | \`$DEPLOY_TYPE\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Can Proceed | \`$PROCEED\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Environment Group | \`${{ inputs.environment_group }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Environment Type(s) | \`${{ inputs.environment_type }}\` |" >> $GITHUB_STEP_SUMMARY
          if [[ "$DEPLOY_TYPE" == "prod" ]]; then
            echo "| Production Revision | \`${{ inputs.non_prod_revision }}\` |" >> $GITHUB_STEP_SUMMARY
          fi

  Setup_GCP_Authentication:
    needs: validate_deployment_inputs
    if: needs.validate_deployment_inputs.outputs.can_proceed == 'true'
    runs-on: ubuntu-latest
    outputs:
      access_token: ${{ steps.auth.outputs.access_token }}
    steps:
      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ inputs.is_production == true && secrets.WORKLOAD_IDENTITY_PROVIDER_PROD || secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ inputs.is_production == true && secrets.SERVICE_ACCOUNT_PROD || secrets.SERVICE_ACCOUNT }}
          token_format: 'access_token'

  Validate_API_Proxy:
    needs: [validate_deployment_inputs, Setup_GCP_Authentication]
    if: needs.validate_deployment_inputs.outputs.can_proceed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install apigeelint
        run: |
          npm install -g apigeelint
          if [ $? -ne 0 ]; then
            echo "Failed to install apigeelint"
            exit 1
          fi

      - name: Run apigeelint
        run: |
          apigeelint -s ${{ inputs.proxy_directory }} -f table.js
          if [ $? -ne 0 ]; then
            echo "API proxy validation failed"
            exit 1
          fi
          
  Build_And_Upload_Proxy:
    needs: [validate_deployment_inputs, Setup_GCP_Authentication, Validate_API_Proxy]
    if: needs.validate_deployment_inputs.outputs.can_proceed == 'true'
    runs-on: ubuntu-latest
    outputs:
      latest_revision: ${{ steps.upload.outputs.revision }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get GCP Token
        id: get-token
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ inputs.is_production == true && secrets.WORKLOAD_IDENTITY_PROVIDER_PROD || secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ inputs.is_production == true && secrets.SERVICE_ACCOUNT_PROD || secrets.SERVICE_ACCOUNT }}
          token_format: 'access_token'

      - name: Install apigeecli
        id: install-apigeecli
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: |
            mkdir -p $HOME/.apigeecli/bin
            curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
            echo "$HOME/.apigeecli/bin" >> $GITHUB_PATH

      - name: Create API bundle
        id: create-bundle
        run: |
          create_bundle() {
            local source_dir="$1"
            echo "Creating bundle from: $source_dir"
            mkdir -p temp_bundle
            cp -r "$source_dir" temp_bundle/apiproxy
            cd temp_bundle
            zip -r ../proxy.zip apiproxy
            cd ..
            echo "Zip contents:"
            unzip -l proxy.zip
            rm -rf temp_bundle
          }
          
          if [ -d "${{ inputs.proxy_directory }}" ]; then
            create_bundle "${{ inputs.proxy_directory }}"
          elif [ -d "src/${{ inputs.proxy_directory }}" ]; then
            create_bundle "src/${{ inputs.proxy_directory }}"
          else
            echo "Error: Could not find apiproxy directory"
            exit 1
          fi

      - name: Upload and Get Revision
        id: upload
        env:
          APIGEE_ORG: ${{ inputs.is_production == true && secrets.APIGEE_ORG_PROD || secrets.APIGEE_ORG }}
          PROXY_NAME: ${{ inputs.proxy_name }}
          ACCESS_TOKEN: ${{ steps.get-token.outputs.access_token }}
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: |
            echo "Using organization: $APIGEE_ORG"
            echo "Using proxy name: $PROXY_NAME"
            echo "Token available: ${{ steps.get-token.outputs.access_token != '' }}"
            
            IMPORT_OUTPUT=$($HOME/.apigeecli/bin/apigeecli apis create bundle \
              -n "$PROXY_NAME" \
              -p proxy.zip \
              --org "$APIGEE_ORG" \
              --token "$ACCESS_TOKEN")
            
            echo "Import output: $IMPORT_OUTPUT"
            
            if [ $? -ne 0 ]; then
              echo "Failed to import API proxy bundle"
              exit 1
            fi
            
            LATEST_REVISION=$(echo "$IMPORT_OUTPUT" | grep -oP '"revision":\s*"\K[^"]+')
            
            if [ -z "$LATEST_REVISION" ]; then
              echo "Failed to get revision number"
              exit 1
            fi
            
            echo "Latest revision: $LATEST_REVISION"
            echo "revision=$LATEST_REVISION" >> $GITHUB_OUTPUT


  Deploy_To_Environment:
    needs: [validate_deployment_inputs, Build_And_Upload_Proxy]
    if: needs.validate_deployment_inputs.outputs.can_proceed == 'true'
    runs-on: ubuntu-latest
    outputs:
      deployment_success: ${{ steps.deploy.outputs.success }}
    steps:
      - name: Get GCP Token
        id: get-token
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ inputs.is_production == true && secrets.WORKLOAD_IDENTITY_PROVIDER_PROD || secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ inputs.is_production == true && secrets.SERVICE_ACCOUNT_PROD || secrets.SERVICE_ACCOUNT }}
          token_format: 'access_token'

      - name: Install apigeecli
        id: install-cli
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: |
            mkdir -p $HOME/.apigeecli/bin
            curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
            echo "$HOME/.apigeecli/bin" >> $GITHUB_PATH

      - name: Deploy to Environment
        id: deploy
        uses: nick-invision/retry@v2
        env:
          APIGEE_ORG: ${{ inputs.is_production == true && secrets.APIGEE_ORG_PROD || secrets.APIGEE_ORG }}
          PROXY_NAME: ${{ inputs.proxy_name }}
          ENV_GROUP: ${{ inputs.environment_group }}
          ENV_TYPE: ${{ inputs.environment_type }}
          ACCESS_TOKEN: ${{ steps.get-token.outputs.access_token }}
          REVISION: ${{ needs.Build_And_Upload_Proxy.outputs.latest_revision }}
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: |
          # Continuing from Deploy_To_Environment job's deployment command:
            echo "Starting deployment process..."
            echo "Proxy Name: $PROXY_NAME"
            echo "Environment Group: $ENV_GROUP"
            echo "Environment Type(s): $ENV_TYPE"
            echo "Revision: $REVISION"
            echo "Organization: $APIGEE_ORG"
            
            if [ -z "$REVISION" ]; then
              echo "Error: REVISION is empty. Deployment cannot proceed."
              exit 1
            fi
            
            # Function to deploy to a single environment
            deploy_to_env() {
              local deploy_env=$1
              echo "Deploying proxy '$PROXY_NAME' revision '$REVISION' to environment '$deploy_env'"
              
              # Check if proxy is already deployed
              CURRENT_DEPLOYMENT=$($HOME/.apigeecli/bin/apigeecli apis list deployments \
                -o "$APIGEE_ORG" \
                -t "$ACCESS_TOKEN" \
                -n "$PROXY_NAME" \
                -e "$deploy_env" \
                --json)
              
              CURRENT_REV=$(echo "$CURRENT_DEPLOYMENT" | jq -r '.[]?.revision[0]?.name // empty')
              
              if [ "$CURRENT_REV" == "$REVISION" ]; then
                echo "Revision $REVISION is already deployed to $deploy_env"
                return 0
              fi
              
              echo "Deploying revision $REVISION to $deploy_env"
              $HOME/.apigeecli/bin/apigeecli apis deploy \
                -n "$PROXY_NAME" \
                -o "$APIGEE_ORG" \
                -e "$deploy_env" \
                -r "$REVISION" \
                -t "$ACCESS_TOKEN" \
                --ovr \
                --wait
              
              if [ $? -ne 0 ]; then
                echo "Failed to deploy to environment $deploy_env"
                return 1
              fi
              
              echo "Successfully deployed to environment $deploy_env"
              return 0
            }
            
            # Split environment types and deploy to each
            IFS=',' read -ra ENV_TYPES <<< "$ENV_TYPE"
            DEPLOY_SUCCESS=true
            
            for env_type in "${ENV_TYPES[@]}"; do
              env_type=$(echo "$env_type" | xargs)
              
              if [ "$ENV_GROUP" == "default" ]; then
                DEPLOY_ENV="${env_type}"
              else
                DEPLOY_ENV="${ENV_GROUP}-${env_type}"
              fi
              
              echo "Processing deployment for environment: $DEPLOY_ENV"
              
              # Verify environment exists
              ENV_CHECK=$($HOME/.apigeecli/bin/apigeecli environments list \
                -o "$APIGEE_ORG" \
                -t "$ACCESS_TOKEN" \
                --json)
              
              if [[ ! "$ENV_CHECK" == *"$DEPLOY_ENV"* ]]; then
                echo "Error: Environment $DEPLOY_ENV does not exist in organization"
                DEPLOY_SUCCESS=false
                continue
              fi
              
              # Deploy to environment
              if ! deploy_to_env "$DEPLOY_ENV"; then
                DEPLOY_SUCCESS=false
                echo "Deployment failed for environment $DEPLOY_ENV"
                continue
              fi
              
              # Verify deployment
              VERIFY_DEPLOYMENT=$($HOME/.apigeecli/bin/apigeecli apis list deployments \
                -o "$APIGEE_ORG" \
                -t "$ACCESS_TOKEN" \
                -n "$PROXY_NAME" \
                -e "$DEPLOY_ENV" \
                --json)
              
              DEPLOYED_REV=$(echo "$VERIFY_DEPLOYMENT" | jq -r '.[]?.revision[0]?.name // empty')
              
              if [ "$DEPLOYED_REV" != "$REVISION" ]; then
                echo "Verification failed: Expected revision $REVISION, but found $DEPLOYED_REV in $DEPLOY_ENV"
                DEPLOY_SUCCESS=false
                continue
              fi
              
              echo "Verified deployment of revision $REVISION in environment $DEPLOY_ENV"
            done
            
            if [ "$DEPLOY_SUCCESS" = true ]; then
              echo "success=true" >> $GITHUB_OUTPUT
              echo "All deployments completed successfully"
            else
              echo "success=false" >> $GITHUB_OUTPUT
              echo "One or more deployments failed"
              exit 1
            fi

      - name: Add Deployment Details to Summary
        if: always()
        run: |
          echo "### Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Proxy Name:** ${{ inputs.proxy_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Revision:** ${{ needs.Build_And_Upload_Proxy.outputs.latest_revision }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment Group:** ${{ inputs.environment_group }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment Type:** ${{ inputs.environment_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** $([ "${{ steps.deploy.outputs.success }}" == "true" ] && echo "‚úÖ Success" || echo "‚ùå Failed")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  Perform_Cleanup:
    needs: [validate_deployment_inputs, Deploy_To_Environment]
    if: always() && needs.Deploy_To_Environment.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Get GCP Token
        id: get-token
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ inputs.is_production == true && secrets.WORKLOAD_IDENTITY_PROVIDER_PROD || secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ inputs.is_production == true && secrets.SERVICE_ACCOUNT_PROD || secrets.SERVICE_ACCOUNT }}
          token_format: 'access_token'

      - name: Install apigeecli
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: |
            mkdir -p $HOME/.apigeecli/bin
            curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
            echo "$HOME/.apigeecli/bin" >> $GITHUB_PATH

      - name: Cleanup Old Revisions
        id: cleanup
        env:
          APIGEE_ORG: ${{ inputs.is_production == true && secrets.APIGEE_ORG_PROD || secrets.APIGEE_ORG }}
          PROXY_NAME: ${{ inputs.proxy_name }}
          ACCESS_TOKEN: ${{ steps.get-token.outputs.access_token }}
        run: |
          echo "Starting revision cleanup"
          
          echo "Getting all revisions for proxy $PROXY_NAME"
          REVS=$($HOME/.apigeecli/bin/apigeecli apis list revisions \
            -o "$APIGEE_ORG" \
            -t "$ACCESS_TOKEN" \
            -n "$PROXY_NAME" \
            --json)
          
          if [ $? -ne 0 ]; then
            echo "Failed to get revisions"
            exit 1
          fi
          
          REVISIONS=($(echo "$REVS" | jq -r '.[] | select(. != null)' | sort -nr))
          TOTAL_REVS=${#REVISIONS[@]}
          KEEP_COUNT=5
          
          echo "Total revisions found: $TOTAL_REVS"
          
          if [ $TOTAL_REVS -gt $KEEP_COUNT ]; then
            DELETE_COUNT=$((TOTAL_REVS - KEEP_COUNT))
            echo "Will delete $DELETE_COUNT old revisions"
            
            for REV in "${REVISIONS[@]:$KEEP_COUNT}"; do
              echo "Processing revision $REV"
              
              DEPLOYED=$($HOME/.apigeecli/bin/apigeecli apis list deployments \
                -o "$APIGEE_ORG" \
                -t "$ACCESS_TOKEN" \
                -n "$PROXY_NAME" \
                --json)
              
              if [[ "$DEPLOYED" == *"$REV"* ]]; then
                echo "Revision $REV is currently deployed, skipping"
                continue
              fi
              
              echo "Deleting revision $REV"
              $HOME/.apigeecli/bin/apigeecli apis delete revision \
                -o "$APIGEE_ORG" \
                -t "$ACCESS_TOKEN" \
                -n "$PROXY_NAME" \
                -r "$REV"
              
              if [ $? -eq 0 ]; then
                echo "Successfully deleted revision $REV"
              else
                echo "Failed to delete revision $REV"
              fi
            done
            
            echo "cleanup_status=success" >> $GITHUB_OUTPUT
          else
            echo "No cleanup needed, total revisions ($TOTAL_REVS) <= keep count ($KEEP_COUNT)"
            echo "cleanup_status=skipped" >> $GITHUB_OUTPUT
          fi

  Generate_Deployment_Report:
    needs: [validate_deployment_inputs, Build_And_Upload_Proxy, Deploy_To_Environment, Perform_Cleanup]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate Deployment Summary
        env:
          IS_PRODUCTION: ${{ inputs.is_production }}
          PROXY_NAME: ${{ inputs.proxy_name }}
          REVISION: ${{ needs.Build_And_Upload_Proxy.outputs.latest_revision }}
          ENV_GROUP: ${{ inputs.environment_group }}
          ENV_TYPE: ${{ inputs.environment_type }}
          APIGEE_ORG: ${{ inputs.is_production == true && secrets.APIGEE_ORG_PROD || secrets.APIGEE_ORG }}
        run: |
          echo "# üéØ Apigee Proxy Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "<sub>**Deployment Time:** $(date '+%d/%m/%Y, %H:%M:%S')</sub>" >> $GITHUB_STEP_SUMMARY
          
          # Overall Status
          DEPLOY_SUCCESS="${{ needs.Deploy_To_Environment.result }}"
          CLEANUP_STATUS="${{ needs.Perform_Cleanup.outputs.cleanup_status }}"
          
          if [ "$DEPLOY_SUCCESS" == "success" ]; then
            echo "## ‚úÖ Deployment Successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ‚ùå Deployment Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Deployment Details
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Deployment Information" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Proxy Name | \`$PROXY_NAME\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Revision | \`$REVISION\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Organization | \`$APIGEE_ORG\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Environment Group | \`$ENV_GROUP\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Environment Type(s) | \`$ENV_TYPE\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | \`${{ inputs.is_production == true && 'Production' || 'Non-Production' }}\` |" >> $GITHUB_STEP_SUMMARY
          
          # Status Details
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîç Status Details" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Validation | $([ "${{ needs.validate_deployment_inputs.result }}" == "success" ] && echo "‚úÖ Passed" || echo "‚ùå Failed") |" >> $GITHUB_STEP_SUMMARY
          echo "| Authentication | $([ "${{ needs.Setup_GCP_Authentication.result }}" == "success" ] && echo "‚úÖ Successful" || echo "‚ùå Failed") |" >> $GITHUB_STEP_SUMMARY
          echo "| Bundle Creation | $([ "${{ needs.Build_And_Upload_Proxy.result }}" == "success" ] && echo "‚úÖ Successful" || echo "‚ùå Failed") |" >> $GITHUB_STEP_SUMMARY
          echo "| Deployment | $([ "$DEPLOY_SUCCESS" == "success" ] && echo "‚úÖ Successful" || echo "‚ùå Failed") |" >> $GITHUB_STEP_SUMMARY
          echo "| Cleanup | $([ "$CLEANUP_STATUS" == "success" ] && echo "‚úÖ Completed" || echo "‚è≠Ô∏è Skipped") |" >> $GITHUB_STEP_SUMMARY
          
          # Footer
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "<sub>Run ID: \`${{ github.run_id }}\` | Generated: $(date '+%H:%M:%S')</sub>" >> $GITHUB_STEP_SUMMARY

  Request_Production_Approval:
    needs: [validate_deployment_inputs, Deploy_To_Environment, Generate_Deployment_Report]
    if: |
      always() && 
      !inputs.is_production && 
      needs.Deploy_To_Environment.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Create Production Approval Issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Production Deployment Ready - ${{ inputs.proxy_name }}`,
                body: `
                ## Production Deployment Request
                
                ‚úÖ A successful non-production deployment has completed and is ready for production deployment.
                
                ### üìã Deployment Details
                - **Proxy Name:** ${{ inputs.proxy_name }}
                - **Current Revision:** ${{ needs.Build_And_Upload_Proxy.outputs.latest_revision }}
                - **Non-Prod Environment:** ${{ inputs.environment_group }}-${{ inputs.environment_type }}
                - **Run ID:** ${context.runId}
                
                ### üöÄ Production Deployment Instructions
                
                1. Review the deployment in non-prod environment
                2. Go to Actions ‚Üí Apigee Proxy Deployment
                3. Click "Run workflow"
                4. Fill in the following:
                   - Proxy Name: ${{ inputs.proxy_name }}
                   - Environment Group: prod
                   - Environment Type: prod
                   - Is Production: ‚úì (check the box)
                   - Non-Prod Revision: ${{ needs.Build_And_Upload_Proxy.outputs.latest_revision }}
                
                [üì• Start Production Deployment](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/workflows/apigee-deploy.yml)
                
                ---
                <sub>Generated by Apigee Deployment Workflow | Run ID: ${context.runId}</sub>
                `
              });
