name: Apigee Proxy Deployment [Reusable Workflow]

on:
  workflow_call:
    inputs:
      proxy_name:
        description: The name of the API proxy to deploy
        required: true
        type: string
      proxy_directory:
        description: Working directory to zip up as your proxy bundle
        required: false
        type: string
        default: 'apiproxy'
      environment_group:
        description: The environment group to deploy to
        required: true
        type: string
      environment_type:
        description: The environment types to deploy to
        required: true
        type: string
      runner:
        description: The runner to use for the job
        required: false
        default: 'ubuntu-latest'
        type: string
    secrets:
      apigee_org:
        required: true
      workload_identity_provider:
        required: true
      service_account:
        required: true
      

permissions:
  contents: read
  id-token: write

jobs:
  Prepare_Environment_List:
    runs-on: ${{ inputs.runner }}
    outputs:
      environments: ${{ steps.set-envs.outputs.environments }}
    steps:
      - name: Set Environment List
        id: set-envs
        run: |
          GROUP="${{ inputs.environment_group }}"
          TYPES="${{ inputs.environment_type }}"
          
          # Function to generate environment names
          generate_env_list() {
            local group=$1
            local types=$2
            local envs="["
            
            # Split the types into an array
            IFS=',' read -ra ENV_TYPES <<< "$types"
            
            # Counter for adding commas
            local first=true
            
            # Process each environment type
            for type in "${ENV_TYPES[@]}"; do
              if [ "$first" = true ]; then
                first=false
              else
                envs="${envs},"
              fi
              
              # Add prefix only if not default group
              if [ "$group" = "default" ]; then
                envs="${envs}\"${type}\""
              else
                envs="${envs}\"${group}-${type}\""
              fi
            done
            
            envs="${envs}]"
            echo "$envs"
          }
          
          # Generate the environment list
          ENVIRONMENTS=$(generate_env_list "$GROUP" "$TYPES")
          
          # Debug output
          echo "Environment Group: $GROUP"
          echo "Environment Types: $TYPES"
          echo "Generated environment list: $ENVIRONMENTS"
          
          # Set output
          echo "environments=$ENVIRONMENTS" >> $GITHUB_OUTPUT

  GCP_Auth:
    needs: [Prepare_Environment_List]
    runs-on: ${{ inputs.runner }}
    outputs:
      access_token: ${{ steps.get-token.outputs.token }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.workload_identity_provider }}
          service_account: ${{ secrets.service_account }}
          token_format: 'access_token'
          create_credentials_file: true

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Get Access Token
        id: get-token
        run: |
          echo "::add-mask::$(gcloud auth print-access-token)"
          echo "token=$(gcloud auth print-access-token)" >> $GITHUB_OUTPUT

      - name: Verify Token
        if: success()
        run: |
          if [ -n "${{ steps.get-token.outputs.token }}" ]; then
            echo "Access token successfully obtained"
          else
            echo "Failed to obtain access token"
            exit 1
          fi

  ApigeeLint:
    needs: [GCP_Auth]
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install apigeelint
        run: npm install -g apigeelint

      - name: Run apigeelint
        run: apigeelint -s ${{ inputs.proxy_directory }} -f table.js

  Prepare_and_Upload:
    needs: [GCP_Auth, ApigeeLint]
    runs-on: ${{ inputs.runner }}
    outputs:
      latest_revision: ${{ steps.upload.outputs.revision }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.workload_identity_provider }}
          service_account: ${{ secrets.service_account }}
          token_format: 'access_token'

      - name: Install apigeecli
        run: |
          mkdir -p $HOME/.apigeecli/bin
          curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
          echo "$HOME/.apigeecli/bin" >> $GITHUB_PATH
          $HOME/.apigeecli/bin/apigeecli --help

      - name: Create API bundle
        id: create-bundle
        working-directory: ${{ github.workspace }}
        run: |
          create_bundle() {
            local source_dir="$1"
            echo "Creating bundle from: $source_dir"
            mkdir -p temp_bundle
            cp -r "$source_dir" temp_bundle/apiproxy
            cd temp_bundle
            zip -r ../proxy.zip apiproxy
            cd ..
            echo "Zip contents:"
            unzip -l proxy.zip
            rm -rf temp_bundle
          }
          
          if [ -d "${{ inputs.proxy_directory }}" ]; then
            create_bundle "${{ inputs.proxy_directory }}"
          elif [ -d "src/${{ inputs.proxy_directory }}" ]; then
            create_bundle "src/${{ inputs.proxy_directory }}"
          else
            echo "Error: Could not find apiproxy directory"
            exit 1
          fi

      - name: Upload and Get Revision
        id: upload
        env:
          APIGEE_ORG: ${{ secrets.apigee_org }}
          PROXY_NAME: ${{ inputs.proxy_name }}
          ACCESS_TOKEN: ${{ needs.GCP_Auth.outputs.access_token }}
        run: |
          echo "Importing API proxy bundle to Apigee organization"
          IMPORT_OUTPUT=$($HOME/.apigeecli/bin/apigeecli apis create bundle -n "$PROXY_NAME" -p proxy.zip \
            --org "$APIGEE_ORG" \
            --token "$ACCESS_TOKEN")
          
          echo "$IMPORT_OUTPUT"
          
          LATEST_REVISION=$(echo "$IMPORT_OUTPUT" | grep -oP '"revision": "\K[^"]+')
          
          if [ -z "$LATEST_REVISION" ]; then
            echo "Failed to get revision number"
            exit 1
          fi
          
          echo "Latest revision: $LATEST_REVISION"
          echo "revision=$LATEST_REVISION" >> $GITHUB_OUTPUT

  Deploy_to_Environment:
    needs: [Prepare_Environment_List, GCP_Auth, Prepare_and_Upload]
    strategy:
      matrix:
        environment: ${{ fromJSON(needs.Prepare_Environment_List.outputs.environments) }}
      fail-fast: false
      max-parallel: 1
    runs-on: ${{ inputs.runner }}
    environment: ${{ matrix.environment }}
    steps:
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.workload_identity_provider }}
          service_account: ${{ secrets.service_account }}
          token_format: 'access_token'

      - name: Install apigeecli
        run: |
          mkdir -p $HOME/.apigeecli/bin
          curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
          echo "$HOME/.apigeecli/bin" >> $GITHUB_PATH

      - name: Debug Environment Variables
        run: |
          echo "Current Environment: ${{ matrix.environment }}"
          echo "Organization: ${{ secrets.apigee_org }}"
          echo "Proxy Name: ${{ inputs.proxy_name }}"
          echo "Revision: ${{ needs.Prepare_and_Upload.outputs.latest_revision }}"

      - name: Deploy to Environment
        env:
          APIGEE_ORG: ${{ secrets.apigee_org }}
          APIGEE_ENV: ${{ matrix.environment }}
          PROXY_NAME: ${{ inputs.proxy_name }}
          ACCESS_TOKEN: ${{ needs.GCP_Auth.outputs.access_token }}
          LATEST_REVISION: ${{ needs.Prepare_and_Upload.outputs.latest_revision }}
        run: |
          if [ -z "$LATEST_REVISION" ]; then
            echo "Error: LATEST_REVISION is empty. Deployment cannot proceed."
            exit 1
          fi
          
          # Debug information
          echo "Deploying proxy '$PROXY_NAME' revision '$LATEST_REVISION' to environment '$APIGEE_ENV'"
          
          # Deploy the proxy
          set -x  # Enable command echo for debugging
          $HOME/.apigeecli/bin/apigeecli apis deploy \
            --name "$PROXY_NAME" \
            --org "$APIGEE_ORG" \
            --env "$APIGEE_ENV" \
            --rev "$LATEST_REVISION" \
            --token "$ACCESS_TOKEN" \
            --ovr \
            --wait
          set +x  # Disable command echo

  Cleanup_Old_Revisions:
    needs: [Deploy_to_Environment]
    if: always()
    runs-on: ${{ inputs.runner }}
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.workload_identity_provider }}
          service_account: ${{ secrets.service_account }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Delete Older Revisions
        env:
          APIGEE_ORG: ${{ secrets.apigee_org }}
          APIGEE_PROXY_NAME: ${{ inputs.proxy_name }}
        run: |
          ACCESS_TOKEN=$(gcloud auth print-access-token)
          REVISIONS_JSON=$(curl -s -X GET -H "Authorization: Bearer $ACCESS_TOKEN" \
            "https://apigee.googleapis.com/v1/organizations/$APIGEE_ORG/apis/$APIGEE_PROXY_NAME/revisions")
          
          readarray -t REVISIONS < <(echo "$REVISIONS_JSON" | jq -r '.[]' | sort -n)
          TOTAL_REVISIONS=${#REVISIONS[@]}
          KEEP_COUNT=5
          
          if [ "$TOTAL_REVISIONS" -gt "$KEEP_COUNT" ]; then
            DELETE_COUNT=$((TOTAL_REVISIONS - KEEP_COUNT))
            for ((i=0; i<DELETE_COUNT; i++)); do
              REV="${REVISIONS[$i]}"
              curl -X DELETE -H "Authorization: Bearer $ACCESS_TOKEN" \
                "https://apigee.googleapis.com/v1/organizations/$APIGEE_ORG/apis/$APIGEE_PROXY_NAME/revisions/$REV"
            done
          fi

  Deployment_Summary:
    needs: [ApigeeLint, Prepare_and_Upload, Deploy_to_Environment, Prepare_Environment_List, Cleanup_Old_Revisions]
    if: always()
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Generate and Display Deployment Summary
        env:
          LINT_RESULT: ${{ needs.ApigeeLint.result }}
          DEPLOY_RESULT: ${{ needs.Deploy_to_Environment.result }}
          PROXY_NAME: ${{ inputs.proxy_name }}
          NEW_VERSION: ${{ needs.Prepare_and_Upload.outputs.latest_revision }}
          ENVIRONMENTS: ${{ needs.Prepare_Environment_List.outputs.environments }}
          GROUP: ${{ inputs.environment_group }}
          TYPES: ${{ inputs.environment_type }}
        run: |
          {
            echo "# Apigee Proxy Deployment Summary"
            echo
            echo "## Deployment Information"
            echo "| Item | Value |"
            echo "|------|-------|"
            echo "| Proxy Name | ${PROXY_NAME} |"
            echo "| New Version | ${NEW_VERSION} |"
            echo "| Environment Group | ${GROUP} |"
            echo "| Environment Types | ${TYPES} |"
            echo "| Target Environments | ${ENVIRONMENTS} |"
            echo
            echo "## Status"
            echo "| Step | Result |"
            echo "|------|--------|"
            if [ "$LINT_RESULT" == "success" ]; then
              echo "| Lint Check | ✅ Success |"
            else
              echo "| Lint Check | ⛔ Failed |"
            fi
            if [ "$DEPLOY_RESULT" == "success" ]; then
              echo "| Deployment | ✅ Success |"
            else
              echo "| Deployment | ⛔ Failed |"
            fi
          } >> $GITHUB_STEP_SUMMARY
