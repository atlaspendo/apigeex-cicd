name: Apigee Proxy Deployment [Reusable Workflow]

on:
  workflow_call:
    inputs:
      proxy_name:
        description: The name of the API proxy to deploy
        required: true
        type: string
      proxy_directory:
        description: Working directory to zip up as your proxy bundle
        required: false
        type: string
        default: 'apiproxy'
      environment_group:
        description: The environment group to deploy to
        required: true
        type: string
      environment_type:
        description: The environment types to deploy to
        required: true
        type: string
      is_production:
        description: Is this a production deployment?
        required: true
        type: boolean
      non_prod_revision:
        description: Revision number from successful non-prod deployment
        required: false
        type: string
      event_name:
        description: GitHub event that triggered the workflow
        required: true
        type: string
    outputs:
      revision:
        description: "The deployed revision number"
        value: ${{ jobs.Build_And_Upload_NonProd.outputs.latest_revision }}
      deployment_status:
        description: "Status of the deployment"
        value: ${{ jobs.validate_deployment_inputs.outputs.deployment_status }}
    secrets:
      APIGEE_ORG:
        required: true
      APIGEE_ORG_PROD:
        required: true
      WORKLOAD_IDENTITY_PROVIDER:
        required: true
      WORKLOAD_IDENTITY_PROVIDER_PROD:
        required: true
      SERVICE_ACCOUNT:
        required: true
      SERVICE_ACCOUNT_PROD:
        required: true

permissions:
  contents: read
  id-token: write
  deployments: write

jobs:
  validate_deployment_inputs:
    runs-on: ubuntu-latest
    outputs:
      can_proceed: ${{ steps.validate.outputs.can_proceed }}
      deployment_type: ${{ steps.validate.outputs.deployment_type }}
      deployment_status: ${{ steps.validate.outputs.deployment_status }}
      environment: ${{ steps.validate.outputs.environment }}
    steps:
      - name: Validate Environment Configuration
        id: validate
        run: |
          echo "::group::üîç Validating Deployment Configuration"
          echo "Starting validation checks..."
          
          PROCEED=true
          DEPLOY_TYPE="non-prod"
          STATUS="pending"
          
          if [[ "${{ inputs.is_production }}" == "true" ]]; then
            if [[ -z "${{ inputs.non_prod_revision }}" ]]; then
              echo "‚ùå Error: Production deployment requires non_prod_revision"
              PROCEED=false
              STATUS="failed"
            else
              DEPLOY_TYPE="prod"
              echo "‚úÖ Production deployment validated with revision ${{ inputs.non_prod_revision }}"
            fi
          fi
          
          case "${{ inputs.environment_group }}" in
            "default"|"edd"|"homerun"|"wow"|"wpay"|"prod")
              echo "‚úÖ Environment group validation passed"
              ;;
            *)
              echo "‚ùå Error: Invalid environment group"
              PROCEED=false
              STATUS="failed"
              ;;
          esac
          
          case "${{ inputs.environment_type }}" in
            "dev"|"test-env"|"test"|"uat"|"prod")
              echo "‚úÖ Environment type validation passed"
              echo "environment=${{ inputs.environment_type }}" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "‚ùå Error: Invalid environment type"
              PROCEED=false
              STATUS="failed"
              ;;
          esac
          
          if [[ "$PROCEED" == "true" ]]; then
            STATUS="validated"
            echo "‚úÖ All validation checks passed"
          fi
          
          echo "can_proceed=$PROCEED" >> $GITHUB_OUTPUT
          echo "deployment_type=$DEPLOY_TYPE" >> $GITHUB_OUTPUT
          echo "deployment_status=$STATUS" >> $GITHUB_OUTPUT
          echo "::endgroup::"
  
  
  Setup_Auth:
    needs: validate_deployment_inputs
    if: needs.validate_deployment_inputs.outputs.can_proceed == 'true'
    runs-on: ubuntu-latest
    outputs:
      nonprod_token: ${{ steps.nonprod_auth.outputs.access_token }}
      prod_token: ${{ steps.prod_auth.outputs.access_token }}
    steps:
      - name: Set up job
        run: |
          echo "::group::üîê Setting up Authentication"
          echo "Initializing authentication process..."

      - name: Non-Prod Authentication
        id: nonprod_auth
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}
          token_format: 'access_token'
          create_credentials_file: true

      - name: Post Non-Prod Authentication
        run: |
          echo "‚úÖ Non-prod authentication completed successfully"

      - name: Prod Authentication
        id: prod_auth
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_PROD }}
          service_account: ${{ secrets.SERVICE_ACCOUNT_PROD }}
          token_format: 'access_token'
          create_credentials_file: true

      - name: Complete job
        run: |
          echo "‚úÖ Authentication setup completed for all environments"
          echo "::endgroup::"

  Validate_API_Proxy:
    needs: [validate_deployment_inputs, Setup_Auth]
    if: needs.validate_deployment_inputs.outputs.can_proceed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install apigeelint
        run: |
          echo "::group::üîç Installing API Proxy Validator"
          npm install -g apigeelint
          if [ $? -ne 0 ]; then
            echo "‚ùå Failed to install apigeelint"
            exit 1
          fi
          echo "‚úÖ apigeelint installed successfully"
          echo "::endgroup::"

      - name: Run apigeelint
        run: |
          echo "::group::üîç Validating API Proxy"
          echo "Running apigeelint validation..."
          apigeelint -s ${{ inputs.proxy_directory }} -f table.js
          if [ $? -ne 0 ]; then
            echo "‚ùå API proxy validation failed"
            exit 1
          fi
          echo "‚úÖ API proxy validation passed"
          echo "::endgroup::"

  Build_And_Upload_NonProd:
    needs: [Setup_Auth, validate_deployment_inputs, Validate_API_Proxy]
    if: needs.validate_deployment_inputs.outputs.can_proceed == 'true' && inputs.is_production != true
    runs-on: ubuntu-latest
    outputs:
      latest_revision: ${{ steps.upload.outputs.revision }}
      revision_file: ${{ steps.create-bundle.outputs.revision_file }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install apigeecli
        id: install-apigeecli
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: |
            echo "::group::üîß Installing Apigee CLI"
            mkdir -p $HOME/.apigeecli/bin
            curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
            echo "$HOME/.apigeecli/bin" >> $GITHUB_PATH
            echo "‚úÖ apigeecli installed successfully"
            echo "::endgroup::"

      - name: Create API bundle
        id: create-bundle
        run: |
          echo "::group::üì¶ Creating API Bundle"
          mkdir -p artifacts
          
          create_bundle() {
            local source_dir="$1"
            echo "Creating bundle from: $source_dir"
            mkdir -p temp_bundle
            cp -r "$source_dir" temp_bundle/apiproxy
            cd temp_bundle
            zip -r ../proxy.zip apiproxy
            cd ..
            cp proxy.zip artifacts/
            echo "‚úÖ Bundle created and saved to artifacts"
            echo "üìù Bundle contents:"
            unzip -l proxy.zip
            rm -rf temp_bundle
            echo "revision_file=artifacts/revision.txt" >> $GITHUB_OUTPUT
          }
          
          if [ -d "${{ inputs.proxy_directory }}" ]; then
            create_bundle "${{ inputs.proxy_directory }}"
          elif [ -d "src/${{ inputs.proxy_directory }}" ]; then
            create_bundle "src/${{ inputs.proxy_directory }}"
          else
            echo "‚ùå Error: Could not find apiproxy directory"
            exit 1
          fi
          echo "::endgroup::"

      - name: Get GCP Token
        id: get-token
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}
          token_format: 'access_token'
          create_credentials_file: true

      - name: Upload and Get Revision
        id: upload
        run: |
          echo "::group::üì§ Uploading to Non-Prod"
          echo "Organization: ${{ secrets.APIGEE_ORG }}"
          echo "Proxy name: ${{ inputs.proxy_name }}"
          
          TOKEN=$(gcloud auth print-access-token)
          
          # Add pre-upload wait
          echo "Waiting for token validation..."
          sleep 5
          
          IMPORT_OUTPUT=$($HOME/.apigeecli/bin/apigeecli apis create bundle \
            -n "${{ inputs.proxy_name }}" \
            -p proxy.zip \
            --org "${{ secrets.APIGEE_ORG }}" \
            --token "$TOKEN")
          
          echo "Import output: $IMPORT_OUTPUT"
          
          # Add post-upload wait
          echo "Waiting for import to process..."
          sleep 5
          
          NEW_REVISION=$(echo "$IMPORT_OUTPUT" | grep -oP '"revision":\s*"\K[^"]+')
          if [ -z "$NEW_REVISION" ]; then
            echo "‚ùå Failed to get revision number"
            exit 1
          fi
          
          # Save revision number for future use
          echo "$NEW_REVISION" > artifacts/revision.txt
          echo "‚úÖ Successfully uploaded revision: $NEW_REVISION"
          echo "revision=$NEW_REVISION" >> $GITHUB_OUTPUT
          echo "::endgroup::"

      - name: Verify Upload
        if: success()
        run: |
          echo "::group::‚úîÔ∏è Verifying Upload"
          echo "Revision file contents:"
          cat artifacts/revision.txt
          echo "Proxy bundle exists: $(test -f proxy.zip && echo 'Yes' || echo 'No')"
          echo "‚úÖ Upload verification complete"
          echo "::endgroup::"

      - name: Save Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: proxy-artifacts
          path: |
            artifacts/proxy.zip
            artifacts/revision.txt
          retention-days: 1
          
  Deploy_To_NonProd:
    needs: [Build_And_Upload_NonProd, validate_deployment_inputs]
    if: needs.validate_deployment_inputs.outputs.can_proceed == 'true' && inputs.is_production != true
    runs-on: ubuntu-latest
    environment: 
      name: ${{ needs.validate_deployment_inputs.outputs.environment }}
    steps:
      - name: Get GCP Token
        id: get-token
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}
          token_format: 'access_token'
          create_credentials_file: true

      - name: Install apigeecli
        run: |
          echo "::group::üöÄ Preparing Non-Prod Deployment"
          mkdir -p $HOME/.apigeecli/bin
          curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
          echo "$HOME/.apigeecli/bin" >> $GITHUB_PATH
          echo "‚úÖ apigeecli installed successfully"
          echo "::endgroup::"

      - name: Deploy to Environment
        run: |
          echo "::group::üöÄ Deploying to Non-Prod"
          TOKEN=$(gcloud auth print-access-token)
          
          if [ "${{ inputs.environment_group }}" == "default" ]; then
            DEPLOY_ENV="${{ needs.validate_deployment_inputs.outputs.environment }}"
          else
            DEPLOY_ENV="${{ inputs.environment_group }}-${{ needs.validate_deployment_inputs.outputs.environment }}"
          fi
          
          REVISION="${{ needs.Build_And_Upload_NonProd.outputs.latest_revision }}"
          
          if [ -z "$REVISION" ]; then
            echo "‚ùå Error: No revision number found"
            exit 1
          fi
          
          echo "üìç Target Environment: $DEPLOY_ENV"
          echo "üì¶ Revision: $REVISION"
          
          $HOME/.apigeecli/bin/apigeecli apis deploy \
            --name "${{ inputs.proxy_name }}" \
            --org "${{ secrets.APIGEE_ORG }}" \
            --env "$DEPLOY_ENV" \
            --rev "$REVISION" \
            --token "$TOKEN" \
            --ovr \
            --wait
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Successfully deployed to $DEPLOY_ENV"
          else
            echo "‚ùå Deployment failed"
            exit 1
          fi
          echo "::endgroup::"
          
  Verify_NonProd_Deployment:
    needs: [Deploy_To_NonProd, Build_And_Upload_NonProd]
    if: needs.Deploy_To_NonProd.result == 'success'
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.verify.outputs.status }}
    steps:
      - name: Verify Deployment
        id: verify
        run: |
          echo "::group::‚úîÔ∏è Verifying Non-Prod Deployment"
          echo "Running deployment verification..."
          echo "‚úÖ Deployment verification successful"
          echo "status=success" >> $GITHUB_OUTPUT
          echo "::endgroup::"

      - name: Create Artifacts Directory
        run: |
          mkdir -p artifacts

      - name: Save Revision
        id: save-revision
        run: |
          echo "${{ needs.Build_And_Upload_NonProd.outputs.latest_revision }}" > artifacts/revision.txt

  Request_Production_Approval:
    needs: [Verify_NonProd_Deployment, Build_And_Upload_NonProd]
    if: needs.Verify_NonProd_Deployment.outputs.status == 'success'
    runs-on: ubuntu-latest
    environment:
      name: production-approval
    outputs:
      revision: ${{ needs.Build_And_Upload_NonProd.outputs.latest_revision }}
    steps:
      - name: Set Deployment Status
        run: |
          echo "::group::üë• Production Deployment Request"
          echo "‚úÖ Non-prod deployment successful"
          echo "‚è≥ Awaiting production approval"
          echo "üì¶ Proxy: ${{ inputs.proxy_name }}"
          echo "üìù Revision: ${{ needs.Build_And_Upload_NonProd.outputs.latest_revision }}"
          echo "::endgroup::"

  Build_And_Upload_Prod:
    needs: [Setup_Auth, Request_Production_Approval]
    if: always() && needs.Request_Production_Approval.result == 'success'
    runs-on: ubuntu-latest
    outputs:
      latest_revision: ${{ steps.upload_and_sync.outputs.revision }}
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: proxy-artifacts
          path: artifacts

      - name: List Downloaded Artifacts
        run: |
          echo "::group::üì¶ Preparing Production Deployment"
          echo "Verifying artifacts..."
          ls -la artifacts/
          echo "üìù Source revision: $(cat artifacts/revision.txt)"
          echo "‚úÖ Artifacts verified successfully"
          echo "::endgroup::"

      - name: Install apigeecli
        id: install-apigeecli
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: |
            echo "::group::üîß Installing Apigee CLI"
            mkdir -p $HOME/.apigeecli/bin
            curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
            echo "$HOME/.apigeecli/bin" >> $GITHUB_PATH
            echo "‚úÖ apigeecli installed successfully"
            echo "::endgroup::"

      - name: Get GCP Token
        id: get-token
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_PROD }}
          service_account: ${{ secrets.SERVICE_ACCOUNT_PROD }}
          token_format: 'access_token'
          create_credentials_file: true

      - name: Upload and Sync Revision
        id: upload_and_sync
        run: |
          echo "::group::üì§ Uploading to Production"
          SOURCE_REVISION=$(cat artifacts/revision.txt)
          echo "üìù Target revision: $SOURCE_REVISION"
          
          TOKEN=$(gcloud auth print-access-token)
          
          # Calculate how many uploads needed to reach target revision
          echo "Synchronizing revision numbers..."
          
          # First upload to get current revision
          IMPORT_OUTPUT=$($HOME/.apigeecli/bin/apigeecli apis create bundle \
            -n "${{ inputs.proxy_name }}" \
            -p artifacts/proxy.zip \
            --org "${{ secrets.APIGEE_ORG_PROD }}" \
            --token "$TOKEN")
          
          CURRENT_REVISION=$(echo "$IMPORT_OUTPUT" | grep -oP '"revision":\s*"\K[^"]+')
          echo "Current revision in prod: $CURRENT_REVISION"
          
          # Continue uploading until we reach or exceed the target revision
          while [ "$CURRENT_REVISION" -lt "$SOURCE_REVISION" ]; do
            echo "Uploading to increment revision..."
            IMPORT_OUTPUT=$($HOME/.apigeecli/bin/apigeecli apis create bundle \
              -n "${{ inputs.proxy_name }}" \
              -p artifacts/proxy.zip \
              --org "${{ secrets.APIGEE_ORG_PROD }}" \
              --token "$TOKEN")
            
            CURRENT_REVISION=$(echo "$IMPORT_OUTPUT" | grep -oP '"revision":\s*"\K[^"]+')
            echo "Updated revision: $CURRENT_REVISION"
          done
          
          echo "‚úÖ Successfully synced revision numbers"
          echo "üìù Final revision: $CURRENT_REVISION"
          echo "revision=$CURRENT_REVISION" >> $GITHUB_OUTPUT
          echo "::endgroup::"

  Deploy_To_Production:
    needs: [Build_And_Upload_Prod]
    if: needs.Build_And_Upload_Prod.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Install apigeecli
        id: install-apigeecli
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: |
            echo "::group::üîß Installing Apigee CLI"
            mkdir -p $HOME/.apigeecli/bin
            curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
            echo "$HOME/.apigeecli/bin" >> $GITHUB_PATH
            echo "‚úÖ apigeecli installed successfully"
            echo "::endgroup::"

      - name: Get GCP Token
        id: get-token
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_PROD }}
          service_account: ${{ secrets.SERVICE_ACCOUNT_PROD }}
          token_format: 'access_token'
          create_credentials_file: true

      - name: Deploy to Production
        run: |
          echo "::group::üöÄ Deploying to Production"
          TOKEN=$(gcloud auth print-access-token)
          
          if [ "${{ inputs.environment_group }}" == "default" ]; then
            DEPLOY_ENV="test-env"
          else
            DEPLOY_ENV="${{ inputs.environment_group }}-test-env"
          fi
          
          REVISION="${{ needs.Build_And_Upload_Prod.outputs.latest_revision }}"
          
          echo "üìç Target Environment: $DEPLOY_ENV"
          echo "üì¶ Deploying revision: $REVISION"
          
          $HOME/.apigeecli/bin/apigeecli apis deploy \
            --name "${{ inputs.proxy_name }}" \
            --org "${{ secrets.APIGEE_ORG_PROD }}" \
            --env "$DEPLOY_ENV" \
            --rev "$REVISION" \
            --token "$TOKEN" \
            --ovr \
            --wait

          if [ $? -eq 0 ]; then
            echo "‚úÖ Successfully deployed to production environment"
          else
            echo "‚ùå Production deployment failed"
            exit 1
          fi
          echo "::endgroup::"

      - name: Post-Deployment Summary
        if: success()
        run: |
          echo "::group::üìã Deployment Summary"
          echo "‚úÖ Production deployment completed successfully"
          echo "üì¶ Proxy: ${{ inputs.proxy_name }}"
          echo "üìù Deployed revision: ${{ needs.Build_And_Upload_Prod.outputs.latest_revision }}"
          echo "üåê Environment: $DEPLOY_ENV"
          echo "‚è±Ô∏è Completed at: $(date)"
          echo "::endgroup::"
          
  Deployment_Summary:
    needs: [validate_deployment_inputs, Setup_Auth, Validate_API_Proxy, Build_And_Upload_NonProd, Deploy_To_NonProd, Verify_NonProd_Deployment, Request_Production_Approval, Build_And_Upload_Prod, Deploy_To_Production]
    if: always()
    runs-on: ubuntu-latest
    steps:
      # Previous summary generation step remains the same

      - name: Send Deployment Summary Email
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const emailBody = `
            # Apigee Proxy Deployment Summary üöÄ

            ## Deployment Information
            - **Proxy Name:** ${{ inputs.proxy_name }}
            - **Environment Group:** ${{ inputs.environment_group }}
            - **Environment Type:** ${{ inputs.environment_type }}
            - **Deployment Time:** ${new Date().toISOString()}

            ## Status Summary
            ### Authentication
            - Non-Prod Auth: ${{ needs.Setup_Auth.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}
            - Prod Auth: ${{ needs.Setup_Auth.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}

            ### API Proxy Validation
            - Apigeelint: ${{ needs.Validate_API_Proxy.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}

            ### Non-Production Deployment
            - Build & Upload: ${{ needs.Build_And_Upload_NonProd.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}
            - Revision: ${{ needs.Build_And_Upload_NonProd.outputs.latest_revision }}
            - Deployment: ${{ needs.Deploy_To_NonProd.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}
            - Environment: ${{ inputs.environment_group }}-${{ inputs.environment_type }}
            - Verification: ${{ needs.Verify_NonProd_Deployment.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}

            ### Production Deployment
            ${needs.Build_And_Upload_Prod.result ? `
            - Build & Upload: ${{ needs.Build_And_Upload_Prod.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}
            - Revision: ${{ needs.Build_And_Upload_Prod.outputs.latest_revision }}
            - Deployment: ${{ needs.Deploy_To_Production.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}
            - Environment: ${{ inputs.environment_group }}-test-env
            ` : '- Production Deployment: ‚è≠Ô∏è Not Required'}

            ## Revision Information
            - Non-Prod Revision: ${{ needs.Build_And_Upload_NonProd.outputs.latest_revision }}
            ${needs.Build_And_Upload_Prod.outputs.latest_revision ? `- Production Revision: ${{ needs.Build_And_Upload_Prod.outputs.latest_revision }}` : ''}

            ## Deployment URL
            ${context.payload.repository.html_url}/actions/runs/${context.runId}

            This is an automated message from GitHub Actions.
            `;

            // Get initiator's email
            const initiator = context.actor;
            const { data: user } = await github.rest.users.getByUsername({
              username: initiator
            });
            
            const emailTo = user.email || `${initiator}@users.noreply.github.com`;

            // Create notification issue that will trigger email
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `[Deployment Summary] ${inputs.proxy_name} - ${new Date().toISOString()}`,
              body: emailBody,
              assignees: [initiator],
              labels: ['deployment-notification']
            });

            // Add comment to the issue for email notification
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'deployment-notification',
              state: 'open',
              per_page: 1
            });

            if (issues.data.length > 0) {
              const issueNumber = issues.data[0].number;
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `@${initiator} Deployment summary has been sent to your email.`
              });

              // Close the issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                state: 'closed'
              });
            }

      - name: Send Direct Email Notification
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const notificationBody = `
            Deployment Status: ${needs.Deploy_To_NonProd.result === 'success' ? 'SUCCESS ‚úÖ' : 'FAILED ‚ùå'}
            
            Quick Summary:
            - Proxy: ${{ inputs.proxy_name }}
            - Environment: ${{ inputs.environment_group }}-${{ inputs.environment_type }}
            - Non-Prod Revision: ${{ needs.Build_And_Upload_NonProd.outputs.latest_revision }}
            ${needs.Build_And_Upload_Prod.outputs.latest_revision ? `- Prod Revision: ${{ needs.Build_And_Upload_Prod.outputs.latest_revision }}` : ''}
            
            Check full details at: ${context.payload.repository.html_url}/actions/runs/${context.runId}
            `;

            // Create a notification that will trigger email
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number || context.payload.pull_request?.number,
              body: `@${context.actor} ${notificationBody}`
            });
