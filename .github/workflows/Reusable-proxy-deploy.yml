name: Apigee Proxy Deployment [Reusable Workflow]

on:
  workflow_call:
    inputs:
      proxy_name:
        description: The name of the API proxy to deploy
        required: true
        type: string
      proxy_directory:
        description: Working directory to zip up as your proxy bundle
        required: false
        type: string
        default: 'apiproxy'
      environment_group:
        description: The environment group to deploy to
        required: true
        type: string
      environment_type:
        description: The environment types to deploy to
        required: true
        type: string
      runner:
        description: The runner to use for the job
        required: false
        default: 'ubuntu-latest'
        type: string
    secrets:
      apigee_org:
        required: true
      workload_identity_provider:
        required: true
      service_account:
        required: true

permissions:
  contents: read
  id-token: write

jobs:
  Prepare_Environment_List:
    runs-on: ${{ inputs.runner }}
    outputs:
      environments: ${{ steps.set-envs.outputs.environments }}
    steps:
      - name: Set Environment List
        id: set-envs
        run: |
          GROUP="${{ inputs.environment_group }}"
          TYPES="${{ inputs.environment_type }}"
          
          generate_env_list() {
            local group=$1
            local types=$2
            local envs="["
            
            IFS=',' read -ra ENV_TYPES <<< "$types"
            local first=true
            
            for type in "${ENV_TYPES[@]}"; do
              if [ "$first" = true ]; then
                first=false
              else
                envs="${envs},"
              fi
              
              if [ "$group" = "default" ]; then
                envs="${envs}\"${type}\""
              else
                envs="${envs}\"${group}-${type}\""
              fi
            done
            
            envs="${envs}]"
            echo "$envs"
          }
          
          ENVIRONMENTS=$(generate_env_list "$GROUP" "$TYPES")
          
          echo "Environment Group: $GROUP"
          echo "Environment Types: $TYPES"
          echo "Generated environment list: $ENVIRONMENTS"
          
          echo "environments=$ENVIRONMENTS" >> $GITHUB_OUTPUT

  GCP_Auth:
    needs: [Prepare_Environment_List]
    runs-on: ${{ inputs.runner }}
    outputs:
      token: ${{ steps.get-token.outputs.token }}
    steps:
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.workload_identity_provider }}
          service_account: ${{ secrets.service_account }}
          create_credentials_file: true
          token_format: 'access_token'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Get Access Token
        id: get-token
        run: |
          TOKEN=$(gcloud auth print-access-token)
          echo "::add-mask::$TOKEN"
          echo "token=$TOKEN" >> $GITHUB_OUTPUT

      - name: Verify Token
        run: |
          if [ -n "${{ steps.get-token.outputs.token }}" ]; then
            echo "Access token successfully generated"
          else
            echo "Failed to generate access token"
            exit 1
          fi
  ApigeeLint:
    needs: [GCP_Auth]
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install apigeelint
        run: npm install -g apigeelint

      - name: Run apigeelint
        run: apigeelint -s ${{ inputs.proxy_directory }} -f table.js

  Prepare_and_Upload:
    needs: [GCP_Auth, ApigeeLint]
    runs-on: ${{ inputs.runner }}
    outputs:
      latest_revision: ${{ steps.upload.outputs.revision }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install apigeecli
        run: |
          mkdir -p $HOME/.apigeecli/bin
          curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
          echo "$HOME/.apigeecli/bin" >> $GITHUB_PATH

      - name: Create API bundle
        run: |
          if [ -d "${{ inputs.proxy_directory }}" ]; then
            zip -r proxy.zip ${{ inputs.proxy_directory }}/*
          else
            echo "Error: Could not find ${{ inputs.proxy_directory }} directory"
            exit 1
          fi

      - name: Debug Token
        run: |
          echo "Checking access token from GCP_Auth job..."
          if [ -n "${{ needs.GCP_Auth.outputs.token }}" ]; then
            echo "Access token is available"
          else
            echo "Access token is missing"
            exit 1
          fi

      - name: Upload and Get Revision
        id: upload
        env:
          TOKEN: ${{ needs.GCP_Auth.outputs.token }}
        run: |
          echo "Importing API proxy bundle to Apigee organization"
          
          IMPORT_OUTPUT=$($HOME/.apigeecli/bin/apigeecli apis create bundle \
            -n "${{ inputs.proxy_name }}" \
            -p proxy.zip \
            --org "${{ secrets.apigee_org }}" \
            --token "$TOKEN")
          
          echo "$IMPORT_OUTPUT"
          REVISION=$(echo "$IMPORT_OUTPUT" | grep -oP 'revision.*?(\d+)' | grep -oP '\d+')
          echo "revision=$REVISION" >> $GITHUB_OUTPUT

  Deploy_to_Environment:
    needs: [Prepare_Environment_List, GCP_Auth, Prepare_and_Upload]
    strategy:
      matrix:
        environment: ${{ fromJSON(needs.Prepare_Environment_List.outputs.environments) }}
      fail-fast: false
      max-parallel: 1
    runs-on: ${{ inputs.runner }}
    environment: ${{ matrix.environment }}
    steps:
      - name: Install apigeecli
        run: |
          mkdir -p $HOME/.apigeecli/bin
          curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
          echo "$HOME/.apigeecli/bin" >> $GITHUB_PATH

      - name: Deploy to Environment
        run: |
          echo "Deploying proxy '${{ inputs.proxy_name }}' revision '${{ needs.Prepare_and_Upload.outputs.latest_revision }}' to environment '${{ matrix.environment }}'"
          
          $HOME/.apigeecli/bin/apigeecli apis deploy \
            --name "${{ inputs.proxy_name }}" \
            --org "${{ secrets.apigee_org }}" \
            --env "${{ matrix.environment }}" \
            --rev "${{ needs.Prepare_and_Upload.outputs.latest_revision }}" \
            --token "${{ needs.GCP_Auth.outputs.access_token }}" \
            --ovr \
            --wait

  Cleanup_Old_Revisions:
    needs: [Deploy_to_Environment, GCP_Auth]
    if: always()
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Delete Older Revisions
        run: |
          REVISIONS=$(curl -s -H "Authorization: Bearer ${{ needs.GCP_Auth.outputs.access_token }}" \
            "https://apigee.googleapis.com/v1/organizations/${{ secrets.apigee_org }}/apis/${{ inputs.proxy_name }}/revisions")
          
          SORTED_REVISIONS=$(echo $REVISIONS | jq -r '.[] | select(. != null)' | sort -n)
          TOTAL_COUNT=$(echo "$SORTED_REVISIONS" | wc -l)
          KEEP_COUNT=5
          
          if [ $TOTAL_COUNT -gt $KEEP_COUNT ]; then
            DELETE_COUNT=$((TOTAL_COUNT - KEEP_COUNT))
            echo "$SORTED_REVISIONS" | head -n $DELETE_COUNT | while read REV; do
              curl -X DELETE -H "Authorization: Bearer ${{ needs.GCP_Auth.outputs.access_token }}" \
                "https://apigee.googleapis.com/v1/organizations/${{ secrets.apigee_org }}/apis/${{ inputs.proxy_name }}/revisions/$REV"
              echo "Deleted revision $REV"
            done
          fi

  Deployment_Summary:
    needs: [ApigeeLint, Prepare_and_Upload, Deploy_to_Environment, Prepare_Environment_List, Cleanup_Old_Revisions]
    if: always()
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Generate and Display Deployment Summary
        env:
          LINT_RESULT: ${{ needs.ApigeeLint.result }}
          DEPLOY_RESULT: ${{ needs.Deploy_to_Environment.result }}
          PROXY_NAME: ${{ inputs.proxy_name }}
          NEW_VERSION: ${{ needs.Prepare_and_Upload.outputs.latest_revision }}
          ENVIRONMENTS: ${{ needs.Prepare_Environment_List.outputs.environments }}
          GROUP: ${{ inputs.environment_group }}
          TYPES: ${{ inputs.environment_type }}
        run: |
          {
            echo "# Apigee Proxy Deployment Summary"
            echo
            echo "## Deployment Information"
            echo "| Item | Value |"
            echo "|------|-------|"
            echo "| Proxy Name | ${PROXY_NAME} |"
            echo "| New Version | ${NEW_VERSION} |"
            echo "| Environment Group | ${GROUP} |"
            echo "| Environment Types | ${TYPES} |"
            echo "| Target Environments | ${ENVIRONMENTS} |"
            echo
            echo "## Status"
            echo "| Step | Result |"
            echo "|------|--------|"
            if [ "$LINT_RESULT" == "success" ]; then
              echo "| Lint Check | ✅ Success |"
            else
              echo "| Lint Check | ⛔ Failed |"
            fi
            if [ "$DEPLOY_RESULT" == "success" ]; then
              echo "| Deployment | ✅ Success |"
            else
              echo "| Deployment | ⛔ Failed |"
            fi
          } >> $GITHUB_STEP_SUMMARY
